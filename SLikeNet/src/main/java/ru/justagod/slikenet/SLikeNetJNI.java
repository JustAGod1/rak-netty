/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package ru.justagod.slikenet;

public class SLikeNetJNI {
  public final static native short ByteArray_getByteAt(long jarg1, ByteArray jarg1_, long jarg2);
  public final static native void ByteArray_setByteAt(long jarg1, ByteArray jarg1_, long jarg2, short jarg3);
  public final static native long ByteArray_getSize(long jarg1, ByteArray jarg1_);
  public final static native long new_ByteArray(long jarg1, long jarg2);
  public final static native void delete_ByteArray(long jarg1);
  public final static native void SOCKADDR_IN_sin_family_set(long jarg1, SOCKADDR_IN jarg1_, short jarg2);
  public final static native short SOCKADDR_IN_sin_family_get(long jarg1, SOCKADDR_IN jarg1_);
  public final static native void SOCKADDR_IN_sin_port_set(long jarg1, SOCKADDR_IN jarg1_, long jarg2);
  public final static native long SOCKADDR_IN_sin_port_get(long jarg1, SOCKADDR_IN jarg1_);
  public final static native void SOCKADDR_IN_sin_addr_set(long jarg1, SOCKADDR_IN jarg1_, long jarg2);
  public final static native long SOCKADDR_IN_sin_addr_get(long jarg1, SOCKADDR_IN jarg1_);
  public final static native void SOCKADDR_IN_sin_zero_set(long jarg1, SOCKADDR_IN jarg1_, long jarg2);
  public final static native long SOCKADDR_IN_sin_zero_get(long jarg1, SOCKADDR_IN jarg1_);
  public final static native long new_SOCKADDR_IN();
  public final static native void delete_SOCKADDR_IN(long jarg1);
  public final static native int __GET_TIME_64BIT_get();
  public final static native int MAX_ALLOCA_STACK_ALLOCATION_get();
  public final static native int _USE_RAK_MEMORY_OVERRIDE_get();
  public final static native int OPEN_SSL_CLIENT_SUPPORT_get();
  public final static native int BITSTREAM_STACK_ALLOCATION_SIZE_get();
  public final static native int MAXIMUM_NUMBER_OF_INTERNAL_IDS_get();
  public final static native int DATAGRAM_MESSAGE_ID_ARRAY_LENGTH_get();
  public final static native int RESEND_BUFFER_ARRAY_LENGTH_get();
  public final static native int RESEND_BUFFER_ARRAY_MASK_get();
  public final static native int GET_TIME_SPIKE_LIMIT_get();
  public final static native int USE_SLIDING_WINDOW_CONGESTION_CONTROL_get();
  public final static native int PREALLOCATE_LARGE_MESSAGES_get();
  public final static native int RAKNET_SUPPORT_IPV6_get();
  public final static native int RAKSTRING_TYPE_IS_UNICODE_get();
  public final static native int RPC4_GLOBAL_REGISTRATION_MAX_FUNCTIONS_get();
  public final static native int RPC4_GLOBAL_REGISTRATION_MAX_FUNCTION_NAME_LENGTH_get();
  public final static native int XBOX_BYPASS_SECURITY_get();
  public final static native int BUFFERED_PACKETS_PAGE_SIZE_get();
  public final static native int INTERNAL_PACKET_PAGE_SIZE_get();
  public final static native int RAKPEER_USER_THREADED_get();
  public final static native int USE_ALLOCA_get();
  public final static native int SLNET_MAX_RETRIEVABLE_FILESIZE_get();
  public final static native int LIBCAT_SECURITY_get();
  public final static native int _RAKNET_SUPPORT_ConnectionGraph2_get();
  public final static native int _RAKNET_SUPPORT_DirectoryDeltaTransfer_get();
  public final static native int _RAKNET_SUPPORT_FileListTransfer_get();
  public final static native int _RAKNET_SUPPORT_FullyConnectedMesh_get();
  public final static native int _RAKNET_SUPPORT_FullyConnectedMesh2_get();
  public final static native int _RAKNET_SUPPORT_MessageFilter_get();
  public final static native int _RAKNET_SUPPORT_NatPunchthroughClient_get();
  public final static native int _RAKNET_SUPPORT_NatPunchthroughServer_get();
  public final static native int _RAKNET_SUPPORT_NatTypeDetectionClient_get();
  public final static native int _RAKNET_SUPPORT_NatTypeDetectionServer_get();
  public final static native int _RAKNET_SUPPORT_PacketLogger_get();
  public final static native int _RAKNET_SUPPORT_ReadyEvent_get();
  public final static native int _RAKNET_SUPPORT_ReplicaManager3_get();
  public final static native int _RAKNET_SUPPORT_Router2_get();
  public final static native int _RAKNET_SUPPORT_RPC4Plugin_get();
  public final static native int _RAKNET_SUPPORT_TeamBalancer_get();
  public final static native int _RAKNET_SUPPORT_TeamManager_get();
  public final static native int _RAKNET_SUPPORT_UDPProxyClient_get();
  public final static native int _RAKNET_SUPPORT_UDPProxyCoordinator_get();
  public final static native int _RAKNET_SUPPORT_UDPProxyServer_get();
  public final static native int _RAKNET_SUPPORT_ConsoleServer_get();
  public final static native int _RAKNET_SUPPORT_RakNetTransport_get();
  public final static native int _RAKNET_SUPPORT_TelnetTransport_get();
  public final static native int _RAKNET_SUPPORT_TCPInterface_get();
  public final static native int _RAKNET_SUPPORT_LogCommandParser_get();
  public final static native int _RAKNET_SUPPORT_RakNetCommandParser_get();
  public final static native int _RAKNET_SUPPORT_EmailSender_get();
  public final static native int _RAKNET_SUPPORT_HTTPConnection_get();
  public final static native int _RAKNET_SUPPORT_HTTPConnection2_get();
  public final static native int _RAKNET_SUPPORT_PacketizedTCP_get();
  public final static native int _RAKNET_SUPPORT_TwoWayAuthentication_get();
  public final static native int _RAKNET_SUPPORT_CloudClient_get();
  public final static native int _RAKNET_SUPPORT_CloudServer_get();
  public final static native int _RAKNET_SUPPORT_DynDNS_get();
  public final static native int _RAKNET_SUPPORT_Rackspace_get();
  public final static native int _RAKNET_SUPPORT_FileOperations_get();
  public final static native int _RAKNET_SUPPORT_UDPForwarder_get();
  public final static native int _RAKNET_SUPPORT_StatisticsHistory_get();
  public final static native int _RAKNET_SUPPORT_LibVoice_get();
  public final static native int _RAKNET_SUPPORT_RelayPlugin_get();
  public final static native long new_SimpleMutex();
  public final static native void delete_SimpleMutex(long jarg1);
  public final static native void SimpleMutex_Lock(long jarg1, SimpleMutex jarg1_);
  public final static native void SimpleMutex_Unlock(long jarg1, SimpleMutex jarg1_);
  public final static native int MAX_RPC_MAP_SIZE_get();
  public final static native int UNDEFINED_RPC_INDEX_get();
  public final static native String PRINTF_64_BIT_MODIFIER_get();
  public final static native void PublicKey_publicKeyMode_set(long jarg1, PublicKey jarg1_, int jarg2);
  public final static native int PublicKey_publicKeyMode_get(long jarg1, PublicKey jarg1_);
  public final static native void PublicKey_remoteServerPublicKey_set(long jarg1, PublicKey jarg1_, String jarg2);
  public final static native String PublicKey_remoteServerPublicKey_get(long jarg1, PublicKey jarg1_);
  public final static native void PublicKey_myPublicKey_set(long jarg1, PublicKey jarg1_, String jarg2);
  public final static native String PublicKey_myPublicKey_get(long jarg1, PublicKey jarg1_);
  public final static native void PublicKey_myPrivateKey_set(long jarg1, PublicKey jarg1_, String jarg2);
  public final static native String PublicKey_myPrivateKey_get(long jarg1, PublicKey jarg1_);
  public final static native long new_PublicKey();
  public final static native void delete_PublicKey(long jarg1);
  public final static native long new_SocketDescriptor__SWIG_0();
  public final static native long new_SocketDescriptor__SWIG_1(int jarg1, String jarg2);
  public final static native void SocketDescriptor_port_set(long jarg1, SocketDescriptor jarg1_, int jarg2);
  public final static native int SocketDescriptor_port_get(long jarg1, SocketDescriptor jarg1_);
  public final static native void SocketDescriptor_hostAddress_set(long jarg1, SocketDescriptor jarg1_, String jarg2);
  public final static native String SocketDescriptor_hostAddress_get(long jarg1, SocketDescriptor jarg1_);
  public final static native void SocketDescriptor_socketFamily_set(long jarg1, SocketDescriptor jarg1_, short jarg2);
  public final static native short SocketDescriptor_socketFamily_get(long jarg1, SocketDescriptor jarg1_);
  public final static native void SocketDescriptor_remotePortRakNetWasStartedOn_PS3_PSP2_set(long jarg1, SocketDescriptor jarg1_, int jarg2);
  public final static native int SocketDescriptor_remotePortRakNetWasStartedOn_PS3_PSP2_get(long jarg1, SocketDescriptor jarg1_);
  public final static native void SocketDescriptor_chromeInstance_set(long jarg1, SocketDescriptor jarg1_, int jarg2);
  public final static native int SocketDescriptor_chromeInstance_get(long jarg1, SocketDescriptor jarg1_);
  public final static native void SocketDescriptor_blockingSocket_set(long jarg1, SocketDescriptor jarg1_, boolean jarg2);
  public final static native boolean SocketDescriptor_blockingSocket_get(long jarg1, SocketDescriptor jarg1_);
  public final static native void SocketDescriptor_extraSocketOptions_set(long jarg1, SocketDescriptor jarg1_, long jarg2);
  public final static native long SocketDescriptor_extraSocketOptions_get(long jarg1, SocketDescriptor jarg1_);
  public final static native void delete_SocketDescriptor(long jarg1);
  public final static native boolean NonNumericHostString(String jarg1);
  public final static native long new_SystemAddress__SWIG_0();
  public final static native long new_SystemAddress__SWIG_1(String jarg1);
  public final static native long new_SystemAddress__SWIG_2(String jarg1, int jarg2);
  public final static native void SystemAddress_debugPort_set(long jarg1, SystemAddress jarg1_, int jarg2);
  public final static native int SystemAddress_debugPort_get(long jarg1, SystemAddress jarg1_);
  public final static native int SystemAddress_size();
  public final static native long SystemAddress_ToInteger(long jarg1, SystemAddress jarg1_);
  public final static native short SystemAddress_GetIPVersion(long jarg1, SystemAddress jarg1_);
  public final static native long SystemAddress_GetIPPROTO(long jarg1, SystemAddress jarg1_);
  public final static native void SystemAddress_SetToLoopback__SWIG_0(long jarg1, SystemAddress jarg1_);
  public final static native void SystemAddress_SetToLoopback__SWIG_1(long jarg1, SystemAddress jarg1_, short jarg2);
  public final static native boolean SystemAddress_IsLoopback(long jarg1, SystemAddress jarg1_);
  public final static native String SystemAddress_ToString__SWIG_0(long jarg1, SystemAddress jarg1_, boolean jarg2, char jarg3);
  public final static native String SystemAddress_ToString__SWIG_1(long jarg1, SystemAddress jarg1_, boolean jarg2);
  public final static native void SystemAddress_ToString__SWIG_2(long jarg1, SystemAddress jarg1_, boolean jarg2, String jarg3, char jarg4);
  public final static native void SystemAddress_ToString__SWIG_3(long jarg1, SystemAddress jarg1_, boolean jarg2, String jarg3, long jarg4, char jarg5);
  public final static native void SystemAddress_ToString__SWIG_4(long jarg1, SystemAddress jarg1_, boolean jarg2, String jarg3, long jarg4);
  public final static native boolean SystemAddress_FromString__SWIG_0(long jarg1, SystemAddress jarg1_, String jarg2, char jarg3, int jarg4);
  public final static native boolean SystemAddress_FromString__SWIG_1(long jarg1, SystemAddress jarg1_, String jarg2, char jarg3);
  public final static native boolean SystemAddress_FromString__SWIG_2(long jarg1, SystemAddress jarg1_, String jarg2);
  public final static native boolean SystemAddress_FromStringExplicitPort__SWIG_0(long jarg1, SystemAddress jarg1_, String jarg2, int jarg3, int jarg4);
  public final static native boolean SystemAddress_FromStringExplicitPort__SWIG_1(long jarg1, SystemAddress jarg1_, String jarg2, int jarg3);
  public final static native void SystemAddress_CopyPort(long jarg1, SystemAddress jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native boolean SystemAddress_EqualsExcludingPort(long jarg1, SystemAddress jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native int SystemAddress_GetPort(long jarg1, SystemAddress jarg1_);
  public final static native int SystemAddress_GetPortNetworkOrder(long jarg1, SystemAddress jarg1_);
  public final static native void SystemAddress_SetPortHostOrder(long jarg1, SystemAddress jarg1_, int jarg2);
  public final static native void SystemAddress_SetPortNetworkOrder(long jarg1, SystemAddress jarg1_, int jarg2);
  public final static native boolean SystemAddress_SetBinaryAddress__SWIG_0(long jarg1, SystemAddress jarg1_, String jarg2, char jarg3);
  public final static native boolean SystemAddress_SetBinaryAddress__SWIG_1(long jarg1, SystemAddress jarg1_, String jarg2);
  public final static native void SystemAddress_ToString_Old__SWIG_0(long jarg1, SystemAddress jarg1_, boolean jarg2, String jarg3, char jarg4);
  public final static native void SystemAddress_ToString_Old__SWIG_1(long jarg1, SystemAddress jarg1_, boolean jarg2, String jarg3);
  public final static native void SystemAddress_ToString_Old__SWIG_2(long jarg1, SystemAddress jarg1_, boolean jarg2, String jarg3, long jarg4, char jarg5);
  public final static native void SystemAddress_ToString_Old__SWIG_3(long jarg1, SystemAddress jarg1_, boolean jarg2, String jarg3, long jarg4);
  public final static native void SystemAddress_FixForIPVersion(long jarg1, SystemAddress jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native boolean SystemAddress_IsLANAddress(long jarg1, SystemAddress jarg1_);
  public final static native void SystemAddress_systemIndex_set(long jarg1, SystemAddress jarg1_, int jarg2);
  public final static native int SystemAddress_systemIndex_get(long jarg1, SystemAddress jarg1_);
  public final static native long SystemAddress_GetAddr4(long jarg1, SystemAddress jarg1_);
  public final static native void delete_SystemAddress(long jarg1);
  public final static native long new_RakNetGUID__SWIG_0();
  public final static native long new_RakNetGUID__SWIG_1(java.math.BigInteger jarg1);
  public final static native void RakNetGUID_g_set(long jarg1, RakNetGUID jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger RakNetGUID_g_get(long jarg1, RakNetGUID jarg1_);
  public final static native String RakNetGUID_ToString__SWIG_0(long jarg1, RakNetGUID jarg1_);
  public final static native void RakNetGUID_ToString__SWIG_1(long jarg1, RakNetGUID jarg1_, String jarg2, long jarg3);
  public final static native boolean RakNetGUID_FromString(long jarg1, RakNetGUID jarg1_, String jarg2);
  public final static native long RakNetGUID_ToUint32(long jarg1, RakNetGUID jarg1_);
  public final static native void RakNetGUID_systemIndex_set(long jarg1, RakNetGUID jarg1_, int jarg2);
  public final static native int RakNetGUID_systemIndex_get(long jarg1, RakNetGUID jarg1_);
  public final static native int RakNetGUID_size();
  public final static native void delete_RakNetGUID(long jarg1);
  public final static native void AddressOrGUID_rakNetGuid_set(long jarg1, AddressOrGUID jarg1_, long jarg2, RakNetGUID jarg2_);
  public final static native long AddressOrGUID_rakNetGuid_get(long jarg1, AddressOrGUID jarg1_);
  public final static native void AddressOrGUID_systemAddress_set(long jarg1, AddressOrGUID jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native long AddressOrGUID_systemAddress_get(long jarg1, AddressOrGUID jarg1_);
  public final static native int AddressOrGUID_GetSystemIndex(long jarg1, AddressOrGUID jarg1_);
  public final static native boolean AddressOrGUID_IsUndefined(long jarg1, AddressOrGUID jarg1_);
  public final static native void AddressOrGUID_SetUndefined(long jarg1, AddressOrGUID jarg1_);
  public final static native long AddressOrGUID_ToInteger(long jarg1, AddressOrGUID jarg1_);
  public final static native String AddressOrGUID_ToString__SWIG_0(long jarg1, AddressOrGUID jarg1_, boolean jarg2);
  public final static native void AddressOrGUID_ToString__SWIG_1(long jarg1, AddressOrGUID jarg1_, boolean jarg2, String jarg3, long jarg4);
  public final static native long new_AddressOrGUID__SWIG_0();
  public final static native long new_AddressOrGUID__SWIG_1(long jarg1, AddressOrGUID jarg1_);
  public final static native long new_AddressOrGUID__SWIG_2(long jarg1, SystemAddress jarg1_);
  public final static native long new_AddressOrGUID__SWIG_3(long jarg1, Packet jarg1_);
  public final static native long new_AddressOrGUID__SWIG_4(long jarg1, RakNetGUID jarg1_);
  public final static native void delete_AddressOrGUID(long jarg1);
  public final static native void Packet_systemAddress_set(long jarg1, Packet jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native long Packet_systemAddress_get(long jarg1, Packet jarg1_);
  public final static native void Packet_guid_set(long jarg1, Packet jarg1_, long jarg2, RakNetGUID jarg2_);
  public final static native long Packet_guid_get(long jarg1, Packet jarg1_);
  public final static native void Packet_length_set(long jarg1, Packet jarg1_, long jarg2);
  public final static native long Packet_length_get(long jarg1, Packet jarg1_);
  public final static native void Packet_bitSize_set(long jarg1, Packet jarg1_, long jarg2);
  public final static native long Packet_bitSize_get(long jarg1, Packet jarg1_);
  public final static native void Packet_data_set(long jarg1, Packet jarg1_, long jarg2);
  public final static native long Packet_data_get(long jarg1, Packet jarg1_);
  public final static native void Packet_deleteData_set(long jarg1, Packet jarg1_, boolean jarg2);
  public final static native boolean Packet_deleteData_get(long jarg1, Packet jarg1_);
  public final static native void Packet_wasGeneratedLocally_set(long jarg1, Packet jarg1_, boolean jarg2);
  public final static native boolean Packet_wasGeneratedLocally_get(long jarg1, Packet jarg1_);
  public final static native long Packet_dataArray(long jarg1, Packet jarg1_);
  public final static native long new_Packet();
  public final static native void delete_Packet(long jarg1);
  public final static native int UNASSIGNED_PLAYER_INDEX_get();
  public final static native java.math.BigInteger UNASSIGNED_NETWORK_ID_get();
  public final static native int PING_TIMES_ARRAY_SIZE_get();
  public final static native void uint24_t_val_set(long jarg1, uint24_t jarg1_, long jarg2);
  public final static native long uint24_t_val_get(long jarg1, uint24_t jarg1_);
  public final static native long new_uint24_t__SWIG_0();
  public final static native long new_uint24_t__SWIG_1(long jarg1, uint24_t jarg1_);
  public final static native long new_uint24_t__SWIG_2(long jarg1);
  public final static native void delete_uint24_t(long jarg1);
  public final static native long new_RakString__SWIG_0();
  public final static native long new_RakString__SWIG_1(char jarg1);
  public final static native long new_RakString__SWIG_2(short jarg1);
  public final static native long new_RakString__SWIG_3(String jarg1);
  public final static native void delete_RakString(long jarg1);
  public final static native long new_RakString__SWIG_4(long jarg1, RakString jarg1_);
  public final static native String RakString_C_String(long jarg1, RakString jarg1_);
  public final static native String RakString_C_StringUnsafe(long jarg1, RakString jarg1_);
  public final static native long RakString_Find__SWIG_0(long jarg1, RakString jarg1_, String jarg2, long jarg3);
  public final static native long RakString_Find__SWIG_1(long jarg1, RakString jarg1_, String jarg2);
  public final static native String RakString_ToLower(long jarg1, RakString jarg1_);
  public final static native String RakString_ToUpper(long jarg1, RakString jarg1_);
  public final static native void RakString_Set(long jarg1, RakString jarg1_, String jarg2);
  public final static native long RakString_Assign(long jarg1, RakString jarg1_, String jarg2, long jarg3, long jarg4);
  public final static native boolean RakString_IsEmpty(long jarg1, RakString jarg1_);
  public final static native long RakString_GetLength(long jarg1, RakString jarg1_);
  public final static native long RakString_GetLengthUTF8(long jarg1, RakString jarg1_);
  public final static native void RakString_Replace(long jarg1, RakString jarg1_, long jarg2, long jarg3, short jarg4);
  public final static native void RakString_SetChar__SWIG_0(long jarg1, RakString jarg1_, long jarg2, short jarg3);
  public final static native void RakString_SetChar__SWIG_1(long jarg1, RakString jarg1_, long jarg2, long jarg3, RakString jarg3_);
  public final static native void RakString_Truncate(long jarg1, RakString jarg1_, long jarg2);
  public final static native void RakString_TruncateUTF8(long jarg1, RakString jarg1_, long jarg2);
  public final static native long RakString_SubStr(long jarg1, RakString jarg1_, long jarg2, long jarg3);
  public final static native void RakString_Erase(long jarg1, RakString jarg1_, long jarg2, long jarg3);
  public final static native void RakString_TerminateAtFirstCharacter(long jarg1, RakString jarg1_, char jarg2);
  public final static native void RakString_TerminateAtLastCharacter(long jarg1, RakString jarg1_, char jarg2);
  public final static native void RakString_StartAfterFirstCharacter(long jarg1, RakString jarg1_, char jarg2);
  public final static native void RakString_StartAfterLastCharacter(long jarg1, RakString jarg1_, char jarg2);
  public final static native int RakString_GetCharacterCount(long jarg1, RakString jarg1_, char jarg2);
  public final static native void RakString_RemoveCharacter(long jarg1, RakString jarg1_, char jarg2);
  public final static native long RakString_NonVariadic(String jarg1);
  public final static native long RakString_ToInteger__SWIG_0(String jarg1);
  public final static native long RakString_ToInteger__SWIG_1(long jarg1, RakString jarg1_);
  public final static native int RakString_ReadIntFromSubstring(String jarg1, long jarg2, long jarg3);
  public final static native void RakString_AppendBytes(long jarg1, RakString jarg1_, String jarg2, long jarg3);
  public final static native int RakString_StrCmp(long jarg1, RakString jarg1_, long jarg2, RakString jarg2_);
  public final static native int RakString_StrNCmp(long jarg1, RakString jarg1_, long jarg2, RakString jarg2_, long jarg3);
  public final static native int RakString_StrICmp(long jarg1, RakString jarg1_, long jarg2, RakString jarg2_);
  public final static native void RakString_Clear(long jarg1, RakString jarg1_);
  public final static native void RakString_Printf(long jarg1, RakString jarg1_);
  public final static native boolean RakString_IPAddressMatch(long jarg1, RakString jarg1_, String jarg2);
  public final static native boolean RakString_ContainsNonprintableExceptSpaces(long jarg1, RakString jarg1_);
  public final static native boolean RakString_IsEmailAddress(long jarg1, RakString jarg1_);
  public final static native long RakString_URLEncode(long jarg1, RakString jarg1_);
  public final static native long RakString_URLDecode(long jarg1, RakString jarg1_);
  public final static native void RakString_SplitURI(long jarg1, RakString jarg1_, long jarg2, RakString jarg2_, long jarg3, RakString jarg3_, long jarg4, RakString jarg4_);
  public final static native long RakString_SQLEscape(long jarg1, RakString jarg1_);
  public final static native long RakString_FormatForPOST__SWIG_0(String jarg1, String jarg2, String jarg3, String jarg4);
  public final static native long RakString_FormatForPOST__SWIG_1(String jarg1, String jarg2, String jarg3);
  public final static native long RakString_FormatForPUT__SWIG_0(String jarg1, String jarg2, String jarg3, String jarg4);
  public final static native long RakString_FormatForPUT__SWIG_1(String jarg1, String jarg2, String jarg3);
  public final static native long RakString_FormatForGET__SWIG_0(String jarg1, String jarg2);
  public final static native long RakString_FormatForGET__SWIG_1(String jarg1);
  public final static native long RakString_FormatForDELETE__SWIG_0(String jarg1, String jarg2);
  public final static native long RakString_FormatForDELETE__SWIG_1(String jarg1);
  public final static native long RakString_MakeFilePath(long jarg1, RakString jarg1_);
  public final static native void RakString_FreeMemory();
  public final static native void RakString_FreeMemoryNoMutex();
  public final static native void RakString_Serialize__SWIG_0(long jarg1, RakString jarg1_, long jarg2, BitStream jarg2_);
  public final static native void RakString_Serialize__SWIG_1(String jarg1, long jarg2, BitStream jarg2_);
  public final static native void RakString_SerializeCompressed__SWIG_0(long jarg1, RakString jarg1_, long jarg2, BitStream jarg2_, short jarg3, boolean jarg4);
  public final static native void RakString_SerializeCompressed__SWIG_1(long jarg1, RakString jarg1_, long jarg2, BitStream jarg2_, short jarg3);
  public final static native void RakString_SerializeCompressed__SWIG_2(long jarg1, RakString jarg1_, long jarg2, BitStream jarg2_);
  public final static native void RakString_SerializeCompressed__SWIG_3(String jarg1, long jarg2, BitStream jarg2_, short jarg3, boolean jarg4);
  public final static native void RakString_SerializeCompressed__SWIG_4(String jarg1, long jarg2, BitStream jarg2_, short jarg3);
  public final static native void RakString_SerializeCompressed__SWIG_5(String jarg1, long jarg2, BitStream jarg2_);
  public final static native boolean RakString_Deserialize__SWIG_0(long jarg1, RakString jarg1_, long jarg2, BitStream jarg2_);
  public final static native boolean RakString_Deserialize__SWIG_1(String jarg1, long jarg2, BitStream jarg2_);
  public final static native boolean RakString_DeserializeCompressed__SWIG_0(long jarg1, RakString jarg1_, long jarg2, BitStream jarg2_, boolean jarg3);
  public final static native boolean RakString_DeserializeCompressed__SWIG_1(long jarg1, RakString jarg1_, long jarg2, BitStream jarg2_);
  public final static native boolean RakString_DeserializeCompressed__SWIG_2(String jarg1, long jarg2, BitStream jarg2_, boolean jarg3);
  public final static native boolean RakString_DeserializeCompressed__SWIG_3(String jarg1, long jarg2, BitStream jarg2_);
  public final static native String RakString_ToString__SWIG_0(long jarg1);
  public final static native String RakString_ToString__SWIG_1(java.math.BigInteger jarg1);
  public final static native long RakString_GetSizeToAllocate(long jarg1);
  public final static native void RakString_SharedString_refCountMutex_set(long jarg1, RakString.SharedString jarg1_, long jarg2, SimpleMutex jarg2_);
  public final static native long RakString_SharedString_refCountMutex_get(long jarg1, RakString.SharedString jarg1_);
  public final static native void RakString_SharedString_refCount_set(long jarg1, RakString.SharedString jarg1_, long jarg2);
  public final static native long RakString_SharedString_refCount_get(long jarg1, RakString.SharedString jarg1_);
  public final static native void RakString_SharedString_bytesUsed_set(long jarg1, RakString.SharedString jarg1_, long jarg2);
  public final static native long RakString_SharedString_bytesUsed_get(long jarg1, RakString.SharedString jarg1_);
  public final static native void RakString_SharedString_bigString_set(long jarg1, RakString.SharedString jarg1_, String jarg2);
  public final static native String RakString_SharedString_bigString_get(long jarg1, RakString.SharedString jarg1_);
  public final static native void RakString_SharedString_c_str_set(long jarg1, RakString.SharedString jarg1_, String jarg2);
  public final static native String RakString_SharedString_c_str_get(long jarg1, RakString.SharedString jarg1_);
  public final static native void RakString_SharedString_smallString_set(long jarg1, RakString.SharedString jarg1_, String jarg2);
  public final static native String RakString_SharedString_smallString_get(long jarg1, RakString.SharedString jarg1_);
  public final static native long new_RakString_SharedString();
  public final static native void delete_RakString_SharedString(long jarg1);
  public final static native int RakString_RakStringComp(long jarg1, RakString jarg1_, long jarg2, RakString jarg2_);
  public final static native void RakString_LockMutex();
  public final static native void RakString_UnlockMutex();
  public final static native long new_RakWString__SWIG_0();
  public final static native long new_RakWString__SWIG_1(long jarg1, RakString jarg1_);
  public final static native long new_RakWString__SWIG_2(long jarg1);
  public final static native long new_RakWString__SWIG_3(long jarg1, RakWString jarg1_);
  public final static native long new_RakWString__SWIG_4(String jarg1);
  public final static native void delete_RakWString(long jarg1);
  public final static native long RakWString_C_String(long jarg1, RakWString jarg1_);
  public final static native void RakWString_Set(long jarg1, RakWString jarg1_, long jarg2);
  public final static native boolean RakWString_IsEmpty(long jarg1, RakWString jarg1_);
  public final static native long RakWString_GetLength(long jarg1, RakWString jarg1_);
  public final static native long RakWString_ToInteger(long jarg1, RakWString jarg1_);
  public final static native int RakWString_StrCmp(long jarg1, RakWString jarg1_, long jarg2, RakWString jarg2_);
  public final static native int RakWString_StrICmp(long jarg1, RakWString jarg1_, long jarg2, RakWString jarg2_);
  public final static native void RakWString_Clear(long jarg1, RakWString jarg1_);
  public final static native void RakWString_Printf(long jarg1, RakWString jarg1_);
  public final static native void RakWString_FPrintf(long jarg1, RakWString jarg1_, long jarg2);
  public final static native void RakWString_Serialize__SWIG_0(long jarg1, RakWString jarg1_, long jarg2, BitStream jarg2_);
  public final static native void RakWString_Serialize__SWIG_1(long jarg1, long jarg2, BitStream jarg2_);
  public final static native boolean RakWString_Deserialize__SWIG_0(long jarg1, RakWString jarg1_, long jarg2, BitStream jarg2_);
  public final static native boolean RakWString_Deserialize__SWIG_1(long jarg1, long jarg2, BitStream jarg2_);
  public final static native boolean RakWString_Deserialize__SWIG_2(long jarg1, long jarg2, long jarg3, BitStream jarg3_);
  public final static native long BitStream_GetInstance();
  public final static native void BitStream_DestroyInstance(long jarg1, BitStream jarg1_);
  public final static native long new_BitStream__SWIG_0();
  public final static native long new_BitStream__SWIG_1(long jarg1);
  public final static native long new_BitStream__SWIG_2(long jarg1, long jarg2, boolean jarg3);
  public final static native void delete_BitStream(long jarg1);
  public final static native void BitStream_Reset(long jarg1, BitStream jarg1_);
  public final static native boolean BitStream_SerializeFloat16(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3, float jarg4, float jarg5);
  public final static native boolean BitStream_SerializeBits__SWIG_0(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3, long jarg4, boolean jarg5);
  public final static native boolean BitStream_SerializeBits__SWIG_1(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3, long jarg4);
  public final static native boolean BitStream_Read__SWIG_1(long jarg1, BitStream jarg1_, long jarg2);
  public final static native boolean BitStream_Read__SWIG_2(long jarg1, BitStream jarg1_, long jarg2, long jarg3);
  public final static native boolean BitStream_ReadCompressed__SWIG_1(long jarg1, BitStream jarg1_, long jarg2);
  public final static native boolean BitStream_ReadCompressed__SWIG_2(long jarg1, BitStream jarg1_, long jarg2, long jarg3);
  public final static native boolean BitStream_Read__SWIG_3(long jarg1, BitStream jarg1_, long jarg2, BitStream jarg2_, long jarg3);
  public final static native boolean BitStream_Read__SWIG_4(long jarg1, BitStream jarg1_, long jarg2, BitStream jarg2_);
  public final static native void BitStream_Write__SWIG_1(long jarg1, BitStream jarg1_, long jarg2, BitStream jarg2_, long jarg3);
  public final static native void BitStream_Write__SWIG_2(long jarg1, BitStream jarg1_, long jarg2, BitStream jarg2_);
  public final static native void BitStream_WriteFloat16(long jarg1, BitStream jarg1_, float jarg2, float jarg3, float jarg4);
  public final static native boolean BitStream_ReadFloat16(long jarg1, BitStream jarg1_, long jarg2, float jarg3, float jarg4);
  public final static native void BitStream_ResetReadPointer(long jarg1, BitStream jarg1_);
  public final static native void BitStream_ResetWritePointer(long jarg1, BitStream jarg1_);
  public final static native void BitStream_AssertStreamEmpty(long jarg1, BitStream jarg1_);
  public final static native void BitStream_PrintBits__SWIG_0(long jarg1, BitStream jarg1_, String jarg2, long jarg3);
  public final static native void BitStream_PrintBits__SWIG_1(long jarg1, BitStream jarg1_);
  public final static native void BitStream_PrintHex__SWIG_0(long jarg1, BitStream jarg1_, String jarg2, long jarg3);
  public final static native void BitStream_PrintHex__SWIG_1(long jarg1, BitStream jarg1_);
  public final static native void BitStream_IgnoreBits(long jarg1, BitStream jarg1_, long jarg2);
  public final static native void BitStream_IgnoreBytes(long jarg1, BitStream jarg1_, long jarg2);
  public final static native void BitStream_SetWriteOffset(long jarg1, BitStream jarg1_, long jarg2);
  public final static native long BitStream_GetNumberOfBitsUsed(long jarg1, BitStream jarg1_);
  public final static native long BitStream_GetWriteOffset(long jarg1, BitStream jarg1_);
  public final static native long BitStream_GetNumberOfBytesUsed(long jarg1, BitStream jarg1_);
  public final static native long BitStream_GetReadOffset(long jarg1, BitStream jarg1_);
  public final static native void BitStream_SetReadOffset(long jarg1, BitStream jarg1_, long jarg2);
  public final static native long BitStream_GetNumberOfUnreadBits(long jarg1, BitStream jarg1_);
  public final static native void BitStream_SetData(long jarg1, BitStream jarg1_, long jarg2);
  public final static native void BitStream_WriteBits__SWIG_0(long jarg1, BitStream jarg1_, long jarg2, long jarg3, boolean jarg4);
  public final static native void BitStream_WriteBits__SWIG_1(long jarg1, BitStream jarg1_, long jarg2, long jarg3);
  public final static native void BitStream_WriteAlignedBytes(long jarg1, BitStream jarg1_, long jarg2, long jarg3);
  public final static native void BitStream_EndianSwapBytes(long jarg1, BitStream jarg1_, int jarg2, int jarg3);
  public final static native boolean BitStream_ReadAlignedBytes(long jarg1, BitStream jarg1_, long jarg2, long jarg3);
  public final static native void BitStream_AlignWriteToByteBoundary(long jarg1, BitStream jarg1_);
  public final static native void BitStream_AlignReadToByteBoundary(long jarg1, BitStream jarg1_);
  public final static native boolean BitStream_ReadBits__SWIG_0(long jarg1, BitStream jarg1_, long jarg2, long jarg3, boolean jarg4);
  public final static native boolean BitStream_ReadBits__SWIG_1(long jarg1, BitStream jarg1_, long jarg2, long jarg3);
  public final static native void BitStream_Write0(long jarg1, BitStream jarg1_);
  public final static native void BitStream_Write1(long jarg1, BitStream jarg1_);
  public final static native boolean BitStream_ReadBit(long jarg1, BitStream jarg1_);
  public final static native void BitStream_AssertCopyData(long jarg1, BitStream jarg1_);
  public final static native void BitStream_SetNumberOfBitsAllocated(long jarg1, BitStream jarg1_, long jarg2);
  public final static native void BitStream_AddBitsAndReallocate(long jarg1, BitStream jarg1_, long jarg2);
  public final static native long BitStream_GetNumberOfBitsAllocated(long jarg1, BitStream jarg1_);
  public final static native void BitStream_PadWithZeroToByteLength(long jarg1, BitStream jarg1_, long jarg2);
  public final static native int BitStream_NumberOfLeadingZeroes__SWIG_0(short jarg1);
  public final static native int BitStream_NumberOfLeadingZeroes__SWIG_1(int jarg1);
  public final static native int BitStream_NumberOfLeadingZeroes__SWIG_2(long jarg1);
  public final static native int BitStream_NumberOfLeadingZeroes__SWIG_3(java.math.BigInteger jarg1);
  public final static native int BitStream_NumberOfLeadingZeroes__SWIG_4(byte jarg1);
  public final static native int BitStream_NumberOfLeadingZeroes__SWIG_6(long jarg1);
  public final static native int BitStream_NumberOfLeadingZeroes__SWIG_7(long jarg1);
  public final static native void BitStream_Write__SWIG_3(long jarg1, BitStream jarg1_, String jarg2);
  public final static native void BitStream_Write__SWIG_4(long jarg1, BitStream jarg1_, long jarg2);
  public final static native void BitStream_WriteCompressed__SWIG_1(long jarg1, BitStream jarg1_, String jarg2);
  public final static native void BitStream_WriteCompressed__SWIG_2(long jarg1, BitStream jarg1_, long jarg2);
  public final static native boolean BitStream_DoEndianSwap();
  public final static native boolean BitStream_IsBigEndian();
  public final static native boolean BitStream_IsNetworkOrder();
  public final static native boolean BitStream_IsNetworkOrderInternal();
  public final static native void BitStream_ReverseBytes(long jarg1, long jarg2, long jarg3);
  public final static native void BitStream_ReverseBytesInPlace(long jarg1, long jarg2);
  public final static native boolean BitStream_Serialize__SWIG_1(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3);
  public final static native boolean BitStream_Serialize__SWIG_2(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3);
  public final static native boolean BitStream_Serialize__SWIG_3(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3);
  public final static native boolean BitStream_Serialize__SWIG_4(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3);
  public final static native boolean BitStream_Serialize__SWIG_5(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3);
  public final static native boolean BitStream_Serialize__SWIG_6(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3);
  public final static native boolean BitStream_Serialize__SWIG_7(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3);
  public final static native boolean BitStream_Serialize__SWIG_8(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3, RakString jarg3_);
  public final static native boolean BitStream_Serialize__SWIG_9(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3, RakNetGUID jarg3_);
  public final static native boolean BitStream_Serialize__SWIG_10(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3, uint24_t jarg3_);
  public final static native boolean BitStream_SerializeDelta__SWIG_2(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3, boolean jarg4);
  public final static native boolean BitStream_SerializeDelta__SWIG_3(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3);
  public final static native boolean BitStream_SerializeDelta__SWIG_4(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3, short jarg4);
  public final static native boolean BitStream_SerializeDelta__SWIG_5(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3);
  public final static native boolean BitStream_SerializeDelta__SWIG_6(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3, short jarg4);
  public final static native boolean BitStream_SerializeDelta__SWIG_7(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3);
  public final static native boolean BitStream_SerializeDelta__SWIG_8(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3, int jarg4);
  public final static native boolean BitStream_SerializeDelta__SWIG_9(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3);
  public final static native boolean BitStream_SerializeDelta__SWIG_10(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3, int jarg4);
  public final static native boolean BitStream_SerializeDelta__SWIG_11(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3);
  public final static native boolean BitStream_SerializeDelta__SWIG_12(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3, long jarg4);
  public final static native boolean BitStream_SerializeDelta__SWIG_13(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3);
  public final static native boolean BitStream_SerializeDelta__SWIG_14(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3, float jarg4);
  public final static native boolean BitStream_SerializeDelta__SWIG_15(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3);
  public final static native boolean BitStream_SerializeDelta__SWIG_16(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3, RakString jarg3_, long jarg4, RakString jarg4_);
  public final static native boolean BitStream_SerializeDelta__SWIG_17(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3, RakString jarg3_);
  public final static native boolean BitStream_SerializeDelta__SWIG_18(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3, RakNetGUID jarg3_, long jarg4, RakNetGUID jarg4_);
  public final static native boolean BitStream_SerializeDelta__SWIG_19(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3, RakNetGUID jarg3_);
  public final static native boolean BitStream_SerializeDelta__SWIG_20(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3, uint24_t jarg3_, long jarg4, uint24_t jarg4_);
  public final static native boolean BitStream_SerializeDelta__SWIG_21(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3, uint24_t jarg3_);
  public final static native boolean BitStream_SerializeCompressed__SWIG_1(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3);
  public final static native boolean BitStream_SerializeCompressed__SWIG_2(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3);
  public final static native boolean BitStream_SerializeCompressed__SWIG_3(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3);
  public final static native boolean BitStream_SerializeCompressed__SWIG_4(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3);
  public final static native boolean BitStream_SerializeCompressed__SWIG_5(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3);
  public final static native boolean BitStream_SerializeCompressed__SWIG_6(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3);
  public final static native boolean BitStream_SerializeCompressed__SWIG_7(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3);
  public final static native boolean BitStream_SerializeCompressed__SWIG_8(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3, RakString jarg3_);
  public final static native boolean BitStream_SerializeCompressed__SWIG_9(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3, RakNetGUID jarg3_);
  public final static native boolean BitStream_SerializeCompressed__SWIG_10(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3, uint24_t jarg3_);
  public final static native boolean BitStream_SerializeCompressedDelta__SWIG_2(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3, boolean jarg4);
  public final static native boolean BitStream_SerializeCompressedDelta__SWIG_3(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3);
  public final static native boolean BitStream_SerializeCompressedDelta__SWIG_4(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3, short jarg4);
  public final static native boolean BitStream_SerializeCompressedDelta__SWIG_5(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3);
  public final static native boolean BitStream_SerializeCompressedDelta__SWIG_6(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3, short jarg4);
  public final static native boolean BitStream_SerializeCompressedDelta__SWIG_7(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3);
  public final static native boolean BitStream_SerializeCompressedDelta__SWIG_8(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3, int jarg4);
  public final static native boolean BitStream_SerializeCompressedDelta__SWIG_9(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3);
  public final static native boolean BitStream_SerializeCompressedDelta__SWIG_10(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3, int jarg4);
  public final static native boolean BitStream_SerializeCompressedDelta__SWIG_11(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3);
  public final static native boolean BitStream_SerializeCompressedDelta__SWIG_12(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3, long jarg4);
  public final static native boolean BitStream_SerializeCompressedDelta__SWIG_13(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3);
  public final static native boolean BitStream_SerializeCompressedDelta__SWIG_14(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3, float jarg4);
  public final static native boolean BitStream_SerializeCompressedDelta__SWIG_15(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3);
  public final static native boolean BitStream_SerializeCompressedDelta__SWIG_16(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3, RakString jarg3_, long jarg4, RakString jarg4_);
  public final static native boolean BitStream_SerializeCompressedDelta__SWIG_17(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3, RakString jarg3_);
  public final static native boolean BitStream_SerializeCompressedDelta__SWIG_18(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3, RakNetGUID jarg3_, long jarg4, RakNetGUID jarg4_);
  public final static native boolean BitStream_SerializeCompressedDelta__SWIG_19(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3, RakNetGUID jarg3_);
  public final static native boolean BitStream_SerializeCompressedDelta__SWIG_20(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3, uint24_t jarg3_, long jarg4, uint24_t jarg4_);
  public final static native boolean BitStream_SerializeCompressedDelta__SWIG_21(long jarg1, BitStream jarg1_, boolean jarg2, long jarg3, uint24_t jarg3_);
  public final static native void BitStream_Write__SWIG_7(long jarg1, BitStream jarg1_, boolean jarg2);
  public final static native void BitStream_Write__SWIG_8(long jarg1, BitStream jarg1_, short jarg2);
  public final static native void BitStream_Write__SWIG_9(long jarg1, BitStream jarg1_, char jarg2);
  public final static native void BitStream_Write__SWIG_11(long jarg1, BitStream jarg1_, int jarg2);
  public final static native void BitStream_Write__SWIG_13(long jarg1, BitStream jarg1_, long jarg2);
  public final static native void BitStream_Write__SWIG_14(long jarg1, BitStream jarg1_, float jarg2);
  public final static native void BitStream_Write__SWIG_15(long jarg1, BitStream jarg1_, long jarg2, RakString jarg2_);
  public final static native void BitStream_Write__SWIG_16(long jarg1, BitStream jarg1_, long jarg2, RakNetGUID jarg2_);
  public final static native void BitStream_Write__SWIG_17(long jarg1, BitStream jarg1_, long jarg2, uint24_t jarg2_);
  public final static native void BitStream_WriteDelta__SWIG_2(long jarg1, BitStream jarg1_, String jarg2, String jarg3);
  public final static native void BitStream_WriteDelta__SWIG_3(long jarg1, BitStream jarg1_, String jarg2);
  public final static native void BitStream_WriteDelta__SWIG_4(long jarg1, BitStream jarg1_, boolean jarg2, boolean jarg3);
  public final static native void BitStream_WriteDelta__SWIG_5(long jarg1, BitStream jarg1_, boolean jarg2);
  public final static native void BitStream_WriteDelta__SWIG_6(long jarg1, BitStream jarg1_, short jarg2, short jarg3);
  public final static native void BitStream_WriteDelta__SWIG_7(long jarg1, BitStream jarg1_, short jarg2);
  public final static native void BitStream_WriteDelta__SWIG_8(long jarg1, BitStream jarg1_, char jarg2, char jarg3);
  public final static native void BitStream_WriteDelta__SWIG_9(long jarg1, BitStream jarg1_, char jarg2);
  public final static native void BitStream_WriteDelta__SWIG_12(long jarg1, BitStream jarg1_, int jarg2, int jarg3);
  public final static native void BitStream_WriteDelta__SWIG_13(long jarg1, BitStream jarg1_, int jarg2);
  public final static native void BitStream_WriteDelta__SWIG_16(long jarg1, BitStream jarg1_, long jarg2, long jarg3);
  public final static native void BitStream_WriteDelta__SWIG_17(long jarg1, BitStream jarg1_, long jarg2);
  public final static native void BitStream_WriteDelta__SWIG_18(long jarg1, BitStream jarg1_, float jarg2, float jarg3);
  public final static native void BitStream_WriteDelta__SWIG_19(long jarg1, BitStream jarg1_, float jarg2);
  public final static native void BitStream_WriteDelta__SWIG_20(long jarg1, BitStream jarg1_, long jarg2, RakString jarg2_, long jarg3, RakString jarg3_);
  public final static native void BitStream_WriteDelta__SWIG_21(long jarg1, BitStream jarg1_, long jarg2, RakString jarg2_);
  public final static native void BitStream_WriteDelta__SWIG_22(long jarg1, BitStream jarg1_, long jarg2, RakNetGUID jarg2_, long jarg3, RakNetGUID jarg3_);
  public final static native void BitStream_WriteDelta__SWIG_23(long jarg1, BitStream jarg1_, long jarg2, RakNetGUID jarg2_);
  public final static native void BitStream_WriteDelta__SWIG_24(long jarg1, BitStream jarg1_, long jarg2, uint24_t jarg2_, long jarg3, uint24_t jarg3_);
  public final static native void BitStream_WriteDelta__SWIG_25(long jarg1, BitStream jarg1_, long jarg2, uint24_t jarg2_);
  public final static native void BitStream_WriteCompressed__SWIG_5(long jarg1, BitStream jarg1_, boolean jarg2);
  public final static native void BitStream_WriteCompressed__SWIG_6(long jarg1, BitStream jarg1_, short jarg2);
  public final static native void BitStream_WriteCompressed__SWIG_7(long jarg1, BitStream jarg1_, char jarg2);
  public final static native void BitStream_WriteCompressed__SWIG_9(long jarg1, BitStream jarg1_, int jarg2);
  public final static native void BitStream_WriteCompressed__SWIG_11(long jarg1, BitStream jarg1_, long jarg2);
  public final static native void BitStream_WriteCompressed__SWIG_12(long jarg1, BitStream jarg1_, float jarg2);
  public final static native void BitStream_WriteCompressed__SWIG_13(long jarg1, BitStream jarg1_, long jarg2, RakString jarg2_);
  public final static native void BitStream_WriteCompressed__SWIG_14(long jarg1, BitStream jarg1_, long jarg2, RakNetGUID jarg2_);
  public final static native void BitStream_WriteCompressed__SWIG_15(long jarg1, BitStream jarg1_, long jarg2, uint24_t jarg2_);
  public final static native void BitStream_WriteCompressedDelta__SWIG_2(long jarg1, BitStream jarg1_, String jarg2, String jarg3);
  public final static native void BitStream_WriteCompressedDelta__SWIG_3(long jarg1, BitStream jarg1_, String jarg2);
  public final static native void BitStream_WriteCompressedDelta__SWIG_4(long jarg1, BitStream jarg1_, boolean jarg2, boolean jarg3);
  public final static native void BitStream_WriteCompressedDelta__SWIG_5(long jarg1, BitStream jarg1_, boolean jarg2);
  public final static native void BitStream_WriteCompressedDelta__SWIG_6(long jarg1, BitStream jarg1_, short jarg2, short jarg3);
  public final static native void BitStream_WriteCompressedDelta__SWIG_7(long jarg1, BitStream jarg1_, short jarg2);
  public final static native void BitStream_WriteCompressedDelta__SWIG_8(long jarg1, BitStream jarg1_, char jarg2, char jarg3);
  public final static native void BitStream_WriteCompressedDelta__SWIG_9(long jarg1, BitStream jarg1_, char jarg2);
  public final static native void BitStream_WriteCompressedDelta__SWIG_12(long jarg1, BitStream jarg1_, int jarg2, int jarg3);
  public final static native void BitStream_WriteCompressedDelta__SWIG_13(long jarg1, BitStream jarg1_, int jarg2);
  public final static native void BitStream_WriteCompressedDelta__SWIG_16(long jarg1, BitStream jarg1_, long jarg2, long jarg3);
  public final static native void BitStream_WriteCompressedDelta__SWIG_17(long jarg1, BitStream jarg1_, long jarg2);
  public final static native void BitStream_WriteCompressedDelta__SWIG_18(long jarg1, BitStream jarg1_, float jarg2, float jarg3);
  public final static native void BitStream_WriteCompressedDelta__SWIG_19(long jarg1, BitStream jarg1_, float jarg2);
  public final static native void BitStream_WriteCompressedDelta__SWIG_20(long jarg1, BitStream jarg1_, long jarg2, RakString jarg2_, long jarg3, RakString jarg3_);
  public final static native void BitStream_WriteCompressedDelta__SWIG_21(long jarg1, BitStream jarg1_, long jarg2, RakString jarg2_);
  public final static native void BitStream_WriteCompressedDelta__SWIG_22(long jarg1, BitStream jarg1_, long jarg2, RakNetGUID jarg2_, long jarg3, RakNetGUID jarg3_);
  public final static native void BitStream_WriteCompressedDelta__SWIG_23(long jarg1, BitStream jarg1_, long jarg2, RakNetGUID jarg2_);
  public final static native void BitStream_WriteCompressedDelta__SWIG_24(long jarg1, BitStream jarg1_, long jarg2, uint24_t jarg2_, long jarg3, uint24_t jarg3_);
  public final static native void BitStream_WriteCompressedDelta__SWIG_25(long jarg1, BitStream jarg1_, long jarg2, uint24_t jarg2_);
  public final static native boolean BitStream_Read__SWIG_5(long jarg1, BitStream jarg1_, long jarg2);
  public final static native boolean BitStream_Read__SWIG_6(long jarg1, BitStream jarg1_, long jarg2);
  public final static native boolean BitStream_Read__SWIG_7(long jarg1, BitStream jarg1_, long jarg2);
  public final static native boolean BitStream_Read__SWIG_8(long jarg1, BitStream jarg1_, long jarg2);
  public final static native boolean BitStream_Read__SWIG_9(long jarg1, BitStream jarg1_, long jarg2);
  public final static native boolean BitStream_Read__SWIG_10(long jarg1, BitStream jarg1_, long jarg2);
  public final static native boolean BitStream_Read__SWIG_11(long jarg1, BitStream jarg1_, long jarg2);
  public final static native boolean BitStream_Read__SWIG_12(long jarg1, BitStream jarg1_, long jarg2, RakString jarg2_);
  public final static native boolean BitStream_Read__SWIG_13(long jarg1, BitStream jarg1_, long jarg2, RakNetGUID jarg2_);
  public final static native boolean BitStream_Read__SWIG_14(long jarg1, BitStream jarg1_, long jarg2, uint24_t jarg2_);
  public final static native boolean BitStream_ReadDelta__SWIG_1(long jarg1, BitStream jarg1_, long jarg2);
  public final static native boolean BitStream_ReadDelta__SWIG_2(long jarg1, BitStream jarg1_, long jarg2);
  public final static native boolean BitStream_ReadDelta__SWIG_3(long jarg1, BitStream jarg1_, long jarg2);
  public final static native boolean BitStream_ReadDelta__SWIG_4(long jarg1, BitStream jarg1_, long jarg2);
  public final static native boolean BitStream_ReadDelta__SWIG_5(long jarg1, BitStream jarg1_, long jarg2);
  public final static native boolean BitStream_ReadDelta__SWIG_6(long jarg1, BitStream jarg1_, long jarg2);
  public final static native boolean BitStream_ReadDelta__SWIG_7(long jarg1, BitStream jarg1_, long jarg2);
  public final static native boolean BitStream_ReadDelta__SWIG_8(long jarg1, BitStream jarg1_, long jarg2, RakString jarg2_);
  public final static native boolean BitStream_ReadDelta__SWIG_9(long jarg1, BitStream jarg1_, long jarg2, RakNetGUID jarg2_);
  public final static native boolean BitStream_ReadDelta__SWIG_10(long jarg1, BitStream jarg1_, long jarg2, uint24_t jarg2_);
  public final static native boolean BitStream_ReadCompressed__SWIG_3(long jarg1, BitStream jarg1_, long jarg2);
  public final static native boolean BitStream_ReadCompressed__SWIG_4(long jarg1, BitStream jarg1_, long jarg2);
  public final static native boolean BitStream_ReadCompressed__SWIG_5(long jarg1, BitStream jarg1_, long jarg2);
  public final static native boolean BitStream_ReadCompressed__SWIG_6(long jarg1, BitStream jarg1_, long jarg2);
  public final static native boolean BitStream_ReadCompressed__SWIG_7(long jarg1, BitStream jarg1_, long jarg2);
  public final static native boolean BitStream_ReadCompressed__SWIG_8(long jarg1, BitStream jarg1_, long jarg2);
  public final static native boolean BitStream_ReadCompressed__SWIG_9(long jarg1, BitStream jarg1_, long jarg2);
  public final static native boolean BitStream_ReadCompressed__SWIG_10(long jarg1, BitStream jarg1_, long jarg2, RakString jarg2_);
  public final static native boolean BitStream_ReadCompressed__SWIG_11(long jarg1, BitStream jarg1_, long jarg2, RakNetGUID jarg2_);
  public final static native boolean BitStream_ReadCompressed__SWIG_12(long jarg1, BitStream jarg1_, long jarg2, uint24_t jarg2_);
  public final static native boolean BitStream_ReadCompressedDelta__SWIG_1(long jarg1, BitStream jarg1_, long jarg2);
  public final static native boolean BitStream_ReadCompressedDelta__SWIG_2(long jarg1, BitStream jarg1_, long jarg2);
  public final static native boolean BitStream_ReadCompressedDelta__SWIG_3(long jarg1, BitStream jarg1_, long jarg2);
  public final static native boolean BitStream_ReadCompressedDelta__SWIG_4(long jarg1, BitStream jarg1_, long jarg2);
  public final static native boolean BitStream_ReadCompressedDelta__SWIG_5(long jarg1, BitStream jarg1_, long jarg2);
  public final static native boolean BitStream_ReadCompressedDelta__SWIG_6(long jarg1, BitStream jarg1_, long jarg2);
  public final static native boolean BitStream_ReadCompressedDelta__SWIG_7(long jarg1, BitStream jarg1_, long jarg2);
  public final static native boolean BitStream_ReadCompressedDelta__SWIG_8(long jarg1, BitStream jarg1_, long jarg2, RakString jarg2_);
  public final static native boolean BitStream_ReadCompressedDelta__SWIG_9(long jarg1, BitStream jarg1_, long jarg2, RakNetGUID jarg2_);
  public final static native boolean BitStream_ReadCompressedDelta__SWIG_10(long jarg1, BitStream jarg1_, long jarg2, uint24_t jarg2_);
  public final static native long MAX_UNSIGNED_LONG_get();
  public final static native long new_ByteQueue();
  public final static native void delete_ByteQueue(long jarg1);
  public final static native long ByteQueue_GetBytesWritten(long jarg1, ByteQueue jarg1_);
  public final static native void ByteQueue_IncrementReadOffset(long jarg1, ByteQueue jarg1_, long jarg2);
  public final static native void ByteQueue_DecrementReadOffset(long jarg1, ByteQueue jarg1_, long jarg2);
  public final static native void ByteQueue_Clear(long jarg1, ByteQueue jarg1_, String jarg2, long jarg3);
  public final static native void ByteQueue_Print(long jarg1, ByteQueue jarg1_);
  public final static native void RakNetStatistics_valueOverLastSecond_set(long jarg1, RakNetStatistics jarg1_, long jarg2);
  public final static native long RakNetStatistics_valueOverLastSecond_get(long jarg1, RakNetStatistics jarg1_);
  public final static native void RakNetStatistics_runningTotal_set(long jarg1, RakNetStatistics jarg1_, long jarg2);
  public final static native long RakNetStatistics_runningTotal_get(long jarg1, RakNetStatistics jarg1_);
  public final static native void RakNetStatistics_connectionStartTime_set(long jarg1, RakNetStatistics jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger RakNetStatistics_connectionStartTime_get(long jarg1, RakNetStatistics jarg1_);
  public final static native void RakNetStatistics_isLimitedByCongestionControl_set(long jarg1, RakNetStatistics jarg1_, boolean jarg2);
  public final static native boolean RakNetStatistics_isLimitedByCongestionControl_get(long jarg1, RakNetStatistics jarg1_);
  public final static native void RakNetStatistics_BPSLimitByCongestionControl_set(long jarg1, RakNetStatistics jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger RakNetStatistics_BPSLimitByCongestionControl_get(long jarg1, RakNetStatistics jarg1_);
  public final static native void RakNetStatistics_isLimitedByOutgoingBandwidthLimit_set(long jarg1, RakNetStatistics jarg1_, boolean jarg2);
  public final static native boolean RakNetStatistics_isLimitedByOutgoingBandwidthLimit_get(long jarg1, RakNetStatistics jarg1_);
  public final static native void RakNetStatistics_BPSLimitByOutgoingBandwidthLimit_set(long jarg1, RakNetStatistics jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger RakNetStatistics_BPSLimitByOutgoingBandwidthLimit_get(long jarg1, RakNetStatistics jarg1_);
  public final static native void RakNetStatistics_messageInSendBuffer_set(long jarg1, RakNetStatistics jarg1_, long[] jarg2);
  public final static native long[] RakNetStatistics_messageInSendBuffer_get(long jarg1, RakNetStatistics jarg1_);
  public final static native void RakNetStatistics_bytesInSendBuffer_set(long jarg1, RakNetStatistics jarg1_, double[] jarg2);
  public final static native double[] RakNetStatistics_bytesInSendBuffer_get(long jarg1, RakNetStatistics jarg1_);
  public final static native void RakNetStatistics_messagesInResendBuffer_set(long jarg1, RakNetStatistics jarg1_, long jarg2);
  public final static native long RakNetStatistics_messagesInResendBuffer_get(long jarg1, RakNetStatistics jarg1_);
  public final static native void RakNetStatistics_bytesInResendBuffer_set(long jarg1, RakNetStatistics jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger RakNetStatistics_bytesInResendBuffer_get(long jarg1, RakNetStatistics jarg1_);
  public final static native void RakNetStatistics_packetlossLastSecond_set(long jarg1, RakNetStatistics jarg1_, float jarg2);
  public final static native float RakNetStatistics_packetlossLastSecond_get(long jarg1, RakNetStatistics jarg1_);
  public final static native void RakNetStatistics_packetlossTotal_set(long jarg1, RakNetStatistics jarg1_, float jarg2);
  public final static native float RakNetStatistics_packetlossTotal_get(long jarg1, RakNetStatistics jarg1_);
  public final static native long new_RakNetStatistics();
  public final static native void delete_RakNetStatistics(long jarg1);
  public final static native long new_NetworkIDObject();
  public final static native void delete_NetworkIDObject(long jarg1);
  public final static native void NetworkIDObject_SetNetworkIDManager(long jarg1, NetworkIDObject jarg1_, long jarg2, NetworkIDManager jarg2_);
  public final static native long NetworkIDObject_GetNetworkIDManager(long jarg1, NetworkIDObject jarg1_);
  public final static native java.math.BigInteger NetworkIDObject_GetNetworkID(long jarg1, NetworkIDObject jarg1_);
  public final static native void NetworkIDObject_SetNetworkID(long jarg1, NetworkIDObject jarg1_, java.math.BigInteger jarg2);
  public final static native int NETWORK_ID_MANAGER_HASH_LENGTH_get();
  public final static native long NetworkIDManager_GetInstance();
  public final static native void NetworkIDManager_DestroyInstance(long jarg1, NetworkIDManager jarg1_);
  public final static native long new_NetworkIDManager();
  public final static native void delete_NetworkIDManager(long jarg1);
  public final static native void NetworkIDManager_Clear(long jarg1, NetworkIDManager jarg1_);
  public final static native long NetworkIDManager_GET_BASE_OBJECT_FROM_ID(long jarg1, NetworkIDManager jarg1_, java.math.BigInteger jarg2);
  public final static native String RAK_TIME_FORMAT_STRING_get();
  public final static native int RR_STOP_PROCESSING_AND_DEALLOCATE_get();
  public final static native long new_PluginInterface2();
  public final static native void delete_PluginInterface2(long jarg1);
  public final static native boolean PluginInterface2_UsesReliabilityLayer(long jarg1, PluginInterface2 jarg1_);
  public final static native void PluginInterface2_OnReliabilityLayerNotification(long jarg1, PluginInterface2 jarg1_, String jarg2, long jarg3, long jarg4, SystemAddress jarg4_, boolean jarg5);
  public final static native long PluginInterface2_GetRakPeerInterface(long jarg1, PluginInterface2 jarg1_);
  public final static native long PluginInterface2_GetMyGUIDUnified(long jarg1, PluginInterface2 jarg1_);
  public final static native void PluginInterface2_SetTCPInterface(long jarg1, PluginInterface2 jarg1_, long jarg2);
  public final static native long RakPeerInterface_GetInstance();
  public final static native void RakPeerInterface_DestroyInstance(long jarg1, RakPeerInterface jarg1_);
  public final static native void delete_RakPeerInterface(long jarg1);
  public final static native int RakPeerInterface_Startup__SWIG_0(long jarg1, RakPeerInterface jarg1_, long jarg2, long jarg3, SocketDescriptor jarg3_, long jarg4, int jarg5);
  public final static native int RakPeerInterface_Startup__SWIG_1(long jarg1, RakPeerInterface jarg1_, long jarg2, long jarg3, SocketDescriptor jarg3_, long jarg4);
  public final static native boolean RakPeerInterface_InitializeSecurity__SWIG_0(long jarg1, RakPeerInterface jarg1_, String jarg2, String jarg3, boolean jarg4);
  public final static native boolean RakPeerInterface_InitializeSecurity__SWIG_1(long jarg1, RakPeerInterface jarg1_, String jarg2, String jarg3);
  public final static native void RakPeerInterface_DisableSecurity(long jarg1, RakPeerInterface jarg1_);
  public final static native void RakPeerInterface_AddToSecurityExceptionList(long jarg1, RakPeerInterface jarg1_, String jarg2);
  public final static native void RakPeerInterface_RemoveFromSecurityExceptionList(long jarg1, RakPeerInterface jarg1_, String jarg2);
  public final static native boolean RakPeerInterface_IsInSecurityExceptionList(long jarg1, RakPeerInterface jarg1_, String jarg2);
  public final static native void RakPeerInterface_SetMaximumIncomingConnections(long jarg1, RakPeerInterface jarg1_, int jarg2);
  public final static native long RakPeerInterface_GetMaximumIncomingConnections(long jarg1, RakPeerInterface jarg1_);
  public final static native int RakPeerInterface_NumberOfConnections(long jarg1, RakPeerInterface jarg1_);
  public final static native void RakPeerInterface_SetIncomingPassword(long jarg1, RakPeerInterface jarg1_, String jarg2, int jarg3);
  public final static native int RakPeerInterface_Connect__SWIG_0(long jarg1, RakPeerInterface jarg1_, String jarg2, int jarg3, String jarg4, int jarg5, long jarg6, PublicKey jarg6_, long jarg7, long jarg8, long jarg9, long jarg10);
  public final static native int RakPeerInterface_Connect__SWIG_1(long jarg1, RakPeerInterface jarg1_, String jarg2, int jarg3, String jarg4, int jarg5, long jarg6, PublicKey jarg6_, long jarg7, long jarg8, long jarg9);
  public final static native int RakPeerInterface_Connect__SWIG_2(long jarg1, RakPeerInterface jarg1_, String jarg2, int jarg3, String jarg4, int jarg5, long jarg6, PublicKey jarg6_, long jarg7, long jarg8);
  public final static native int RakPeerInterface_Connect__SWIG_3(long jarg1, RakPeerInterface jarg1_, String jarg2, int jarg3, String jarg4, int jarg5, long jarg6, PublicKey jarg6_, long jarg7);
  public final static native int RakPeerInterface_Connect__SWIG_4(long jarg1, RakPeerInterface jarg1_, String jarg2, int jarg3, String jarg4, int jarg5, long jarg6, PublicKey jarg6_);
  public final static native int RakPeerInterface_Connect__SWIG_5(long jarg1, RakPeerInterface jarg1_, String jarg2, int jarg3, String jarg4, int jarg5);
  public final static native void RakPeerInterface_Shutdown__SWIG_0(long jarg1, RakPeerInterface jarg1_, long jarg2, short jarg3, int jarg4);
  public final static native void RakPeerInterface_Shutdown__SWIG_1(long jarg1, RakPeerInterface jarg1_, long jarg2, short jarg3);
  public final static native void RakPeerInterface_Shutdown__SWIG_2(long jarg1, RakPeerInterface jarg1_, long jarg2);
  public final static native boolean RakPeerInterface_IsActive(long jarg1, RakPeerInterface jarg1_);
  public final static native long RakPeerInterface_GetNextSendReceipt(long jarg1, RakPeerInterface jarg1_);
  public final static native long RakPeerInterface_IncrementNextSendReceipt(long jarg1, RakPeerInterface jarg1_);
  public final static native long RakPeerInterface_Send__SWIG_0(long jarg1, RakPeerInterface jarg1_, String jarg2, int jarg3, int jarg4, int jarg5, char jarg6, long jarg7, AddressOrGUID jarg7_, boolean jarg8, long jarg9);
  public final static native long RakPeerInterface_Send__SWIG_1(long jarg1, RakPeerInterface jarg1_, String jarg2, int jarg3, int jarg4, int jarg5, char jarg6, long jarg7, AddressOrGUID jarg7_, boolean jarg8);
  public final static native void RakPeerInterface_SendLoopback(long jarg1, RakPeerInterface jarg1_, String jarg2, int jarg3);
  public final static native long RakPeerInterface_Send__SWIG_2(long jarg1, RakPeerInterface jarg1_, long jarg2, BitStream jarg2_, int jarg3, int jarg4, char jarg5, long jarg6, AddressOrGUID jarg6_, boolean jarg7, long jarg8);
  public final static native long RakPeerInterface_Send__SWIG_3(long jarg1, RakPeerInterface jarg1_, long jarg2, BitStream jarg2_, int jarg3, int jarg4, char jarg5, long jarg6, AddressOrGUID jarg6_, boolean jarg7);
  public final static native long RakPeerInterface_Receive(long jarg1, RakPeerInterface jarg1_);
  public final static native void RakPeerInterface_DeallocatePacket(long jarg1, RakPeerInterface jarg1_, long jarg2, Packet jarg2_);
  public final static native long RakPeerInterface_GetMaximumNumberOfPeers(long jarg1, RakPeerInterface jarg1_);
  public final static native void RakPeerInterface_CloseConnection__SWIG_0(long jarg1, RakPeerInterface jarg1_, long jarg2, AddressOrGUID jarg2_, boolean jarg3, short jarg4, int jarg5);
  public final static native void RakPeerInterface_CloseConnection__SWIG_1(long jarg1, RakPeerInterface jarg1_, long jarg2, AddressOrGUID jarg2_, boolean jarg3, short jarg4);
  public final static native void RakPeerInterface_CloseConnection__SWIG_2(long jarg1, RakPeerInterface jarg1_, long jarg2, AddressOrGUID jarg2_, boolean jarg3);
  public final static native int RakPeerInterface_GetConnectionState(long jarg1, RakPeerInterface jarg1_, long jarg2, AddressOrGUID jarg2_);
  public final static native void RakPeerInterface_CancelConnectionAttempt(long jarg1, RakPeerInterface jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native int RakPeerInterface_GetIndexFromSystemAddress(long jarg1, RakPeerInterface jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native long RakPeerInterface_GetSystemAddressFromIndex(long jarg1, RakPeerInterface jarg1_, long jarg2);
  public final static native long RakPeerInterface_GetGUIDFromIndex(long jarg1, RakPeerInterface jarg1_, long jarg2);
  public final static native void RakPeerInterface_GetSystemList(long jarg1, RakPeerInterface jarg1_, long jarg2, RakNetListSystemAddress jarg2_, long jarg3, RakNetListRakNetGUID jarg3_);
  public final static native void RakPeerInterface_AddToBanList__SWIG_0(long jarg1, RakPeerInterface jarg1_, String jarg2, long jarg3);
  public final static native void RakPeerInterface_AddToBanList__SWIG_1(long jarg1, RakPeerInterface jarg1_, String jarg2);
  public final static native void RakPeerInterface_RemoveFromBanList(long jarg1, RakPeerInterface jarg1_, String jarg2);
  public final static native void RakPeerInterface_ClearBanList(long jarg1, RakPeerInterface jarg1_);
  public final static native boolean RakPeerInterface_IsBanned(long jarg1, RakPeerInterface jarg1_, String jarg2);
  public final static native void RakPeerInterface_SetLimitIPConnectionFrequency(long jarg1, RakPeerInterface jarg1_, boolean jarg2);
  public final static native void RakPeerInterface_Ping__SWIG_0(long jarg1, RakPeerInterface jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native boolean RakPeerInterface_Ping__SWIG_1(long jarg1, RakPeerInterface jarg1_, String jarg2, int jarg3, boolean jarg4, long jarg5);
  public final static native boolean RakPeerInterface_Ping__SWIG_2(long jarg1, RakPeerInterface jarg1_, String jarg2, int jarg3, boolean jarg4);
  public final static native int RakPeerInterface_GetAveragePing(long jarg1, RakPeerInterface jarg1_, long jarg2, AddressOrGUID jarg2_);
  public final static native int RakPeerInterface_GetLastPing(long jarg1, RakPeerInterface jarg1_, long jarg2, AddressOrGUID jarg2_);
  public final static native int RakPeerInterface_GetLowestPing(long jarg1, RakPeerInterface jarg1_, long jarg2, AddressOrGUID jarg2_);
  public final static native void RakPeerInterface_SetOccasionalPing(long jarg1, RakPeerInterface jarg1_, boolean jarg2);
  public final static native java.math.BigInteger RakPeerInterface_GetClockDifferential(long jarg1, RakPeerInterface jarg1_, long jarg2, AddressOrGUID jarg2_);
  public final static native void RakPeerInterface_SetOfflinePingResponse(long jarg1, RakPeerInterface jarg1_, String jarg2, long jarg3);
  public final static native long RakPeerInterface_GetInternalID__SWIG_0(long jarg1, RakPeerInterface jarg1_, long jarg2, SystemAddress jarg2_, int jarg3);
  public final static native long RakPeerInterface_GetInternalID__SWIG_1(long jarg1, RakPeerInterface jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native long RakPeerInterface_GetInternalID__SWIG_2(long jarg1, RakPeerInterface jarg1_);
  public final static native void RakPeerInterface_SetInternalID__SWIG_0(long jarg1, RakPeerInterface jarg1_, long jarg2, SystemAddress jarg2_, int jarg3);
  public final static native void RakPeerInterface_SetInternalID__SWIG_1(long jarg1, RakPeerInterface jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native long RakPeerInterface_GetExternalID(long jarg1, RakPeerInterface jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native long RakPeerInterface_GetMyGUID(long jarg1, RakPeerInterface jarg1_);
  public final static native long RakPeerInterface_GetMyBoundAddress__SWIG_0(long jarg1, RakPeerInterface jarg1_, int jarg2);
  public final static native long RakPeerInterface_GetMyBoundAddress__SWIG_1(long jarg1, RakPeerInterface jarg1_);
  public final static native java.math.BigInteger RakPeerInterface_Get64BitUniqueRandomNumber();
  public final static native long RakPeerInterface_GetGuidFromSystemAddress(long jarg1, RakPeerInterface jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native long RakPeerInterface_GetSystemAddressFromGuid(long jarg1, RakPeerInterface jarg1_, long jarg2, RakNetGUID jarg2_);
  public final static native boolean RakPeerInterface_GetClientPublicKeyFromSystemAddress(long jarg1, RakPeerInterface jarg1_, long jarg2, SystemAddress jarg2_, String jarg3);
  public final static native void RakPeerInterface_SetTimeoutTime(long jarg1, RakPeerInterface jarg1_, long jarg2, long jarg3, SystemAddress jarg3_);
  public final static native long RakPeerInterface_GetTimeoutTime(long jarg1, RakPeerInterface jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native int RakPeerInterface_GetMTUSize(long jarg1, RakPeerInterface jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native long RakPeerInterface_GetNumberOfAddresses(long jarg1, RakPeerInterface jarg1_);
  public final static native String RakPeerInterface_GetLocalIP(long jarg1, RakPeerInterface jarg1_, long jarg2);
  public final static native boolean RakPeerInterface_IsLocalIP(long jarg1, RakPeerInterface jarg1_, String jarg2);
  public final static native void RakPeerInterface_AllowConnectionResponseIPMigration(long jarg1, RakPeerInterface jarg1_, boolean jarg2);
  public final static native boolean RakPeerInterface_AdvertiseSystem__SWIG_0(long jarg1, RakPeerInterface jarg1_, String jarg2, int jarg3, String jarg4, int jarg5, long jarg6);
  public final static native boolean RakPeerInterface_AdvertiseSystem__SWIG_1(long jarg1, RakPeerInterface jarg1_, String jarg2, int jarg3, String jarg4, int jarg5);
  public final static native void RakPeerInterface_SetSplitMessageProgressInterval(long jarg1, RakPeerInterface jarg1_, int jarg2);
  public final static native int RakPeerInterface_GetSplitMessageProgressInterval(long jarg1, RakPeerInterface jarg1_);
  public final static native void RakPeerInterface_SetUnreliableTimeout(long jarg1, RakPeerInterface jarg1_, long jarg2);
  public final static native void RakPeerInterface_SendTTL__SWIG_0(long jarg1, RakPeerInterface jarg1_, String jarg2, int jarg3, int jarg4, long jarg5);
  public final static native void RakPeerInterface_SendTTL__SWIG_1(long jarg1, RakPeerInterface jarg1_, String jarg2, int jarg3, int jarg4);
  public final static native void RakPeerInterface_AttachPlugin(long jarg1, RakPeerInterface jarg1_, long jarg2, PluginInterface2 jarg2_);
  public final static native void RakPeerInterface_DetachPlugin(long jarg1, RakPeerInterface jarg1_, long jarg2, PluginInterface2 jarg2_);
  public final static native void RakPeerInterface_PushBackPacket(long jarg1, RakPeerInterface jarg1_, long jarg2, Packet jarg2_, boolean jarg3);
  public final static native void RakPeerInterface_ChangeSystemAddress(long jarg1, RakPeerInterface jarg1_, long jarg2, RakNetGUID jarg2_, long jarg3, SystemAddress jarg3_);
  public final static native long RakPeerInterface_AllocatePacket(long jarg1, RakPeerInterface jarg1_, long jarg2);
  public final static native void RakPeerInterface_GetSockets(long jarg1, RakPeerInterface jarg1_, long jarg2);
  public final static native void RakPeerInterface_WriteOutOfBandHeader(long jarg1, RakPeerInterface jarg1_, long jarg2, BitStream jarg2_);
  public final static native void RakPeerInterface_ApplyNetworkSimulator(long jarg1, RakPeerInterface jarg1_, float jarg2, int jarg3, int jarg4);
  public final static native void RakPeerInterface_SetPerConnectionOutgoingBandwidthLimit(long jarg1, RakPeerInterface jarg1_, long jarg2);
  public final static native boolean RakPeerInterface_IsNetworkSimulatorActive(long jarg1, RakPeerInterface jarg1_);
  public final static native long RakPeerInterface_GetStatistics__SWIG_0(long jarg1, RakPeerInterface jarg1_, long jarg2, SystemAddress jarg2_, long jarg3, RakNetStatistics jarg3_);
  public final static native long RakPeerInterface_GetStatistics__SWIG_1(long jarg1, RakPeerInterface jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native boolean RakPeerInterface_GetStatistics__SWIG_2(long jarg1, RakPeerInterface jarg1_, long jarg2, long jarg3, RakNetStatistics jarg3_);
  public final static native long RakPeerInterface_GetReceiveBufferSize(long jarg1, RakPeerInterface jarg1_);
  public final static native boolean RakPeerInterface_RunUpdateCycle(long jarg1, RakPeerInterface jarg1_, long jarg2, BitStream jarg2_);
  public final static native boolean RakPeerInterface_SendOutOfBand__SWIG_0(long jarg1, RakPeerInterface jarg1_, String jarg2, int jarg3, String jarg4, long jarg5, long jarg6);
  public final static native boolean RakPeerInterface_SendOutOfBand__SWIG_1(long jarg1, RakPeerInterface jarg1_, String jarg2, int jarg3, String jarg4, long jarg5);
  public final static native void RemoteSystemIndex_index_set(long jarg1, RemoteSystemIndex jarg1_, long jarg2);
  public final static native long RemoteSystemIndex_index_get(long jarg1, RemoteSystemIndex jarg1_);
  public final static native void RemoteSystemIndex_next_set(long jarg1, RemoteSystemIndex jarg1_, long jarg2, RemoteSystemIndex jarg2_);
  public final static native long RemoteSystemIndex_next_get(long jarg1, RemoteSystemIndex jarg1_);
  public final static native long new_RemoteSystemIndex();
  public final static native void delete_RemoteSystemIndex(long jarg1);
  public final static native long new_RakPeer();
  public final static native void delete_RakPeer(long jarg1);
  public final static native int RakPeer_Startup__SWIG_0(long jarg1, RakPeer jarg1_, long jarg2, long jarg3, SocketDescriptor jarg3_, long jarg4, int jarg5);
  public final static native int RakPeer_Startup__SWIG_1(long jarg1, RakPeer jarg1_, long jarg2, long jarg3, SocketDescriptor jarg3_, long jarg4);
  public final static native boolean RakPeer_InitializeSecurity__SWIG_0(long jarg1, RakPeer jarg1_, String jarg2, String jarg3, boolean jarg4);
  public final static native boolean RakPeer_InitializeSecurity__SWIG_1(long jarg1, RakPeer jarg1_, String jarg2, String jarg3);
  public final static native void RakPeer_DisableSecurity(long jarg1, RakPeer jarg1_);
  public final static native void RakPeer_AddToSecurityExceptionList(long jarg1, RakPeer jarg1_, String jarg2);
  public final static native void RakPeer_RemoveFromSecurityExceptionList(long jarg1, RakPeer jarg1_, String jarg2);
  public final static native boolean RakPeer_IsInSecurityExceptionList(long jarg1, RakPeer jarg1_, String jarg2);
  public final static native void RakPeer_SetMaximumIncomingConnections(long jarg1, RakPeer jarg1_, int jarg2);
  public final static native long RakPeer_GetMaximumIncomingConnections(long jarg1, RakPeer jarg1_);
  public final static native int RakPeer_NumberOfConnections(long jarg1, RakPeer jarg1_);
  public final static native void RakPeer_SetIncomingPassword(long jarg1, RakPeer jarg1_, String jarg2, int jarg3);
  public final static native int RakPeer_Connect__SWIG_0(long jarg1, RakPeer jarg1_, String jarg2, int jarg3, String jarg4, int jarg5, long jarg6, PublicKey jarg6_, long jarg7, long jarg8, long jarg9, long jarg10);
  public final static native int RakPeer_Connect__SWIG_1(long jarg1, RakPeer jarg1_, String jarg2, int jarg3, String jarg4, int jarg5, long jarg6, PublicKey jarg6_, long jarg7, long jarg8, long jarg9);
  public final static native int RakPeer_Connect__SWIG_2(long jarg1, RakPeer jarg1_, String jarg2, int jarg3, String jarg4, int jarg5, long jarg6, PublicKey jarg6_, long jarg7, long jarg8);
  public final static native int RakPeer_Connect__SWIG_3(long jarg1, RakPeer jarg1_, String jarg2, int jarg3, String jarg4, int jarg5, long jarg6, PublicKey jarg6_, long jarg7);
  public final static native int RakPeer_Connect__SWIG_4(long jarg1, RakPeer jarg1_, String jarg2, int jarg3, String jarg4, int jarg5, long jarg6, PublicKey jarg6_);
  public final static native int RakPeer_Connect__SWIG_5(long jarg1, RakPeer jarg1_, String jarg2, int jarg3, String jarg4, int jarg5);
  public final static native void RakPeer_Shutdown__SWIG_0(long jarg1, RakPeer jarg1_, long jarg2, short jarg3, int jarg4);
  public final static native void RakPeer_Shutdown__SWIG_1(long jarg1, RakPeer jarg1_, long jarg2, short jarg3);
  public final static native void RakPeer_Shutdown__SWIG_2(long jarg1, RakPeer jarg1_, long jarg2);
  public final static native boolean RakPeer_IsActive(long jarg1, RakPeer jarg1_);
  public final static native long RakPeer_GetNextSendReceipt(long jarg1, RakPeer jarg1_);
  public final static native long RakPeer_IncrementNextSendReceipt(long jarg1, RakPeer jarg1_);
  public final static native long RakPeer_Send__SWIG_0(long jarg1, RakPeer jarg1_, String jarg2, int jarg3, int jarg4, int jarg5, char jarg6, long jarg7, AddressOrGUID jarg7_, boolean jarg8, long jarg9);
  public final static native long RakPeer_Send__SWIG_1(long jarg1, RakPeer jarg1_, String jarg2, int jarg3, int jarg4, int jarg5, char jarg6, long jarg7, AddressOrGUID jarg7_, boolean jarg8);
  public final static native void RakPeer_SendLoopback(long jarg1, RakPeer jarg1_, String jarg2, int jarg3);
  public final static native long RakPeer_Send__SWIG_2(long jarg1, RakPeer jarg1_, long jarg2, BitStream jarg2_, int jarg3, int jarg4, char jarg5, long jarg6, AddressOrGUID jarg6_, boolean jarg7, long jarg8);
  public final static native long RakPeer_Send__SWIG_3(long jarg1, RakPeer jarg1_, long jarg2, BitStream jarg2_, int jarg3, int jarg4, char jarg5, long jarg6, AddressOrGUID jarg6_, boolean jarg7);
  public final static native long RakPeer_Receive(long jarg1, RakPeer jarg1_);
  public final static native void RakPeer_DeallocatePacket(long jarg1, RakPeer jarg1_, long jarg2, Packet jarg2_);
  public final static native long RakPeer_GetMaximumNumberOfPeers(long jarg1, RakPeer jarg1_);
  public final static native void RakPeer_CloseConnection__SWIG_0(long jarg1, RakPeer jarg1_, long jarg2, AddressOrGUID jarg2_, boolean jarg3, short jarg4, int jarg5);
  public final static native void RakPeer_CloseConnection__SWIG_1(long jarg1, RakPeer jarg1_, long jarg2, AddressOrGUID jarg2_, boolean jarg3, short jarg4);
  public final static native void RakPeer_CloseConnection__SWIG_2(long jarg1, RakPeer jarg1_, long jarg2, AddressOrGUID jarg2_, boolean jarg3);
  public final static native void RakPeer_CancelConnectionAttempt(long jarg1, RakPeer jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native int RakPeer_GetConnectionState(long jarg1, RakPeer jarg1_, long jarg2, AddressOrGUID jarg2_);
  public final static native int RakPeer_GetIndexFromSystemAddress(long jarg1, RakPeer jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native long RakPeer_GetSystemAddressFromIndex(long jarg1, RakPeer jarg1_, long jarg2);
  public final static native long RakPeer_GetGUIDFromIndex(long jarg1, RakPeer jarg1_, long jarg2);
  public final static native void RakPeer_GetSystemList(long jarg1, RakPeer jarg1_, long jarg2, RakNetListSystemAddress jarg2_, long jarg3, RakNetListRakNetGUID jarg3_);
  public final static native void RakPeer_AddToBanList__SWIG_0(long jarg1, RakPeer jarg1_, String jarg2, long jarg3);
  public final static native void RakPeer_AddToBanList__SWIG_1(long jarg1, RakPeer jarg1_, String jarg2);
  public final static native void RakPeer_RemoveFromBanList(long jarg1, RakPeer jarg1_, String jarg2);
  public final static native void RakPeer_ClearBanList(long jarg1, RakPeer jarg1_);
  public final static native boolean RakPeer_IsBanned(long jarg1, RakPeer jarg1_, String jarg2);
  public final static native void RakPeer_SetLimitIPConnectionFrequency(long jarg1, RakPeer jarg1_, boolean jarg2);
  public final static native void RakPeer_Ping__SWIG_0(long jarg1, RakPeer jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native boolean RakPeer_Ping__SWIG_1(long jarg1, RakPeer jarg1_, String jarg2, int jarg3, boolean jarg4, long jarg5);
  public final static native boolean RakPeer_Ping__SWIG_2(long jarg1, RakPeer jarg1_, String jarg2, int jarg3, boolean jarg4);
  public final static native int RakPeer_GetAveragePing(long jarg1, RakPeer jarg1_, long jarg2, AddressOrGUID jarg2_);
  public final static native int RakPeer_GetLastPing(long jarg1, RakPeer jarg1_, long jarg2, AddressOrGUID jarg2_);
  public final static native int RakPeer_GetLowestPing(long jarg1, RakPeer jarg1_, long jarg2, AddressOrGUID jarg2_);
  public final static native void RakPeer_SetOccasionalPing(long jarg1, RakPeer jarg1_, boolean jarg2);
  public final static native java.math.BigInteger RakPeer_GetClockDifferential(long jarg1, RakPeer jarg1_, long jarg2, AddressOrGUID jarg2_);
  public final static native void RakPeer_SetOfflinePingResponse(long jarg1, RakPeer jarg1_, String jarg2, long jarg3);
  public final static native long RakPeer_GetInternalID__SWIG_0(long jarg1, RakPeer jarg1_, long jarg2, SystemAddress jarg2_, int jarg3);
  public final static native long RakPeer_GetInternalID__SWIG_1(long jarg1, RakPeer jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native long RakPeer_GetInternalID__SWIG_2(long jarg1, RakPeer jarg1_);
  public final static native void RakPeer_SetInternalID__SWIG_0(long jarg1, RakPeer jarg1_, long jarg2, SystemAddress jarg2_, int jarg3);
  public final static native void RakPeer_SetInternalID__SWIG_1(long jarg1, RakPeer jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native long RakPeer_GetExternalID(long jarg1, RakPeer jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native long RakPeer_GetMyGUID(long jarg1, RakPeer jarg1_);
  public final static native long RakPeer_GetMyBoundAddress__SWIG_0(long jarg1, RakPeer jarg1_, int jarg2);
  public final static native long RakPeer_GetMyBoundAddress__SWIG_1(long jarg1, RakPeer jarg1_);
  public final static native long RakPeer_GetGuidFromSystemAddress(long jarg1, RakPeer jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native long RakPeer_GetSystemAddressFromGuid(long jarg1, RakPeer jarg1_, long jarg2, RakNetGUID jarg2_);
  public final static native boolean RakPeer_GetClientPublicKeyFromSystemAddress(long jarg1, RakPeer jarg1_, long jarg2, SystemAddress jarg2_, String jarg3);
  public final static native void RakPeer_SetTimeoutTime(long jarg1, RakPeer jarg1_, long jarg2, long jarg3, SystemAddress jarg3_);
  public final static native long RakPeer_GetTimeoutTime(long jarg1, RakPeer jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native int RakPeer_GetMTUSize(long jarg1, RakPeer jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native long RakPeer_GetNumberOfAddresses(long jarg1, RakPeer jarg1_);
  public final static native String RakPeer_GetLocalIP(long jarg1, RakPeer jarg1_, long jarg2);
  public final static native boolean RakPeer_IsLocalIP(long jarg1, RakPeer jarg1_, String jarg2);
  public final static native void RakPeer_AllowConnectionResponseIPMigration(long jarg1, RakPeer jarg1_, boolean jarg2);
  public final static native boolean RakPeer_AdvertiseSystem__SWIG_0(long jarg1, RakPeer jarg1_, String jarg2, int jarg3, String jarg4, int jarg5, long jarg6);
  public final static native boolean RakPeer_AdvertiseSystem__SWIG_1(long jarg1, RakPeer jarg1_, String jarg2, int jarg3, String jarg4, int jarg5);
  public final static native void RakPeer_SetSplitMessageProgressInterval(long jarg1, RakPeer jarg1_, int jarg2);
  public final static native int RakPeer_GetSplitMessageProgressInterval(long jarg1, RakPeer jarg1_);
  public final static native void RakPeer_SetUnreliableTimeout(long jarg1, RakPeer jarg1_, long jarg2);
  public final static native void RakPeer_SendTTL__SWIG_0(long jarg1, RakPeer jarg1_, String jarg2, int jarg3, int jarg4, long jarg5);
  public final static native void RakPeer_SendTTL__SWIG_1(long jarg1, RakPeer jarg1_, String jarg2, int jarg3, int jarg4);
  public final static native void RakPeer_AttachPlugin(long jarg1, RakPeer jarg1_, long jarg2, PluginInterface2 jarg2_);
  public final static native void RakPeer_DetachPlugin(long jarg1, RakPeer jarg1_, long jarg2, PluginInterface2 jarg2_);
  public final static native void RakPeer_PushBackPacket(long jarg1, RakPeer jarg1_, long jarg2, Packet jarg2_, boolean jarg3);
  public final static native void RakPeer_ChangeSystemAddress(long jarg1, RakPeer jarg1_, long jarg2, RakNetGUID jarg2_, long jarg3, SystemAddress jarg3_);
  public final static native long RakPeer_AllocatePacket(long jarg1, RakPeer jarg1_, long jarg2);
  public final static native void RakPeer_GetSockets(long jarg1, RakPeer jarg1_, long jarg2);
  public final static native void RakPeer_WriteOutOfBandHeader(long jarg1, RakPeer jarg1_, long jarg2, BitStream jarg2_);
  public final static native void RakPeer_ApplyNetworkSimulator(long jarg1, RakPeer jarg1_, float jarg2, int jarg3, int jarg4);
  public final static native void RakPeer_SetPerConnectionOutgoingBandwidthLimit(long jarg1, RakPeer jarg1_, long jarg2);
  public final static native boolean RakPeer_IsNetworkSimulatorActive(long jarg1, RakPeer jarg1_);
  public final static native long RakPeer_GetStatistics__SWIG_0(long jarg1, RakPeer jarg1_, long jarg2, SystemAddress jarg2_, long jarg3, RakNetStatistics jarg3_);
  public final static native long RakPeer_GetStatistics__SWIG_1(long jarg1, RakPeer jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native boolean RakPeer_GetStatistics__SWIG_2(long jarg1, RakPeer jarg1_, long jarg2, long jarg3, RakNetStatistics jarg3_);
  public final static native long RakPeer_GetReceiveBufferSize(long jarg1, RakPeer jarg1_);
  public final static native boolean RakPeer_RunUpdateCycle(long jarg1, RakPeer jarg1_, long jarg2, BitStream jarg2_);
  public final static native boolean RakPeer_SendOutOfBand__SWIG_0(long jarg1, RakPeer jarg1_, String jarg2, int jarg3, String jarg4, long jarg5, long jarg6);
  public final static native boolean RakPeer_SendOutOfBand__SWIG_1(long jarg1, RakPeer jarg1_, String jarg2, int jarg3, String jarg4, long jarg5);
  public final static native void RakPeer_PingAndClockDifferential_pingTime_set(long jarg1, RakPeer.PingAndClockDifferential jarg1_, int jarg2);
  public final static native int RakPeer_PingAndClockDifferential_pingTime_get(long jarg1, RakPeer.PingAndClockDifferential jarg1_);
  public final static native void RakPeer_PingAndClockDifferential_clockDifferential_set(long jarg1, RakPeer.PingAndClockDifferential jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger RakPeer_PingAndClockDifferential_clockDifferential_get(long jarg1, RakPeer.PingAndClockDifferential jarg1_);
  public final static native long new_RakPeer_PingAndClockDifferential();
  public final static native void delete_RakPeer_PingAndClockDifferential(long jarg1);
  public final static native void RakPeer_RemoteSystemStruct_isActive_set(long jarg1, RakPeer.RemoteSystemStruct jarg1_, boolean jarg2);
  public final static native boolean RakPeer_RemoteSystemStruct_isActive_get(long jarg1, RakPeer.RemoteSystemStruct jarg1_);
  public final static native void RakPeer_RemoteSystemStruct_systemAddress_set(long jarg1, RakPeer.RemoteSystemStruct jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native long RakPeer_RemoteSystemStruct_systemAddress_get(long jarg1, RakPeer.RemoteSystemStruct jarg1_);
  public final static native void RakPeer_RemoteSystemStruct_myExternalSystemAddress_set(long jarg1, RakPeer.RemoteSystemStruct jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native long RakPeer_RemoteSystemStruct_myExternalSystemAddress_get(long jarg1, RakPeer.RemoteSystemStruct jarg1_);
  public final static native void RakPeer_RemoteSystemStruct_theirInternalSystemAddress_set(long jarg1, RakPeer.RemoteSystemStruct jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native long RakPeer_RemoteSystemStruct_theirInternalSystemAddress_get(long jarg1, RakPeer.RemoteSystemStruct jarg1_);
  public final static native void RakPeer_RemoteSystemStruct_reliabilityLayer_set(long jarg1, RakPeer.RemoteSystemStruct jarg1_, long jarg2);
  public final static native long RakPeer_RemoteSystemStruct_reliabilityLayer_get(long jarg1, RakPeer.RemoteSystemStruct jarg1_);
  public final static native void RakPeer_RemoteSystemStruct_weInitiatedTheConnection_set(long jarg1, RakPeer.RemoteSystemStruct jarg1_, boolean jarg2);
  public final static native boolean RakPeer_RemoteSystemStruct_weInitiatedTheConnection_get(long jarg1, RakPeer.RemoteSystemStruct jarg1_);
  public final static native void RakPeer_RemoteSystemStruct_pingAndClockDifferential_set(long jarg1, RakPeer.RemoteSystemStruct jarg1_, long jarg2, RakPeer.PingAndClockDifferential jarg2_);
  public final static native long RakPeer_RemoteSystemStruct_pingAndClockDifferential_get(long jarg1, RakPeer.RemoteSystemStruct jarg1_);
  public final static native void RakPeer_RemoteSystemStruct_pingAndClockDifferentialWriteIndex_set(long jarg1, RakPeer.RemoteSystemStruct jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger RakPeer_RemoteSystemStruct_pingAndClockDifferentialWriteIndex_get(long jarg1, RakPeer.RemoteSystemStruct jarg1_);
  public final static native void RakPeer_RemoteSystemStruct_lowestPing_set(long jarg1, RakPeer.RemoteSystemStruct jarg1_, int jarg2);
  public final static native int RakPeer_RemoteSystemStruct_lowestPing_get(long jarg1, RakPeer.RemoteSystemStruct jarg1_);
  public final static native void RakPeer_RemoteSystemStruct_nextPingTime_set(long jarg1, RakPeer.RemoteSystemStruct jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger RakPeer_RemoteSystemStruct_nextPingTime_get(long jarg1, RakPeer.RemoteSystemStruct jarg1_);
  public final static native void RakPeer_RemoteSystemStruct_lastReliableSend_set(long jarg1, RakPeer.RemoteSystemStruct jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger RakPeer_RemoteSystemStruct_lastReliableSend_get(long jarg1, RakPeer.RemoteSystemStruct jarg1_);
  public final static native void RakPeer_RemoteSystemStruct_connectionTime_set(long jarg1, RakPeer.RemoteSystemStruct jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger RakPeer_RemoteSystemStruct_connectionTime_get(long jarg1, RakPeer.RemoteSystemStruct jarg1_);
  public final static native void RakPeer_RemoteSystemStruct_guid_set(long jarg1, RakPeer.RemoteSystemStruct jarg1_, long jarg2, RakNetGUID jarg2_);
  public final static native long RakPeer_RemoteSystemStruct_guid_get(long jarg1, RakPeer.RemoteSystemStruct jarg1_);
  public final static native void RakPeer_RemoteSystemStruct_MTUSize_set(long jarg1, RakPeer.RemoteSystemStruct jarg1_, int jarg2);
  public final static native int RakPeer_RemoteSystemStruct_MTUSize_get(long jarg1, RakPeer.RemoteSystemStruct jarg1_);
  public final static native void RakPeer_RemoteSystemStruct_rakNetSocket_set(long jarg1, RakPeer.RemoteSystemStruct jarg1_, long jarg2);
  public final static native long RakPeer_RemoteSystemStruct_rakNetSocket_get(long jarg1, RakPeer.RemoteSystemStruct jarg1_);
  public final static native void RakPeer_RemoteSystemStruct_remoteSystemIndex_set(long jarg1, RakPeer.RemoteSystemStruct jarg1_, int jarg2);
  public final static native int RakPeer_RemoteSystemStruct_remoteSystemIndex_get(long jarg1, RakPeer.RemoteSystemStruct jarg1_);
  public final static native void RakPeer_RemoteSystemStruct_connectMode_set(long jarg1, RakPeer.RemoteSystemStruct jarg1_, int jarg2);
  public final static native int RakPeer_RemoteSystemStruct_connectMode_get(long jarg1, RakPeer.RemoteSystemStruct jarg1_);
  public final static native long new_RakPeer_RemoteSystemStruct();
  public final static native void delete_RakPeer_RemoteSystemStruct(long jarg1);
  public final static native long PacketLogger_GetInstance();
  public final static native void PacketLogger_DestroyInstance(long jarg1, PacketLogger jarg1_);
  public final static native long new_PacketLogger();
  public final static native void delete_PacketLogger(long jarg1);
  public final static native void PacketLogger_OnReliabilityLayerNotification(long jarg1, PacketLogger jarg1_, String jarg2, long jarg3, long jarg4, SystemAddress jarg4_, boolean jarg5);
  public final static native void PacketLogger_LogHeader(long jarg1, PacketLogger jarg1_);
  public final static native void PacketLogger_WriteLog(long jarg1, PacketLogger jarg1_, String jarg2);
  public final static native void PacketLogger_WriteMiscellaneous(long jarg1, PacketLogger jarg1_, String jarg2, String jarg3);
  public final static native void PacketLogger_SetPrintID(long jarg1, PacketLogger jarg1_, boolean jarg2);
  public final static native void PacketLogger_SetPrintAcks(long jarg1, PacketLogger jarg1_, boolean jarg2);
  public final static native void PacketLogger_SetPrefix(long jarg1, PacketLogger jarg1_, String jarg2);
  public final static native void PacketLogger_SetSuffix(long jarg1, PacketLogger jarg1_, String jarg2);
  public final static native String PacketLogger_BaseIDTOString(short jarg1);
  public final static native void PacketLogger_SetLogDirectMessages(long jarg1, PacketLogger jarg1_, boolean jarg2);
  public final static native long PacketFileLogger_GetInstance();
  public final static native void PacketFileLogger_DestroyInstance(long jarg1, PacketFileLogger jarg1_);
  public final static native long new_PacketFileLogger();
  public final static native void delete_PacketFileLogger(long jarg1);
  public final static native void PacketFileLogger_StartLog(long jarg1, PacketFileLogger jarg1_, String jarg2);
  public final static native void PacketFileLogger_WriteLog(long jarg1, PacketFileLogger jarg1_, String jarg2);
  public final static native long NatTypeDetectionClient_GetInstance();
  public final static native void NatTypeDetectionClient_DestroyInstance(long jarg1, NatTypeDetectionClient jarg1_);
  public final static native long new_NatTypeDetectionClient();
  public final static native void delete_NatTypeDetectionClient(long jarg1);
  public final static native void NatTypeDetectionClient_DetectNATType(long jarg1, NatTypeDetectionClient jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native void NatTypeDetectionClient_OnRNS2Recv(long jarg1, NatTypeDetectionClient jarg1_, long jarg2);
  public final static native void NatTypeDetectionClient_DeallocRNS2RecvStruct(long jarg1, NatTypeDetectionClient jarg1_, long jarg2, String jarg3, long jarg4);
  public final static native long NatTypeDetectionClient_AllocRNS2RecvStruct(long jarg1, NatTypeDetectionClient jarg1_, String jarg2, long jarg3);
  public final static native long new_PunchthroughConfiguration();
  public final static native void PunchthroughConfiguration_TIME_BETWEEN_PUNCH_ATTEMPTS_INTERNAL_set(long jarg1, PunchthroughConfiguration jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger PunchthroughConfiguration_TIME_BETWEEN_PUNCH_ATTEMPTS_INTERNAL_get(long jarg1, PunchthroughConfiguration jarg1_);
  public final static native void PunchthroughConfiguration_TIME_BETWEEN_PUNCH_ATTEMPTS_EXTERNAL_set(long jarg1, PunchthroughConfiguration jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger PunchthroughConfiguration_TIME_BETWEEN_PUNCH_ATTEMPTS_EXTERNAL_get(long jarg1, PunchthroughConfiguration jarg1_);
  public final static native void PunchthroughConfiguration_UDP_SENDS_PER_PORT_INTERNAL_set(long jarg1, PunchthroughConfiguration jarg1_, int jarg2);
  public final static native int PunchthroughConfiguration_UDP_SENDS_PER_PORT_INTERNAL_get(long jarg1, PunchthroughConfiguration jarg1_);
  public final static native void PunchthroughConfiguration_UDP_SENDS_PER_PORT_EXTERNAL_set(long jarg1, PunchthroughConfiguration jarg1_, int jarg2);
  public final static native int PunchthroughConfiguration_UDP_SENDS_PER_PORT_EXTERNAL_get(long jarg1, PunchthroughConfiguration jarg1_);
  public final static native void PunchthroughConfiguration_INTERNAL_IP_WAIT_AFTER_ATTEMPTS_set(long jarg1, PunchthroughConfiguration jarg1_, int jarg2);
  public final static native int PunchthroughConfiguration_INTERNAL_IP_WAIT_AFTER_ATTEMPTS_get(long jarg1, PunchthroughConfiguration jarg1_);
  public final static native void PunchthroughConfiguration_MAX_PREDICTIVE_PORT_RANGE_set(long jarg1, PunchthroughConfiguration jarg1_, int jarg2);
  public final static native int PunchthroughConfiguration_MAX_PREDICTIVE_PORT_RANGE_get(long jarg1, PunchthroughConfiguration jarg1_);
  public final static native void PunchthroughConfiguration_EXTERNAL_IP_WAIT_AFTER_FIRST_TTL_set(long jarg1, PunchthroughConfiguration jarg1_, int jarg2);
  public final static native int PunchthroughConfiguration_EXTERNAL_IP_WAIT_AFTER_FIRST_TTL_get(long jarg1, PunchthroughConfiguration jarg1_);
  public final static native void PunchthroughConfiguration_EXTERNAL_IP_WAIT_BETWEEN_PORTS_set(long jarg1, PunchthroughConfiguration jarg1_, int jarg2);
  public final static native int PunchthroughConfiguration_EXTERNAL_IP_WAIT_BETWEEN_PORTS_get(long jarg1, PunchthroughConfiguration jarg1_);
  public final static native void PunchthroughConfiguration_EXTERNAL_IP_WAIT_AFTER_ALL_ATTEMPTS_set(long jarg1, PunchthroughConfiguration jarg1_, int jarg2);
  public final static native int PunchthroughConfiguration_EXTERNAL_IP_WAIT_AFTER_ALL_ATTEMPTS_get(long jarg1, PunchthroughConfiguration jarg1_);
  public final static native void PunchthroughConfiguration_MAXIMUM_NUMBER_OF_INTERNAL_IDS_TO_CHECK_set(long jarg1, PunchthroughConfiguration jarg1_, int jarg2);
  public final static native int PunchthroughConfiguration_MAXIMUM_NUMBER_OF_INTERNAL_IDS_TO_CHECK_get(long jarg1, PunchthroughConfiguration jarg1_);
  public final static native void PunchthroughConfiguration_retryOnFailure_set(long jarg1, PunchthroughConfiguration jarg1_, boolean jarg2);
  public final static native boolean PunchthroughConfiguration_retryOnFailure_get(long jarg1, PunchthroughConfiguration jarg1_);
  public final static native void delete_PunchthroughConfiguration(long jarg1);
  public final static native void delete_NatPunchthroughDebugInterface(long jarg1);
  public final static native void NatPunchthroughDebugInterface_OnClientMessage(long jarg1, NatPunchthroughDebugInterface jarg1_, String jarg2);
  public final static native void NatPunchthroughDebugInterface_Printf_OnClientMessage(long jarg1, NatPunchthroughDebugInterface_Printf jarg1_, String jarg2);
  public final static native long new_NatPunchthroughDebugInterface_Printf();
  public final static native void delete_NatPunchthroughDebugInterface_Printf(long jarg1);
  public final static native void NatPunchthroughDebugInterface_PacketLogger_pl_set(long jarg1, NatPunchthroughDebugInterface_PacketLogger jarg1_, long jarg2, PacketLogger jarg2_);
  public final static native long NatPunchthroughDebugInterface_PacketLogger_pl_get(long jarg1, NatPunchthroughDebugInterface_PacketLogger jarg1_);
  public final static native long new_NatPunchthroughDebugInterface_PacketLogger();
  public final static native void delete_NatPunchthroughDebugInterface_PacketLogger(long jarg1);
  public final static native void NatPunchthroughDebugInterface_PacketLogger_OnClientMessage(long jarg1, NatPunchthroughDebugInterface_PacketLogger jarg1_, String jarg2);
  public final static native long NatPunchthroughClient_GetInstance();
  public final static native void NatPunchthroughClient_DestroyInstance(long jarg1, NatPunchthroughClient jarg1_);
  public final static native long new_NatPunchthroughClient();
  public final static native void delete_NatPunchthroughClient(long jarg1);
  public final static native void NatPunchthroughClient_FindRouterPortStride(long jarg1, NatPunchthroughClient jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native boolean NatPunchthroughClient_OpenNAT(long jarg1, NatPunchthroughClient jarg1_, long jarg2, RakNetGUID jarg2_, long jarg3, SystemAddress jarg3_);
  public final static native long NatPunchthroughClient_GetPunchthroughConfiguration(long jarg1, NatPunchthroughClient jarg1_);
  public final static native void NatPunchthroughClient_SetDebugInterface(long jarg1, NatPunchthroughClient jarg1_, long jarg2, NatPunchthroughDebugInterface jarg2_);
  public final static native void NatPunchthroughClient_GetUPNPPortMappings(long jarg1, NatPunchthroughClient jarg1_, String jarg2, String jarg3, long jarg4, SystemAddress jarg4_);
  public final static native void NatPunchthroughClient_Clear(long jarg1, NatPunchthroughClient jarg1_);
  public final static native void NatPunchthroughClient_SendPing_nextActionTime_set(long jarg1, NatPunchthroughClient.SendPing jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger NatPunchthroughClient_SendPing_nextActionTime_get(long jarg1, NatPunchthroughClient.SendPing jarg1_);
  public final static native void NatPunchthroughClient_SendPing_targetAddress_set(long jarg1, NatPunchthroughClient.SendPing jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native long NatPunchthroughClient_SendPing_targetAddress_get(long jarg1, NatPunchthroughClient.SendPing jarg1_);
  public final static native void NatPunchthroughClient_SendPing_facilitator_set(long jarg1, NatPunchthroughClient.SendPing jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native long NatPunchthroughClient_SendPing_facilitator_get(long jarg1, NatPunchthroughClient.SendPing jarg1_);
  public final static native void NatPunchthroughClient_SendPing_internalIds_set(long jarg1, NatPunchthroughClient.SendPing jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native long NatPunchthroughClient_SendPing_internalIds_get(long jarg1, NatPunchthroughClient.SendPing jarg1_);
  public final static native void NatPunchthroughClient_SendPing_targetGuid_set(long jarg1, NatPunchthroughClient.SendPing jarg1_, long jarg2, RakNetGUID jarg2_);
  public final static native long NatPunchthroughClient_SendPing_targetGuid_get(long jarg1, NatPunchthroughClient.SendPing jarg1_);
  public final static native void NatPunchthroughClient_SendPing_weAreSender_set(long jarg1, NatPunchthroughClient.SendPing jarg1_, boolean jarg2);
  public final static native boolean NatPunchthroughClient_SendPing_weAreSender_get(long jarg1, NatPunchthroughClient.SendPing jarg1_);
  public final static native void NatPunchthroughClient_SendPing_attemptCount_set(long jarg1, NatPunchthroughClient.SendPing jarg1_, int jarg2);
  public final static native int NatPunchthroughClient_SendPing_attemptCount_get(long jarg1, NatPunchthroughClient.SendPing jarg1_);
  public final static native void NatPunchthroughClient_SendPing_retryCount_set(long jarg1, NatPunchthroughClient.SendPing jarg1_, int jarg2);
  public final static native int NatPunchthroughClient_SendPing_retryCount_get(long jarg1, NatPunchthroughClient.SendPing jarg1_);
  public final static native void NatPunchthroughClient_SendPing_punchingFixedPortAttempts_set(long jarg1, NatPunchthroughClient.SendPing jarg1_, int jarg2);
  public final static native int NatPunchthroughClient_SendPing_punchingFixedPortAttempts_get(long jarg1, NatPunchthroughClient.SendPing jarg1_);
  public final static native void NatPunchthroughClient_SendPing_sessionId_set(long jarg1, NatPunchthroughClient.SendPing jarg1_, int jarg2);
  public final static native int NatPunchthroughClient_SendPing_sessionId_get(long jarg1, NatPunchthroughClient.SendPing jarg1_);
  public final static native void NatPunchthroughClient_SendPing_sentTTL_set(long jarg1, NatPunchthroughClient.SendPing jarg1_, boolean jarg2);
  public final static native boolean NatPunchthroughClient_SendPing_sentTTL_get(long jarg1, NatPunchthroughClient.SendPing jarg1_);
  public final static native void NatPunchthroughClient_SendPing_testMode_set(long jarg1, NatPunchthroughClient.SendPing jarg1_, int jarg2);
  public final static native int NatPunchthroughClient_SendPing_testMode_get(long jarg1, NatPunchthroughClient.SendPing jarg1_);
  public final static native long new_NatPunchthroughClient_SendPing();
  public final static native void delete_NatPunchthroughClient_SendPing(long jarg1);
  public final static native void NatPunchthroughClient_sp_set(long jarg1, NatPunchthroughClient jarg1_, long jarg2, NatPunchthroughClient.SendPing jarg2_);
  public final static native long NatPunchthroughClient_sp_get(long jarg1, NatPunchthroughClient jarg1_);
  public final static native long new_Router2DebugInterface();
  public final static native void delete_Router2DebugInterface(long jarg1);
  public final static native void Router2DebugInterface_ShowFailure(long jarg1, Router2DebugInterface jarg1_, String jarg2);
  public final static native void Router2DebugInterface_ShowDiagnostic(long jarg1, Router2DebugInterface jarg1_, String jarg2);
  public final static native long Router2_GetInstance();
  public final static native void Router2_DestroyInstance(long jarg1, Router2 jarg1_);
  public final static native long new_Router2();
  public final static native void delete_Router2(long jarg1);
  public final static native void Router2_SetSocketFamily(long jarg1, Router2 jarg1_, int jarg2);
  public final static native void Router2_EstablishRouting(long jarg1, Router2 jarg1_, long jarg2, RakNetGUID jarg2_);
  public final static native void Router2_SetMaximumForwardingRequests(long jarg1, Router2 jarg1_, int jarg2);
  public final static native void Router2_SetDebugInterface(long jarg1, Router2 jarg1_, long jarg2, Router2DebugInterface jarg2_);
  public final static native long Router2_GetDebugInterface(long jarg1, Router2 jarg1_);
  public final static native void Router2_ConnectionRequestSystem_guid_set(long jarg1, Router2.ConnectionRequestSystem jarg1_, long jarg2, RakNetGUID jarg2_);
  public final static native long Router2_ConnectionRequestSystem_guid_get(long jarg1, Router2.ConnectionRequestSystem jarg1_);
  public final static native void Router2_ConnectionRequestSystem_pingToEndpoint_set(long jarg1, Router2.ConnectionRequestSystem jarg1_, int jarg2);
  public final static native int Router2_ConnectionRequestSystem_pingToEndpoint_get(long jarg1, Router2.ConnectionRequestSystem jarg1_);
  public final static native void Router2_ConnectionRequestSystem_usedForwardingEntries_set(long jarg1, Router2.ConnectionRequestSystem jarg1_, int jarg2);
  public final static native int Router2_ConnectionRequestSystem_usedForwardingEntries_get(long jarg1, Router2.ConnectionRequestSystem jarg1_);
  public final static native long new_Router2_ConnectionRequestSystem();
  public final static native void delete_Router2_ConnectionRequestSystem(long jarg1);
  public final static native long new_Router2_ConnnectRequest();
  public final static native void delete_Router2_ConnnectRequest(long jarg1);
  public final static native void Router2_ConnnectRequest_connectionRequestSystems_set(long jarg1, Router2.ConnnectRequest jarg1_, long jarg2);
  public final static native long Router2_ConnnectRequest_connectionRequestSystems_get(long jarg1, Router2.ConnnectRequest jarg1_);
  public final static native void Router2_ConnnectRequest_connectionRequestSystemsMutex_set(long jarg1, Router2.ConnnectRequest jarg1_, long jarg2, SimpleMutex jarg2_);
  public final static native long Router2_ConnnectRequest_connectionRequestSystemsMutex_get(long jarg1, Router2.ConnnectRequest jarg1_);
  public final static native void Router2_ConnnectRequest_requestState_set(long jarg1, Router2.ConnnectRequest jarg1_, int jarg2);
  public final static native int Router2_ConnnectRequest_requestState_get(long jarg1, Router2.ConnnectRequest jarg1_);
  public final static native void Router2_ConnnectRequest_pingTimeout_set(long jarg1, Router2.ConnnectRequest jarg1_, long jarg2);
  public final static native long Router2_ConnnectRequest_pingTimeout_get(long jarg1, Router2.ConnnectRequest jarg1_);
  public final static native void Router2_ConnnectRequest_endpointGuid_set(long jarg1, Router2.ConnnectRequest jarg1_, long jarg2, RakNetGUID jarg2_);
  public final static native long Router2_ConnnectRequest_endpointGuid_get(long jarg1, Router2.ConnnectRequest jarg1_);
  public final static native void Router2_ConnnectRequest_lastRequestedForwardingSystem_set(long jarg1, Router2.ConnnectRequest jarg1_, long jarg2, RakNetGUID jarg2_);
  public final static native long Router2_ConnnectRequest_lastRequestedForwardingSystem_get(long jarg1, Router2.ConnnectRequest jarg1_);
  public final static native void Router2_ConnnectRequest_returnConnectionLostOnFailure_set(long jarg1, Router2.ConnnectRequest jarg1_, boolean jarg2);
  public final static native boolean Router2_ConnnectRequest_returnConnectionLostOnFailure_get(long jarg1, Router2.ConnnectRequest jarg1_);
  public final static native long Router2_ConnnectRequest_GetGuidIndex(long jarg1, Router2.ConnnectRequest jarg1_, long jarg2, RakNetGUID jarg2_);
  public final static native long Router2_GetConnectionRequestIndex(long jarg1, Router2 jarg1_, long jarg2, RakNetGUID jarg2_);
  public final static native void Router2_MiniPunchRequest_endpointGuid_set(long jarg1, Router2.MiniPunchRequest jarg1_, long jarg2, RakNetGUID jarg2_);
  public final static native long Router2_MiniPunchRequest_endpointGuid_get(long jarg1, Router2.MiniPunchRequest jarg1_);
  public final static native void Router2_MiniPunchRequest_endpointAddress_set(long jarg1, Router2.MiniPunchRequest jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native long Router2_MiniPunchRequest_endpointAddress_get(long jarg1, Router2.MiniPunchRequest jarg1_);
  public final static native void Router2_MiniPunchRequest_gotReplyFromEndpoint_set(long jarg1, Router2.MiniPunchRequest jarg1_, boolean jarg2);
  public final static native boolean Router2_MiniPunchRequest_gotReplyFromEndpoint_get(long jarg1, Router2.MiniPunchRequest jarg1_);
  public final static native void Router2_MiniPunchRequest_sourceGuid_set(long jarg1, Router2.MiniPunchRequest jarg1_, long jarg2, RakNetGUID jarg2_);
  public final static native long Router2_MiniPunchRequest_sourceGuid_get(long jarg1, Router2.MiniPunchRequest jarg1_);
  public final static native void Router2_MiniPunchRequest_sourceAddress_set(long jarg1, Router2.MiniPunchRequest jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native long Router2_MiniPunchRequest_sourceAddress_get(long jarg1, Router2.MiniPunchRequest jarg1_);
  public final static native void Router2_MiniPunchRequest_gotReplyFromSource_set(long jarg1, Router2.MiniPunchRequest jarg1_, boolean jarg2);
  public final static native boolean Router2_MiniPunchRequest_gotReplyFromSource_get(long jarg1, Router2.MiniPunchRequest jarg1_);
  public final static native void Router2_MiniPunchRequest_timeout_set(long jarg1, Router2.MiniPunchRequest jarg1_, long jarg2);
  public final static native long Router2_MiniPunchRequest_timeout_get(long jarg1, Router2.MiniPunchRequest jarg1_);
  public final static native void Router2_MiniPunchRequest_nextAction_set(long jarg1, Router2.MiniPunchRequest jarg1_, long jarg2);
  public final static native long Router2_MiniPunchRequest_nextAction_get(long jarg1, Router2.MiniPunchRequest jarg1_);
  public final static native void Router2_MiniPunchRequest_forwardingPort_set(long jarg1, Router2.MiniPunchRequest jarg1_, int jarg2);
  public final static native int Router2_MiniPunchRequest_forwardingPort_get(long jarg1, Router2.MiniPunchRequest jarg1_);
  public final static native void Router2_MiniPunchRequest_forwardingSocket_set(long jarg1, Router2.MiniPunchRequest jarg1_, int jarg2);
  public final static native int Router2_MiniPunchRequest_forwardingSocket_get(long jarg1, Router2.MiniPunchRequest jarg1_);
  public final static native long new_Router2_MiniPunchRequest();
  public final static native void delete_Router2_MiniPunchRequest(long jarg1);
  public final static native void Router2_ForwardedConnection_endpointGuid_set(long jarg1, Router2.ForwardedConnection jarg1_, long jarg2, RakNetGUID jarg2_);
  public final static native long Router2_ForwardedConnection_endpointGuid_get(long jarg1, Router2.ForwardedConnection jarg1_);
  public final static native void Router2_ForwardedConnection_intermediaryGuid_set(long jarg1, Router2.ForwardedConnection jarg1_, long jarg2, RakNetGUID jarg2_);
  public final static native long Router2_ForwardedConnection_intermediaryGuid_get(long jarg1, Router2.ForwardedConnection jarg1_);
  public final static native void Router2_ForwardedConnection_intermediaryAddress_set(long jarg1, Router2.ForwardedConnection jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native long Router2_ForwardedConnection_intermediaryAddress_get(long jarg1, Router2.ForwardedConnection jarg1_);
  public final static native void Router2_ForwardedConnection_returnConnectionLostOnFailure_set(long jarg1, Router2.ForwardedConnection jarg1_, boolean jarg2);
  public final static native boolean Router2_ForwardedConnection_returnConnectionLostOnFailure_get(long jarg1, Router2.ForwardedConnection jarg1_);
  public final static native void Router2_ForwardedConnection_weInitiatedForwarding_set(long jarg1, Router2.ForwardedConnection jarg1_, boolean jarg2);
  public final static native boolean Router2_ForwardedConnection_weInitiatedForwarding_get(long jarg1, Router2.ForwardedConnection jarg1_);
  public final static native long new_Router2_ForwardedConnection();
  public final static native void delete_Router2_ForwardedConnection(long jarg1);
  public final static native void delete_UDPProxyClientResultHandler(long jarg1);
  public final static native void UDPProxyClientResultHandler_OnForwardingSuccess(long jarg1, UDPProxyClientResultHandler jarg1_, String jarg2, int jarg3, long jarg4, SystemAddress jarg4_, long jarg5, SystemAddress jarg5_, long jarg6, SystemAddress jarg6_, long jarg7, RakNetGUID jarg7_, long jarg8, UDPProxyClient jarg8_);
  public final static native void UDPProxyClientResultHandler_OnForwardingNotification(long jarg1, UDPProxyClientResultHandler jarg1_, String jarg2, int jarg3, long jarg4, SystemAddress jarg4_, long jarg5, SystemAddress jarg5_, long jarg6, SystemAddress jarg6_, long jarg7, RakNetGUID jarg7_, long jarg8, UDPProxyClient jarg8_);
  public final static native void UDPProxyClientResultHandler_OnNoServersOnline(long jarg1, UDPProxyClientResultHandler jarg1_, long jarg2, SystemAddress jarg2_, long jarg3, SystemAddress jarg3_, long jarg4, SystemAddress jarg4_, long jarg5, RakNetGUID jarg5_, long jarg6, UDPProxyClient jarg6_);
  public final static native void UDPProxyClientResultHandler_OnRecipientNotConnected(long jarg1, UDPProxyClientResultHandler jarg1_, long jarg2, SystemAddress jarg2_, long jarg3, SystemAddress jarg3_, long jarg4, SystemAddress jarg4_, long jarg5, RakNetGUID jarg5_, long jarg6, UDPProxyClient jarg6_);
  public final static native void UDPProxyClientResultHandler_OnAllServersBusy(long jarg1, UDPProxyClientResultHandler jarg1_, long jarg2, SystemAddress jarg2_, long jarg3, SystemAddress jarg3_, long jarg4, SystemAddress jarg4_, long jarg5, RakNetGUID jarg5_, long jarg6, UDPProxyClient jarg6_);
  public final static native void UDPProxyClientResultHandler_OnForwardingInProgress(long jarg1, UDPProxyClientResultHandler jarg1_, String jarg2, int jarg3, long jarg4, SystemAddress jarg4_, long jarg5, SystemAddress jarg5_, long jarg6, SystemAddress jarg6_, long jarg7, RakNetGUID jarg7_, long jarg8, UDPProxyClient jarg8_);
  public final static native long UDPProxyClient_GetInstance();
  public final static native void UDPProxyClient_DestroyInstance(long jarg1, UDPProxyClient jarg1_);
  public final static native long new_UDPProxyClient();
  public final static native void delete_UDPProxyClient(long jarg1);
  public final static native void UDPProxyClient_SetResultHandler(long jarg1, UDPProxyClient jarg1_, long jarg2, UDPProxyClientResultHandler jarg2_);
  public final static native boolean UDPProxyClient_RequestForwarding__SWIG_0(long jarg1, UDPProxyClient jarg1_, long jarg2, SystemAddress jarg2_, long jarg3, SystemAddress jarg3_, long jarg4, SystemAddress jarg4_, long jarg5, long jarg6, BitStream jarg6_);
  public final static native boolean UDPProxyClient_RequestForwarding__SWIG_1(long jarg1, UDPProxyClient jarg1_, long jarg2, SystemAddress jarg2_, long jarg3, SystemAddress jarg3_, long jarg4, SystemAddress jarg4_, long jarg5);
  public final static native boolean UDPProxyClient_RequestForwarding__SWIG_2(long jarg1, UDPProxyClient jarg1_, long jarg2, SystemAddress jarg2_, long jarg3, SystemAddress jarg3_, long jarg4, RakNetGUID jarg4_, long jarg5, long jarg6, BitStream jarg6_);
  public final static native boolean UDPProxyClient_RequestForwarding__SWIG_3(long jarg1, UDPProxyClient jarg1_, long jarg2, SystemAddress jarg2_, long jarg3, SystemAddress jarg3_, long jarg4, RakNetGUID jarg4_, long jarg5);
  public final static native void UDPProxyClient_ServerWithPing_ping_set(long jarg1, UDPProxyClient.ServerWithPing jarg1_, int jarg2);
  public final static native int UDPProxyClient_ServerWithPing_ping_get(long jarg1, UDPProxyClient.ServerWithPing jarg1_);
  public final static native void UDPProxyClient_ServerWithPing_serverAddress_set(long jarg1, UDPProxyClient.ServerWithPing jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native long UDPProxyClient_ServerWithPing_serverAddress_get(long jarg1, UDPProxyClient.ServerWithPing jarg1_);
  public final static native long new_UDPProxyClient_ServerWithPing();
  public final static native void delete_UDPProxyClient_ServerWithPing(long jarg1);
  public final static native void UDPProxyClient_SenderAndTargetAddress_senderClientAddress_set(long jarg1, UDPProxyClient.SenderAndTargetAddress jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native long UDPProxyClient_SenderAndTargetAddress_senderClientAddress_get(long jarg1, UDPProxyClient.SenderAndTargetAddress jarg1_);
  public final static native void UDPProxyClient_SenderAndTargetAddress_targetClientAddress_set(long jarg1, UDPProxyClient.SenderAndTargetAddress jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native long UDPProxyClient_SenderAndTargetAddress_targetClientAddress_get(long jarg1, UDPProxyClient.SenderAndTargetAddress jarg1_);
  public final static native long new_UDPProxyClient_SenderAndTargetAddress();
  public final static native void delete_UDPProxyClient_SenderAndTargetAddress(long jarg1);
  public final static native void UDPProxyClient_PingServerGroup_sata_set(long jarg1, UDPProxyClient.PingServerGroup jarg1_, long jarg2, UDPProxyClient.SenderAndTargetAddress jarg2_);
  public final static native long UDPProxyClient_PingServerGroup_sata_get(long jarg1, UDPProxyClient.PingServerGroup jarg1_);
  public final static native void UDPProxyClient_PingServerGroup_startPingTime_set(long jarg1, UDPProxyClient.PingServerGroup jarg1_, long jarg2);
  public final static native long UDPProxyClient_PingServerGroup_startPingTime_get(long jarg1, UDPProxyClient.PingServerGroup jarg1_);
  public final static native void UDPProxyClient_PingServerGroup_coordinatorAddressForPings_set(long jarg1, UDPProxyClient.PingServerGroup jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native long UDPProxyClient_PingServerGroup_coordinatorAddressForPings_get(long jarg1, UDPProxyClient.PingServerGroup jarg1_);
  public final static native void UDPProxyClient_PingServerGroup_serversToPing_set(long jarg1, UDPProxyClient.PingServerGroup jarg1_, long jarg2);
  public final static native long UDPProxyClient_PingServerGroup_serversToPing_get(long jarg1, UDPProxyClient.PingServerGroup jarg1_);
  public final static native boolean UDPProxyClient_PingServerGroup_AreAllServersPinged(long jarg1, UDPProxyClient.PingServerGroup jarg1_);
  public final static native void UDPProxyClient_PingServerGroup_SendPingedServersToCoordinator(long jarg1, UDPProxyClient.PingServerGroup jarg1_, long jarg2, RakPeerInterface jarg2_);
  public final static native long new_UDPProxyClient_PingServerGroup();
  public final static native void delete_UDPProxyClient_PingServerGroup(long jarg1);
  public final static native long FullyConnectedMesh2_GetInstance();
  public final static native void FullyConnectedMesh2_DestroyInstance(long jarg1, FullyConnectedMesh2 jarg1_);
  public final static native long new_FullyConnectedMesh2();
  public final static native void delete_FullyConnectedMesh2(long jarg1);
  public final static native void FullyConnectedMesh2_SetConnectOnNewRemoteConnection(long jarg1, FullyConnectedMesh2 jarg1_, boolean jarg2, long jarg3, RakString jarg3_);
  public final static native long FullyConnectedMesh2_GetConnectedHost(long jarg1, FullyConnectedMesh2 jarg1_);
  public final static native long FullyConnectedMesh2_GetConnectedHostAddr(long jarg1, FullyConnectedMesh2 jarg1_);
  public final static native long FullyConnectedMesh2_GetHostSystem(long jarg1, FullyConnectedMesh2 jarg1_);
  public final static native boolean FullyConnectedMesh2_IsHostSystem(long jarg1, FullyConnectedMesh2 jarg1_);
  public final static native void FullyConnectedMesh2_GetHostOrder(long jarg1, FullyConnectedMesh2 jarg1_, long jarg2, RakNetListRakNetGUID jarg2_);
  public final static native boolean FullyConnectedMesh2_IsConnectedHost(long jarg1, FullyConnectedMesh2 jarg1_);
  public final static native void FullyConnectedMesh2_SetAutoparticipateConnections(long jarg1, FullyConnectedMesh2 jarg1_, boolean jarg2);
  public final static native void FullyConnectedMesh2_ResetHostCalculation(long jarg1, FullyConnectedMesh2 jarg1_);
  public final static native void FullyConnectedMesh2_AddParticipant(long jarg1, FullyConnectedMesh2 jarg1_, long jarg2, RakNetGUID jarg2_);
  public final static native void FullyConnectedMesh2_GetParticipantList(long jarg1, FullyConnectedMesh2 jarg1_, long jarg2, RakNetListRakNetGUID jarg2_);
  public final static native boolean FullyConnectedMesh2_HasParticipant(long jarg1, FullyConnectedMesh2 jarg1_, long jarg2, RakNetGUID jarg2_);
  public final static native void FullyConnectedMesh2_ConnectToRemoteNewIncomingConnections(long jarg1, FullyConnectedMesh2 jarg1_, long jarg2, Packet jarg2_);
  public final static native void FullyConnectedMesh2_Clear(long jarg1, FullyConnectedMesh2 jarg1_);
  public final static native long FullyConnectedMesh2_GetParticipantCount__SWIG_0(long jarg1, FullyConnectedMesh2 jarg1_);
  public final static native void FullyConnectedMesh2_GetParticipantCount__SWIG_1(long jarg1, FullyConnectedMesh2 jarg1_, long jarg2);
  public final static native void FullyConnectedMesh2_StartVerifiedJoin(long jarg1, FullyConnectedMesh2 jarg1_, long jarg2, RakNetGUID jarg2_);
  public final static native void FullyConnectedMesh2_RespondOnVerifiedJoinCapable(long jarg1, FullyConnectedMesh2 jarg1_, long jarg2, Packet jarg2_, boolean jarg3, long jarg4, BitStream jarg4_);
  public final static native void FullyConnectedMesh2_GetVerifiedJoinRequiredProcessingList(long jarg1, FullyConnectedMesh2 jarg1_, long jarg2, RakNetGUID jarg2_, long jarg3, RakNetListSystemAddress jarg3_, long jarg4, RakNetListRakNetGUID jarg4_, long jarg5);
  public final static native void FullyConnectedMesh2_GetVerifiedJoinAcceptedAdditionalData(long jarg1, FullyConnectedMesh2 jarg1_, long jarg2, Packet jarg2_, long jarg3, long jarg4, RakNetListRakNetGUID jarg4_, long jarg5, BitStream jarg5_);
  public final static native void FullyConnectedMesh2_GetVerifiedJoinRejectedAdditionalData(long jarg1, FullyConnectedMesh2 jarg1_, long jarg2, Packet jarg2_, long jarg3, BitStream jarg3_);
  public final static native void FullyConnectedMesh2_WriteVJCUserData(long jarg1, FullyConnectedMesh2 jarg1_, long jarg2, BitStream jarg2_);
  public final static native void FullyConnectedMesh2_SkipToVJCUserData(long jarg1, BitStream jarg1_);
  public final static native void FullyConnectedMesh2_WriteVJSUserData(long jarg1, FullyConnectedMesh2 jarg1_, long jarg2, BitStream jarg2_, long jarg3, RakNetGUID jarg3_);
  public final static native long new_FullyConnectedMesh2_FCM2Participant__SWIG_0();
  public final static native long new_FullyConnectedMesh2_FCM2Participant__SWIG_1(long jarg1, long jarg2, RakNetGUID jarg2_);
  public final static native void FullyConnectedMesh2_FCM2Participant_fcm2Guid_set(long jarg1, FullyConnectedMesh2.FCM2Participant jarg1_, long jarg2);
  public final static native long FullyConnectedMesh2_FCM2Participant_fcm2Guid_get(long jarg1, FullyConnectedMesh2.FCM2Participant jarg1_);
  public final static native void FullyConnectedMesh2_FCM2Participant_rakNetGuid_set(long jarg1, FullyConnectedMesh2.FCM2Participant jarg1_, long jarg2, RakNetGUID jarg2_);
  public final static native long FullyConnectedMesh2_FCM2Participant_rakNetGuid_get(long jarg1, FullyConnectedMesh2.FCM2Participant jarg1_);
  public final static native void delete_FullyConnectedMesh2_FCM2Participant(long jarg1);
  public final static native void FullyConnectedMesh2_VerifiedJoinInProgressMember_systemAddress_set(long jarg1, FullyConnectedMesh2.VerifiedJoinInProgressMember jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native long FullyConnectedMesh2_VerifiedJoinInProgressMember_systemAddress_get(long jarg1, FullyConnectedMesh2.VerifiedJoinInProgressMember jarg1_);
  public final static native void FullyConnectedMesh2_VerifiedJoinInProgressMember_guid_set(long jarg1, FullyConnectedMesh2.VerifiedJoinInProgressMember jarg1_, long jarg2, RakNetGUID jarg2_);
  public final static native long FullyConnectedMesh2_VerifiedJoinInProgressMember_guid_get(long jarg1, FullyConnectedMesh2.VerifiedJoinInProgressMember jarg1_);
  public final static native void FullyConnectedMesh2_VerifiedJoinInProgressMember_joinInProgressState_set(long jarg1, FullyConnectedMesh2.VerifiedJoinInProgressMember jarg1_, int jarg2);
  public final static native int FullyConnectedMesh2_VerifiedJoinInProgressMember_joinInProgressState_get(long jarg1, FullyConnectedMesh2.VerifiedJoinInProgressMember jarg1_);
  public final static native void FullyConnectedMesh2_VerifiedJoinInProgressMember_userData_set(long jarg1, FullyConnectedMesh2.VerifiedJoinInProgressMember jarg1_, long jarg2, BitStream jarg2_);
  public final static native long FullyConnectedMesh2_VerifiedJoinInProgressMember_userData_get(long jarg1, FullyConnectedMesh2.VerifiedJoinInProgressMember jarg1_);
  public final static native void FullyConnectedMesh2_VerifiedJoinInProgressMember_workingFlag_set(long jarg1, FullyConnectedMesh2.VerifiedJoinInProgressMember jarg1_, boolean jarg2);
  public final static native boolean FullyConnectedMesh2_VerifiedJoinInProgressMember_workingFlag_get(long jarg1, FullyConnectedMesh2.VerifiedJoinInProgressMember jarg1_);
  public final static native long new_FullyConnectedMesh2_VerifiedJoinInProgressMember();
  public final static native void delete_FullyConnectedMesh2_VerifiedJoinInProgressMember(long jarg1);
  public final static native void FullyConnectedMesh2_VerifiedJoinInProgress_requester_set(long jarg1, FullyConnectedMesh2.VerifiedJoinInProgress jarg1_, long jarg2, RakNetGUID jarg2_);
  public final static native long FullyConnectedMesh2_VerifiedJoinInProgress_requester_get(long jarg1, FullyConnectedMesh2.VerifiedJoinInProgress jarg1_);
  public final static native void FullyConnectedMesh2_VerifiedJoinInProgress_vjipMembers_set(long jarg1, FullyConnectedMesh2.VerifiedJoinInProgress jarg1_, long jarg2);
  public final static native long FullyConnectedMesh2_VerifiedJoinInProgress_vjipMembers_get(long jarg1, FullyConnectedMesh2.VerifiedJoinInProgress jarg1_);
  public final static native long new_FullyConnectedMesh2_VerifiedJoinInProgress();
  public final static native void delete_FullyConnectedMesh2_VerifiedJoinInProgress(long jarg1);
  public final static native long FullyConnectedMesh2_GetTotalConnectionCount(long jarg1, FullyConnectedMesh2 jarg1_);
  public final static native long ReadyEvent_GetInstance();
  public final static native void ReadyEvent_DestroyInstance(long jarg1, ReadyEvent jarg1_);
  public final static native long new_ReadyEvent();
  public final static native void delete_ReadyEvent(long jarg1);
  public final static native boolean ReadyEvent_SetEvent(long jarg1, ReadyEvent jarg1_, int jarg2, boolean jarg3);
  public final static native void ReadyEvent_ForceCompletion(long jarg1, ReadyEvent jarg1_, int jarg2);
  public final static native boolean ReadyEvent_DeleteEvent(long jarg1, ReadyEvent jarg1_, int jarg2);
  public final static native boolean ReadyEvent_IsEventSet(long jarg1, ReadyEvent jarg1_, int jarg2);
  public final static native boolean ReadyEvent_IsEventCompletionProcessing(long jarg1, ReadyEvent jarg1_, int jarg2);
  public final static native boolean ReadyEvent_IsEventCompleted(long jarg1, ReadyEvent jarg1_, int jarg2);
  public final static native boolean ReadyEvent_HasEvent(long jarg1, ReadyEvent jarg1_, int jarg2);
  public final static native long ReadyEvent_GetEventListSize(long jarg1, ReadyEvent jarg1_);
  public final static native int ReadyEvent_GetEventAtIndex(long jarg1, ReadyEvent jarg1_, long jarg2);
  public final static native boolean ReadyEvent_AddToWaitList(long jarg1, ReadyEvent jarg1_, int jarg2, long jarg3, RakNetGUID jarg3_);
  public final static native boolean ReadyEvent_RemoveFromWaitList(long jarg1, ReadyEvent jarg1_, int jarg2, long jarg3, RakNetGUID jarg3_);
  public final static native boolean ReadyEvent_IsInWaitList(long jarg1, ReadyEvent jarg1_, int jarg2, long jarg3, RakNetGUID jarg3_);
  public final static native long ReadyEvent_GetRemoteWaitListSize(long jarg1, ReadyEvent jarg1_, int jarg2);
  public final static native long ReadyEvent_GetFromWaitListAtIndex(long jarg1, ReadyEvent jarg1_, int jarg2, long jarg3);
  public final static native int ReadyEvent_GetReadyStatus(long jarg1, ReadyEvent jarg1_, int jarg2, long jarg3, RakNetGUID jarg3_);
  public final static native void ReadyEvent_SetSendChannel(long jarg1, ReadyEvent jarg1_, short jarg2);
  public final static native int ReadyEvent_RemoteSystemCompByGuid(long jarg1, RakNetGUID jarg1_, long jarg2);
  public final static native void delete_NatPunchthroughServerDebugInterface(long jarg1);
  public final static native void NatPunchthroughServerDebugInterface_OnServerMessage(long jarg1, NatPunchthroughServerDebugInterface jarg1_, String jarg2);
  public final static native void NatPunchthroughServerDebugInterface_Printf_OnServerMessage(long jarg1, NatPunchthroughServerDebugInterface_Printf jarg1_, String jarg2);
  public final static native long new_NatPunchthroughServerDebugInterface_Printf();
  public final static native void delete_NatPunchthroughServerDebugInterface_Printf(long jarg1);
  public final static native void NatPunchthroughServerDebugInterface_PacketLogger_pl_set(long jarg1, NatPunchthroughServerDebugInterface_PacketLogger jarg1_, long jarg2, PacketLogger jarg2_);
  public final static native long NatPunchthroughServerDebugInterface_PacketLogger_pl_get(long jarg1, NatPunchthroughServerDebugInterface_PacketLogger jarg1_);
  public final static native long new_NatPunchthroughServerDebugInterface_PacketLogger();
  public final static native void delete_NatPunchthroughServerDebugInterface_PacketLogger(long jarg1);
  public final static native void NatPunchthroughServerDebugInterface_PacketLogger_OnServerMessage(long jarg1, NatPunchthroughServerDebugInterface_PacketLogger jarg1_, String jarg2);
  public final static native long NatPunchthroughServer_GetInstance();
  public final static native void NatPunchthroughServer_DestroyInstance(long jarg1, NatPunchthroughServer jarg1_);
  public final static native long new_NatPunchthroughServer();
  public final static native void delete_NatPunchthroughServer(long jarg1);
  public final static native void NatPunchthroughServer_SetDebugInterface(long jarg1, NatPunchthroughServer jarg1_, long jarg2, NatPunchthroughServerDebugInterface jarg2_);
  public final static native long new_NatPunchthroughServer_ConnectionAttempt();
  public final static native void NatPunchthroughServer_ConnectionAttempt_sender_set(long jarg1, NatPunchthroughServer.ConnectionAttempt jarg1_, long jarg2, NatPunchthroughServer.User jarg2_);
  public final static native long NatPunchthroughServer_ConnectionAttempt_sender_get(long jarg1, NatPunchthroughServer.ConnectionAttempt jarg1_);
  public final static native void NatPunchthroughServer_ConnectionAttempt_recipient_set(long jarg1, NatPunchthroughServer.ConnectionAttempt jarg1_, long jarg2, NatPunchthroughServer.User jarg2_);
  public final static native long NatPunchthroughServer_ConnectionAttempt_recipient_get(long jarg1, NatPunchthroughServer.ConnectionAttempt jarg1_);
  public final static native void NatPunchthroughServer_ConnectionAttempt_sessionId_set(long jarg1, NatPunchthroughServer.ConnectionAttempt jarg1_, int jarg2);
  public final static native int NatPunchthroughServer_ConnectionAttempt_sessionId_get(long jarg1, NatPunchthroughServer.ConnectionAttempt jarg1_);
  public final static native void NatPunchthroughServer_ConnectionAttempt_startTime_set(long jarg1, NatPunchthroughServer.ConnectionAttempt jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger NatPunchthroughServer_ConnectionAttempt_startTime_get(long jarg1, NatPunchthroughServer.ConnectionAttempt jarg1_);
  public final static native int NatPunchthroughServer_ConnectionAttempt_NAT_ATTEMPT_PHASE_NOT_STARTED_get();
  public final static native int NatPunchthroughServer_ConnectionAttempt_NAT_ATTEMPT_PHASE_GETTING_RECENT_PORTS_get();
  public final static native void NatPunchthroughServer_ConnectionAttempt_attemptPhase_set(long jarg1, NatPunchthroughServer.ConnectionAttempt jarg1_, int jarg2);
  public final static native int NatPunchthroughServer_ConnectionAttempt_attemptPhase_get(long jarg1, NatPunchthroughServer.ConnectionAttempt jarg1_);
  public final static native void delete_NatPunchthroughServer_ConnectionAttempt(long jarg1);
  public final static native void NatPunchthroughServer_User_guid_set(long jarg1, NatPunchthroughServer.User jarg1_, long jarg2, RakNetGUID jarg2_);
  public final static native long NatPunchthroughServer_User_guid_get(long jarg1, NatPunchthroughServer.User jarg1_);
  public final static native void NatPunchthroughServer_User_systemAddress_set(long jarg1, NatPunchthroughServer.User jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native long NatPunchthroughServer_User_systemAddress_get(long jarg1, NatPunchthroughServer.User jarg1_);
  public final static native void NatPunchthroughServer_User_mostRecentPort_set(long jarg1, NatPunchthroughServer.User jarg1_, int jarg2);
  public final static native int NatPunchthroughServer_User_mostRecentPort_get(long jarg1, NatPunchthroughServer.User jarg1_);
  public final static native void NatPunchthroughServer_User_isReady_set(long jarg1, NatPunchthroughServer.User jarg1_, boolean jarg2);
  public final static native boolean NatPunchthroughServer_User_isReady_get(long jarg1, NatPunchthroughServer.User jarg1_);
  public final static native void NatPunchthroughServer_User_groupPunchthroughRequests_set(long jarg1, NatPunchthroughServer.User jarg1_, long jarg2);
  public final static native long NatPunchthroughServer_User_groupPunchthroughRequests_get(long jarg1, NatPunchthroughServer.User jarg1_);
  public final static native void NatPunchthroughServer_User_connectionAttempts_set(long jarg1, NatPunchthroughServer.User jarg1_, long jarg2);
  public final static native long NatPunchthroughServer_User_connectionAttempts_get(long jarg1, NatPunchthroughServer.User jarg1_);
  public final static native boolean NatPunchthroughServer_User_HasConnectionAttemptToUser(long jarg1, NatPunchthroughServer.User jarg1_, long jarg2, NatPunchthroughServer.User jarg2_);
  public final static native void NatPunchthroughServer_User_DerefConnectionAttempt(long jarg1, NatPunchthroughServer.User jarg1_, long jarg2, NatPunchthroughServer.ConnectionAttempt jarg2_);
  public final static native void NatPunchthroughServer_User_DeleteConnectionAttempt(long jarg1, NatPunchthroughServer.User jarg1_, long jarg2, NatPunchthroughServer.ConnectionAttempt jarg2_);
  public final static native void NatPunchthroughServer_User_LogConnectionAttempts(long jarg1, NatPunchthroughServer.User jarg1_, long jarg2, RakString jarg2_);
  public final static native long new_NatPunchthroughServer_User();
  public final static native void delete_NatPunchthroughServer_User(long jarg1);
  public final static native void NatPunchthroughServer_lastUpdate_set(long jarg1, NatPunchthroughServer jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger NatPunchthroughServer_lastUpdate_get(long jarg1, NatPunchthroughServer jarg1_);
  public final static native long new_UDPForwarder();
  public final static native void delete_UDPForwarder(long jarg1);
  public final static native void UDPForwarder_Startup(long jarg1, UDPForwarder jarg1_);
  public final static native void UDPForwarder_Shutdown(long jarg1, UDPForwarder jarg1_);
  public final static native void UDPForwarder_SetMaxForwardEntries(long jarg1, UDPForwarder jarg1_, int jarg2);
  public final static native int UDPForwarder_GetMaxForwardEntries(long jarg1, UDPForwarder jarg1_);
  public final static native int UDPForwarder_GetUsedForwardEntries(long jarg1, UDPForwarder jarg1_);
  public final static native int UDPForwarder_StartForwarding(long jarg1, UDPForwarder jarg1_, long jarg2, SystemAddress jarg2_, long jarg3, SystemAddress jarg3_, long jarg4, String jarg5, int jarg6, long jarg7, long jarg8);
  public final static native void UDPForwarder_StopForwarding(long jarg1, UDPForwarder jarg1_, long jarg2, SystemAddress jarg2_, long jarg3, SystemAddress jarg3_);
  public final static native long new_UDPForwarder_ForwardEntry();
  public final static native void delete_UDPForwarder_ForwardEntry(long jarg1);
  public final static native void UDPForwarder_ForwardEntry_addr1Unconfirmed_set(long jarg1, UDPForwarder.ForwardEntry jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native long UDPForwarder_ForwardEntry_addr1Unconfirmed_get(long jarg1, UDPForwarder.ForwardEntry jarg1_);
  public final static native void UDPForwarder_ForwardEntry_addr2Unconfirmed_set(long jarg1, UDPForwarder.ForwardEntry jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native long UDPForwarder_ForwardEntry_addr2Unconfirmed_get(long jarg1, UDPForwarder.ForwardEntry jarg1_);
  public final static native void UDPForwarder_ForwardEntry_addr1Confirmed_set(long jarg1, UDPForwarder.ForwardEntry jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native long UDPForwarder_ForwardEntry_addr1Confirmed_get(long jarg1, UDPForwarder.ForwardEntry jarg1_);
  public final static native void UDPForwarder_ForwardEntry_addr2Confirmed_set(long jarg1, UDPForwarder.ForwardEntry jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native long UDPForwarder_ForwardEntry_addr2Confirmed_get(long jarg1, UDPForwarder.ForwardEntry jarg1_);
  public final static native void UDPForwarder_ForwardEntry_timeLastDatagramForwarded_set(long jarg1, UDPForwarder.ForwardEntry jarg1_, long jarg2);
  public final static native long UDPForwarder_ForwardEntry_timeLastDatagramForwarded_get(long jarg1, UDPForwarder.ForwardEntry jarg1_);
  public final static native void UDPForwarder_ForwardEntry_socket_set(long jarg1, UDPForwarder.ForwardEntry jarg1_, int jarg2);
  public final static native int UDPForwarder_ForwardEntry_socket_get(long jarg1, UDPForwarder.ForwardEntry jarg1_);
  public final static native void UDPForwarder_ForwardEntry_timeoutOnNoDataMS_set(long jarg1, UDPForwarder.ForwardEntry jarg1_, long jarg2);
  public final static native long UDPForwarder_ForwardEntry_timeoutOnNoDataMS_get(long jarg1, UDPForwarder.ForwardEntry jarg1_);
  public final static native void UDPForwarder_ForwardEntry_socketFamily_set(long jarg1, UDPForwarder.ForwardEntry jarg1_, short jarg2);
  public final static native short UDPForwarder_ForwardEntry_socketFamily_get(long jarg1, UDPForwarder.ForwardEntry jarg1_);
  public final static native void delete_UDPProxyServerResultHandler(long jarg1);
  public final static native void UDPProxyServerResultHandler_OnLoginSuccess(long jarg1, UDPProxyServerResultHandler jarg1_, long jarg2, RakString jarg2_, long jarg3, UDPProxyServer jarg3_);
  public final static native void UDPProxyServerResultHandler_OnAlreadyLoggedIn(long jarg1, UDPProxyServerResultHandler jarg1_, long jarg2, RakString jarg2_, long jarg3, UDPProxyServer jarg3_);
  public final static native void UDPProxyServerResultHandler_OnNoPasswordSet(long jarg1, UDPProxyServerResultHandler jarg1_, long jarg2, RakString jarg2_, long jarg3, UDPProxyServer jarg3_);
  public final static native void UDPProxyServerResultHandler_OnWrongPassword(long jarg1, UDPProxyServerResultHandler jarg1_, long jarg2, RakString jarg2_, long jarg3, UDPProxyServer jarg3_);
  public final static native long UDPProxyServer_GetInstance();
  public final static native void UDPProxyServer_DestroyInstance(long jarg1, UDPProxyServer jarg1_);
  public final static native long new_UDPProxyServer();
  public final static native void delete_UDPProxyServer(long jarg1);
  public final static native void UDPProxyServer_SetSocketFamily(long jarg1, UDPProxyServer jarg1_, int jarg2);
  public final static native void UDPProxyServer_SetResultHandler(long jarg1, UDPProxyServer jarg1_, long jarg2, UDPProxyServerResultHandler jarg2_);
  public final static native boolean UDPProxyServer_LoginToCoordinator(long jarg1, UDPProxyServer jarg1_, long jarg2, RakString jarg2_, long jarg3, SystemAddress jarg3_);
  public final static native void UDPProxyServer_SetServerPublicIP(long jarg1, UDPProxyServer jarg1_, long jarg2, RakString jarg2_);
  public final static native void UDPProxyServer_udpForwarder_set(long jarg1, UDPProxyServer jarg1_, long jarg2, UDPForwarder jarg2_);
  public final static native long UDPProxyServer_udpForwarder_get(long jarg1, UDPProxyServer jarg1_);
  public final static native long UDPProxyCoordinator_GetInstance();
  public final static native void UDPProxyCoordinator_DestroyInstance(long jarg1, UDPProxyCoordinator jarg1_);
  public final static native long new_UDPProxyCoordinator();
  public final static native void delete_UDPProxyCoordinator(long jarg1);
  public final static native void UDPProxyCoordinator_SetRemoteLoginPassword(long jarg1, UDPProxyCoordinator jarg1_, long jarg2, RakString jarg2_);
  public final static native void UDPProxyCoordinator_SenderAndTargetAddress_senderClientAddress_set(long jarg1, UDPProxyCoordinator.SenderAndTargetAddress jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native long UDPProxyCoordinator_SenderAndTargetAddress_senderClientAddress_get(long jarg1, UDPProxyCoordinator.SenderAndTargetAddress jarg1_);
  public final static native void UDPProxyCoordinator_SenderAndTargetAddress_senderClientGuid_set(long jarg1, UDPProxyCoordinator.SenderAndTargetAddress jarg1_, long jarg2, RakNetGUID jarg2_);
  public final static native long UDPProxyCoordinator_SenderAndTargetAddress_senderClientGuid_get(long jarg1, UDPProxyCoordinator.SenderAndTargetAddress jarg1_);
  public final static native void UDPProxyCoordinator_SenderAndTargetAddress_targetClientAddress_set(long jarg1, UDPProxyCoordinator.SenderAndTargetAddress jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native long UDPProxyCoordinator_SenderAndTargetAddress_targetClientAddress_get(long jarg1, UDPProxyCoordinator.SenderAndTargetAddress jarg1_);
  public final static native void UDPProxyCoordinator_SenderAndTargetAddress_targetClientGuid_set(long jarg1, UDPProxyCoordinator.SenderAndTargetAddress jarg1_, long jarg2, RakNetGUID jarg2_);
  public final static native long UDPProxyCoordinator_SenderAndTargetAddress_targetClientGuid_get(long jarg1, UDPProxyCoordinator.SenderAndTargetAddress jarg1_);
  public final static native long new_UDPProxyCoordinator_SenderAndTargetAddress();
  public final static native void delete_UDPProxyCoordinator_SenderAndTargetAddress(long jarg1);
  public final static native void UDPProxyCoordinator_ServerWithPing_ping_set(long jarg1, UDPProxyCoordinator.ServerWithPing jarg1_, int jarg2);
  public final static native int UDPProxyCoordinator_ServerWithPing_ping_get(long jarg1, UDPProxyCoordinator.ServerWithPing jarg1_);
  public final static native void UDPProxyCoordinator_ServerWithPing_serverAddress_set(long jarg1, UDPProxyCoordinator.ServerWithPing jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native long UDPProxyCoordinator_ServerWithPing_serverAddress_get(long jarg1, UDPProxyCoordinator.ServerWithPing jarg1_);
  public final static native long new_UDPProxyCoordinator_ServerWithPing();
  public final static native void delete_UDPProxyCoordinator_ServerWithPing(long jarg1);
  public final static native void UDPProxyCoordinator_ForwardingRequest_timeoutOnNoDataMS_set(long jarg1, UDPProxyCoordinator.ForwardingRequest jarg1_, long jarg2);
  public final static native long UDPProxyCoordinator_ForwardingRequest_timeoutOnNoDataMS_get(long jarg1, UDPProxyCoordinator.ForwardingRequest jarg1_);
  public final static native void UDPProxyCoordinator_ForwardingRequest_timeoutAfterSuccess_set(long jarg1, UDPProxyCoordinator.ForwardingRequest jarg1_, long jarg2);
  public final static native long UDPProxyCoordinator_ForwardingRequest_timeoutAfterSuccess_get(long jarg1, UDPProxyCoordinator.ForwardingRequest jarg1_);
  public final static native void UDPProxyCoordinator_ForwardingRequest_sata_set(long jarg1, UDPProxyCoordinator.ForwardingRequest jarg1_, long jarg2, UDPProxyCoordinator.SenderAndTargetAddress jarg2_);
  public final static native long UDPProxyCoordinator_ForwardingRequest_sata_get(long jarg1, UDPProxyCoordinator.ForwardingRequest jarg1_);
  public final static native void UDPProxyCoordinator_ForwardingRequest_requestingAddress_set(long jarg1, UDPProxyCoordinator.ForwardingRequest jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native long UDPProxyCoordinator_ForwardingRequest_requestingAddress_get(long jarg1, UDPProxyCoordinator.ForwardingRequest jarg1_);
  public final static native void UDPProxyCoordinator_ForwardingRequest_currentlyAttemptedServerAddress_set(long jarg1, UDPProxyCoordinator.ForwardingRequest jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native long UDPProxyCoordinator_ForwardingRequest_currentlyAttemptedServerAddress_get(long jarg1, UDPProxyCoordinator.ForwardingRequest jarg1_);
  public final static native void UDPProxyCoordinator_ForwardingRequest_remainingServersToTry_set(long jarg1, UDPProxyCoordinator.ForwardingRequest jarg1_, long jarg2);
  public final static native long UDPProxyCoordinator_ForwardingRequest_remainingServersToTry_get(long jarg1, UDPProxyCoordinator.ForwardingRequest jarg1_);
  public final static native long UDPProxyCoordinator_ForwardingRequest_serverSelectionBitstream_get(long jarg1, UDPProxyCoordinator.ForwardingRequest jarg1_);
  public final static native void UDPProxyCoordinator_ForwardingRequest_sourceServerPings_set(long jarg1, UDPProxyCoordinator.ForwardingRequest jarg1_, long jarg2);
  public final static native long UDPProxyCoordinator_ForwardingRequest_sourceServerPings_get(long jarg1, UDPProxyCoordinator.ForwardingRequest jarg1_);
  public final static native void UDPProxyCoordinator_ForwardingRequest_targetServerPings_set(long jarg1, UDPProxyCoordinator.ForwardingRequest jarg1_, long jarg2);
  public final static native long UDPProxyCoordinator_ForwardingRequest_targetServerPings_get(long jarg1, UDPProxyCoordinator.ForwardingRequest jarg1_);
  public final static native void UDPProxyCoordinator_ForwardingRequest_timeRequestedPings_set(long jarg1, UDPProxyCoordinator.ForwardingRequest jarg1_, long jarg2);
  public final static native long UDPProxyCoordinator_ForwardingRequest_timeRequestedPings_get(long jarg1, UDPProxyCoordinator.ForwardingRequest jarg1_);
  public final static native void UDPProxyCoordinator_ForwardingRequest_OrderRemainingServersToTry(long jarg1, UDPProxyCoordinator.ForwardingRequest jarg1_);
  public final static native long new_UDPProxyCoordinator_ForwardingRequest();
  public final static native void delete_UDPProxyCoordinator_ForwardingRequest(long jarg1);
  public final static native long NatTypeDetectionServer_GetInstance();
  public final static native void NatTypeDetectionServer_DestroyInstance(long jarg1, NatTypeDetectionServer jarg1_);
  public final static native long new_NatTypeDetectionServer();
  public final static native void delete_NatTypeDetectionServer(long jarg1);
  public final static native void NatTypeDetectionServer_Startup(long jarg1, NatTypeDetectionServer jarg1_, String jarg2, String jarg3, String jarg4);
  public final static native void NatTypeDetectionServer_Shutdown(long jarg1, NatTypeDetectionServer jarg1_);
  public final static native void NatTypeDetectionServer_NATDetectionAttempt_systemAddress_set(long jarg1, NatTypeDetectionServer.NATDetectionAttempt jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native long NatTypeDetectionServer_NATDetectionAttempt_systemAddress_get(long jarg1, NatTypeDetectionServer.NATDetectionAttempt jarg1_);
  public final static native void NatTypeDetectionServer_NATDetectionAttempt_detectionState_set(long jarg1, NatTypeDetectionServer.NATDetectionAttempt jarg1_, int jarg2);
  public final static native int NatTypeDetectionServer_NATDetectionAttempt_detectionState_get(long jarg1, NatTypeDetectionServer.NATDetectionAttempt jarg1_);
  public final static native void NatTypeDetectionServer_NATDetectionAttempt_nextStateTime_set(long jarg1, NatTypeDetectionServer.NATDetectionAttempt jarg1_, long jarg2);
  public final static native long NatTypeDetectionServer_NATDetectionAttempt_nextStateTime_get(long jarg1, NatTypeDetectionServer.NATDetectionAttempt jarg1_);
  public final static native void NatTypeDetectionServer_NATDetectionAttempt_timeBetweenAttempts_set(long jarg1, NatTypeDetectionServer.NATDetectionAttempt jarg1_, long jarg2);
  public final static native long NatTypeDetectionServer_NATDetectionAttempt_timeBetweenAttempts_get(long jarg1, NatTypeDetectionServer.NATDetectionAttempt jarg1_);
  public final static native void NatTypeDetectionServer_NATDetectionAttempt_c2Port_set(long jarg1, NatTypeDetectionServer.NATDetectionAttempt jarg1_, int jarg2);
  public final static native int NatTypeDetectionServer_NATDetectionAttempt_c2Port_get(long jarg1, NatTypeDetectionServer.NATDetectionAttempt jarg1_);
  public final static native void NatTypeDetectionServer_NATDetectionAttempt_guid_set(long jarg1, NatTypeDetectionServer.NATDetectionAttempt jarg1_, long jarg2, RakNetGUID jarg2_);
  public final static native long NatTypeDetectionServer_NATDetectionAttempt_guid_get(long jarg1, NatTypeDetectionServer.NATDetectionAttempt jarg1_);
  public final static native long new_NatTypeDetectionServer_NATDetectionAttempt();
  public final static native void delete_NatTypeDetectionServer_NATDetectionAttempt(long jarg1);
  public final static native void NatTypeDetectionServer_OnRNS2Recv(long jarg1, NatTypeDetectionServer jarg1_, long jarg2);
  public final static native void NatTypeDetectionServer_DeallocRNS2RecvStruct(long jarg1, NatTypeDetectionServer jarg1_, long jarg2, String jarg3, long jarg4);
  public final static native long NatTypeDetectionServer_AllocRNS2RecvStruct(long jarg1, NatTypeDetectionServer jarg1_, String jarg2, long jarg3);
  public final static native int _TABLE_BPLUS_TREE_ORDER_get();
  public final static native int _TABLE_MAX_COLUMN_NAME_LENGTH_get();
  public final static native long new_Table_Cell__SWIG_0();
  public final static native void delete_Table_Cell(long jarg1);
  public final static native long new_Table_Cell__SWIG_1(double jarg1, String jarg2, long jarg3, int jarg4);
  public final static native void Table_Cell_SetByType(long jarg1, Table.Cell jarg1_, double jarg2, String jarg3, long jarg4, int jarg5);
  public final static native void Table_Cell_Clear(long jarg1, Table.Cell jarg1_);
  public final static native void Table_Cell_Set__SWIG_0(long jarg1, Table.Cell jarg1_, int jarg2);
  public final static native void Table_Cell_Set__SWIG_1(long jarg1, Table.Cell jarg1_, long jarg2);
  public final static native void Table_Cell_Set__SWIG_2(long jarg1, Table.Cell jarg1_, double jarg2);
  public final static native void Table_Cell_Set__SWIG_3(long jarg1, Table.Cell jarg1_, String jarg2);
  public final static native void Table_Cell_Set__SWIG_4(long jarg1, Table.Cell jarg1_, String jarg2, int jarg3);
  public final static native void Table_Cell_SetPtr(long jarg1, Table.Cell jarg1_, long jarg2);
  public final static native void Table_Cell_Get__SWIG_0(long jarg1, Table.Cell jarg1_, long jarg2);
  public final static native void Table_Cell_Get__SWIG_1(long jarg1, Table.Cell jarg1_, long jarg2);
  public final static native void Table_Cell_Get__SWIG_2(long jarg1, Table.Cell jarg1_, String jarg2);
  public final static native void Table_Cell_Get__SWIG_3(long jarg1, Table.Cell jarg1_, String jarg2, long jarg3);
  public final static native void Table_Cell_Get__SWIG_4(long jarg1, Table.Cell jarg1_, String jarg2, long jarg3);
  public final static native long Table_Cell_ToString(long jarg1, Table.Cell jarg1_, int jarg2);
  public final static native long new_Table_Cell__SWIG_2(long jarg1, Table.Cell jarg1_);
  public final static native int Table_Cell_EstimateColumnType(long jarg1, Table.Cell jarg1_);
  public final static native void Table_Cell_isEmpty_set(long jarg1, Table.Cell jarg1_, boolean jarg2);
  public final static native boolean Table_Cell_isEmpty_get(long jarg1, Table.Cell jarg1_);
  public final static native void Table_Cell_i_set(long jarg1, Table.Cell jarg1_, double jarg2);
  public final static native double Table_Cell_i_get(long jarg1, Table.Cell jarg1_);
  public final static native void Table_Cell_c_set(long jarg1, Table.Cell jarg1_, String jarg2);
  public final static native String Table_Cell_c_get(long jarg1, Table.Cell jarg1_);
  public final static native void Table_Cell_ptr_set(long jarg1, Table.Cell jarg1_, long jarg2);
  public final static native long Table_Cell_ptr_get(long jarg1, Table.Cell jarg1_);
  public final static native long new_Table_ColumnDescriptor__SWIG_0();
  public final static native void delete_Table_ColumnDescriptor(long jarg1);
  public final static native long new_Table_ColumnDescriptor__SWIG_1(String jarg1, int jarg2);
  public final static native void Table_ColumnDescriptor_columnName_set(long jarg1, Table.ColumnDescriptor jarg1_, String jarg2);
  public final static native String Table_ColumnDescriptor_columnName_get(long jarg1, Table.ColumnDescriptor jarg1_);
  public final static native void Table_ColumnDescriptor_columnType_set(long jarg1, Table.ColumnDescriptor jarg1_, int jarg2);
  public final static native int Table_ColumnDescriptor_columnType_get(long jarg1, Table.ColumnDescriptor jarg1_);
  public final static native void Table_Row_cells_set(long jarg1, Table.Row jarg1_, long jarg2);
  public final static native long Table_Row_cells_get(long jarg1, Table.Row jarg1_);
  public final static native void Table_Row_UpdateCell__SWIG_0(long jarg1, Table.Row jarg1_, long jarg2, double jarg3);
  public final static native void Table_Row_UpdateCell__SWIG_1(long jarg1, Table.Row jarg1_, long jarg2, String jarg3);
  public final static native void Table_Row_UpdateCell__SWIG_2(long jarg1, Table.Row jarg1_, long jarg2, int jarg3, String jarg4);
  public final static native long new_Table_Row();
  public final static native void delete_Table_Row(long jarg1);
  public final static native long new_Table_FilterQuery__SWIG_0();
  public final static native void delete_Table_FilterQuery(long jarg1);
  public final static native long new_Table_FilterQuery__SWIG_1(long jarg1, long jarg2, Table.Cell jarg2_, int jarg3);
  public final static native void Table_FilterQuery_columnName_set(long jarg1, Table.FilterQuery jarg1_, String jarg2);
  public final static native String Table_FilterQuery_columnName_get(long jarg1, Table.FilterQuery jarg1_);
  public final static native void Table_FilterQuery_columnIndex_set(long jarg1, Table.FilterQuery jarg1_, long jarg2);
  public final static native long Table_FilterQuery_columnIndex_get(long jarg1, Table.FilterQuery jarg1_);
  public final static native void Table_FilterQuery_cellValue_set(long jarg1, Table.FilterQuery jarg1_, long jarg2, Table.Cell jarg2_);
  public final static native long Table_FilterQuery_cellValue_get(long jarg1, Table.FilterQuery jarg1_);
  public final static native void Table_FilterQuery_operation_set(long jarg1, Table.FilterQuery jarg1_, int jarg2);
  public final static native int Table_FilterQuery_operation_get(long jarg1, Table.FilterQuery jarg1_);
  public final static native void Table_SortQuery_columnIndex_set(long jarg1, Table.SortQuery jarg1_, long jarg2);
  public final static native long Table_SortQuery_columnIndex_get(long jarg1, Table.SortQuery jarg1_);
  public final static native void Table_SortQuery_operation_set(long jarg1, Table.SortQuery jarg1_, int jarg2);
  public final static native int Table_SortQuery_operation_get(long jarg1, Table.SortQuery jarg1_);
  public final static native long new_Table_SortQuery();
  public final static native void delete_Table_SortQuery(long jarg1);
  public final static native long new_Table();
  public final static native void delete_Table(long jarg1);
  public final static native long Table_AddColumn(long jarg1, Table jarg1_, String jarg2, int jarg3);
  public final static native void Table_RemoveColumn(long jarg1, Table jarg1_, long jarg2);
  public final static native String Table_ColumnName(long jarg1, Table jarg1_, long jarg2);
  public final static native int Table_GetColumnType(long jarg1, Table jarg1_, long jarg2);
  public final static native long Table_GetColumnCount(long jarg1, Table jarg1_);
  public final static native long Table_GetRowCount(long jarg1, Table jarg1_);
  public final static native long Table_AddRow__SWIG_0(long jarg1, Table jarg1_, long jarg2);
  public final static native long Table_AddRow__SWIG_1(long jarg1, Table jarg1_, long jarg2, long jarg3);
  public final static native long Table_AddRow__SWIG_2(long jarg1, Table jarg1_, long jarg2, long jarg3, boolean jarg4);
  public final static native long Table_AddRow__SWIG_3(long jarg1, Table jarg1_, long jarg2, long jarg3);
  public final static native boolean Table_RemoveRow(long jarg1, Table jarg1_, long jarg2);
  public final static native void Table_RemoveRows(long jarg1, Table jarg1_, long jarg2, Table jarg2_);
  public final static native boolean Table_UpdateCell__SWIG_0(long jarg1, Table jarg1_, long jarg2, long jarg3, int jarg4);
  public final static native boolean Table_UpdateCell__SWIG_1(long jarg1, Table jarg1_, long jarg2, long jarg3, String jarg4);
  public final static native boolean Table_UpdateCellByIndex__SWIG_0(long jarg1, Table jarg1_, long jarg2, long jarg3, int jarg4);
  public final static native boolean Table_UpdateCellByIndex__SWIG_1(long jarg1, Table jarg1_, long jarg2, long jarg3, String jarg4);
  public final static native void Table_GetCellValueByIndex__SWIG_0(long jarg1, Table jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native void Table_GetCellValueByIndex__SWIG_1(long jarg1, Table jarg1_, long jarg2, long jarg3, String jarg4, long jarg5);
  public final static native long Table_GetRowByID(long jarg1, Table jarg1_, long jarg2);
  public final static native long Table_GetRowByIndex(long jarg1, Table jarg1_, long jarg2, long jarg3);
  public final static native void Table_Clear(long jarg1, Table jarg1_);
  public final static native long Table_GetColumns(long jarg1, Table jarg1_);
  public final static native long Table_GetRows(long jarg1, Table jarg1_);
  public final static native long Table_GetAvailableRowId(long jarg1, Table jarg1_);
  public final static native void FileListTransferCBInterface_OnFileStruct_fileIndex_set(long jarg1, FileListTransferCBInterface.OnFileStruct jarg1_, long jarg2);
  public final static native long FileListTransferCBInterface_OnFileStruct_fileIndex_get(long jarg1, FileListTransferCBInterface.OnFileStruct jarg1_);
  public final static native void FileListTransferCBInterface_OnFileStruct_fileName_set(long jarg1, FileListTransferCBInterface.OnFileStruct jarg1_, String jarg2);
  public final static native String FileListTransferCBInterface_OnFileStruct_fileName_get(long jarg1, FileListTransferCBInterface.OnFileStruct jarg1_);
  public final static native void FileListTransferCBInterface_OnFileStruct_fileData_set(long jarg1, FileListTransferCBInterface.OnFileStruct jarg1_, String jarg2);
  public final static native String FileListTransferCBInterface_OnFileStruct_fileData_get(long jarg1, FileListTransferCBInterface.OnFileStruct jarg1_);
  public final static native void FileListTransferCBInterface_OnFileStruct_byteLengthOfThisFile_set(long jarg1, FileListTransferCBInterface.OnFileStruct jarg1_, long jarg2);
  public final static native long FileListTransferCBInterface_OnFileStruct_byteLengthOfThisFile_get(long jarg1, FileListTransferCBInterface.OnFileStruct jarg1_);
  public final static native void FileListTransferCBInterface_OnFileStruct_bytesDownloadedForThisFile_set(long jarg1, FileListTransferCBInterface.OnFileStruct jarg1_, long jarg2);
  public final static native long FileListTransferCBInterface_OnFileStruct_bytesDownloadedForThisFile_get(long jarg1, FileListTransferCBInterface.OnFileStruct jarg1_);
  public final static native void FileListTransferCBInterface_OnFileStruct_setID_set(long jarg1, FileListTransferCBInterface.OnFileStruct jarg1_, int jarg2);
  public final static native int FileListTransferCBInterface_OnFileStruct_setID_get(long jarg1, FileListTransferCBInterface.OnFileStruct jarg1_);
  public final static native void FileListTransferCBInterface_OnFileStruct_numberOfFilesInThisSet_set(long jarg1, FileListTransferCBInterface.OnFileStruct jarg1_, long jarg2);
  public final static native long FileListTransferCBInterface_OnFileStruct_numberOfFilesInThisSet_get(long jarg1, FileListTransferCBInterface.OnFileStruct jarg1_);
  public final static native void FileListTransferCBInterface_OnFileStruct_byteLengthOfThisSet_set(long jarg1, FileListTransferCBInterface.OnFileStruct jarg1_, long jarg2);
  public final static native long FileListTransferCBInterface_OnFileStruct_byteLengthOfThisSet_get(long jarg1, FileListTransferCBInterface.OnFileStruct jarg1_);
  public final static native void FileListTransferCBInterface_OnFileStruct_bytesDownloadedForThisSet_set(long jarg1, FileListTransferCBInterface.OnFileStruct jarg1_, long jarg2);
  public final static native long FileListTransferCBInterface_OnFileStruct_bytesDownloadedForThisSet_get(long jarg1, FileListTransferCBInterface.OnFileStruct jarg1_);
  public final static native void FileListTransferCBInterface_OnFileStruct_context_set(long jarg1, FileListTransferCBInterface.OnFileStruct jarg1_, long jarg2, FileListNodeContext jarg2_);
  public final static native long FileListTransferCBInterface_OnFileStruct_context_get(long jarg1, FileListTransferCBInterface.OnFileStruct jarg1_);
  public final static native void FileListTransferCBInterface_OnFileStruct_senderSystemAddress_set(long jarg1, FileListTransferCBInterface.OnFileStruct jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native long FileListTransferCBInterface_OnFileStruct_senderSystemAddress_get(long jarg1, FileListTransferCBInterface.OnFileStruct jarg1_);
  public final static native void FileListTransferCBInterface_OnFileStruct_senderGuid_set(long jarg1, FileListTransferCBInterface.OnFileStruct jarg1_, long jarg2, RakNetGUID jarg2_);
  public final static native long FileListTransferCBInterface_OnFileStruct_senderGuid_get(long jarg1, FileListTransferCBInterface.OnFileStruct jarg1_);
  public final static native long new_FileListTransferCBInterface_OnFileStruct();
  public final static native void delete_FileListTransferCBInterface_OnFileStruct(long jarg1);
  public final static native void FileListTransferCBInterface_FileProgressStruct_onFileStruct_set(long jarg1, FileListTransferCBInterface.FileProgressStruct jarg1_, long jarg2, FileListTransferCBInterface.OnFileStruct jarg2_);
  public final static native long FileListTransferCBInterface_FileProgressStruct_onFileStruct_get(long jarg1, FileListTransferCBInterface.FileProgressStruct jarg1_);
  public final static native void FileListTransferCBInterface_FileProgressStruct_partCount_set(long jarg1, FileListTransferCBInterface.FileProgressStruct jarg1_, long jarg2);
  public final static native long FileListTransferCBInterface_FileProgressStruct_partCount_get(long jarg1, FileListTransferCBInterface.FileProgressStruct jarg1_);
  public final static native void FileListTransferCBInterface_FileProgressStruct_partTotal_set(long jarg1, FileListTransferCBInterface.FileProgressStruct jarg1_, long jarg2);
  public final static native long FileListTransferCBInterface_FileProgressStruct_partTotal_get(long jarg1, FileListTransferCBInterface.FileProgressStruct jarg1_);
  public final static native void FileListTransferCBInterface_FileProgressStruct_dataChunkLength_set(long jarg1, FileListTransferCBInterface.FileProgressStruct jarg1_, long jarg2);
  public final static native long FileListTransferCBInterface_FileProgressStruct_dataChunkLength_get(long jarg1, FileListTransferCBInterface.FileProgressStruct jarg1_);
  public final static native void FileListTransferCBInterface_FileProgressStruct_firstDataChunk_set(long jarg1, FileListTransferCBInterface.FileProgressStruct jarg1_, String jarg2);
  public final static native String FileListTransferCBInterface_FileProgressStruct_firstDataChunk_get(long jarg1, FileListTransferCBInterface.FileProgressStruct jarg1_);
  public final static native void FileListTransferCBInterface_FileProgressStruct_iriDataChunk_set(long jarg1, FileListTransferCBInterface.FileProgressStruct jarg1_, String jarg2);
  public final static native String FileListTransferCBInterface_FileProgressStruct_iriDataChunk_get(long jarg1, FileListTransferCBInterface.FileProgressStruct jarg1_);
  public final static native void FileListTransferCBInterface_FileProgressStruct_iriWriteOffset_set(long jarg1, FileListTransferCBInterface.FileProgressStruct jarg1_, long jarg2);
  public final static native long FileListTransferCBInterface_FileProgressStruct_iriWriteOffset_get(long jarg1, FileListTransferCBInterface.FileProgressStruct jarg1_);
  public final static native void FileListTransferCBInterface_FileProgressStruct_senderSystemAddress_set(long jarg1, FileListTransferCBInterface.FileProgressStruct jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native long FileListTransferCBInterface_FileProgressStruct_senderSystemAddress_get(long jarg1, FileListTransferCBInterface.FileProgressStruct jarg1_);
  public final static native void FileListTransferCBInterface_FileProgressStruct_senderGuid_set(long jarg1, FileListTransferCBInterface.FileProgressStruct jarg1_, long jarg2, RakNetGUID jarg2_);
  public final static native long FileListTransferCBInterface_FileProgressStruct_senderGuid_get(long jarg1, FileListTransferCBInterface.FileProgressStruct jarg1_);
  public final static native void FileListTransferCBInterface_FileProgressStruct_allocateIrIDataChunkAutomatically_set(long jarg1, FileListTransferCBInterface.FileProgressStruct jarg1_, boolean jarg2);
  public final static native boolean FileListTransferCBInterface_FileProgressStruct_allocateIrIDataChunkAutomatically_get(long jarg1, FileListTransferCBInterface.FileProgressStruct jarg1_);
  public final static native long new_FileListTransferCBInterface_FileProgressStruct();
  public final static native void delete_FileListTransferCBInterface_FileProgressStruct(long jarg1);
  public final static native void FileListTransferCBInterface_DownloadCompleteStruct_setID_set(long jarg1, FileListTransferCBInterface.DownloadCompleteStruct jarg1_, int jarg2);
  public final static native int FileListTransferCBInterface_DownloadCompleteStruct_setID_get(long jarg1, FileListTransferCBInterface.DownloadCompleteStruct jarg1_);
  public final static native void FileListTransferCBInterface_DownloadCompleteStruct_numberOfFilesInThisSet_set(long jarg1, FileListTransferCBInterface.DownloadCompleteStruct jarg1_, long jarg2);
  public final static native long FileListTransferCBInterface_DownloadCompleteStruct_numberOfFilesInThisSet_get(long jarg1, FileListTransferCBInterface.DownloadCompleteStruct jarg1_);
  public final static native void FileListTransferCBInterface_DownloadCompleteStruct_byteLengthOfThisSet_set(long jarg1, FileListTransferCBInterface.DownloadCompleteStruct jarg1_, long jarg2);
  public final static native long FileListTransferCBInterface_DownloadCompleteStruct_byteLengthOfThisSet_get(long jarg1, FileListTransferCBInterface.DownloadCompleteStruct jarg1_);
  public final static native void FileListTransferCBInterface_DownloadCompleteStruct_senderSystemAddress_set(long jarg1, FileListTransferCBInterface.DownloadCompleteStruct jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native long FileListTransferCBInterface_DownloadCompleteStruct_senderSystemAddress_get(long jarg1, FileListTransferCBInterface.DownloadCompleteStruct jarg1_);
  public final static native void FileListTransferCBInterface_DownloadCompleteStruct_senderGuid_set(long jarg1, FileListTransferCBInterface.DownloadCompleteStruct jarg1_, long jarg2, RakNetGUID jarg2_);
  public final static native long FileListTransferCBInterface_DownloadCompleteStruct_senderGuid_get(long jarg1, FileListTransferCBInterface.DownloadCompleteStruct jarg1_);
  public final static native long new_FileListTransferCBInterface_DownloadCompleteStruct();
  public final static native void delete_FileListTransferCBInterface_DownloadCompleteStruct(long jarg1);
  public final static native void delete_FileListTransferCBInterface(long jarg1);
  public final static native boolean FileListTransferCBInterface_OnFile(long jarg1, FileListTransferCBInterface jarg1_, long jarg2, FileListTransferCBInterface.OnFileStruct jarg2_);
  public final static native void FileListTransferCBInterface_OnFileProgress(long jarg1, FileListTransferCBInterface jarg1_, long jarg2, FileListTransferCBInterface.FileProgressStruct jarg2_);
  public final static native boolean FileListTransferCBInterface_Update(long jarg1, FileListTransferCBInterface jarg1_);
  public final static native boolean FileListTransferCBInterface_OnDownloadComplete(long jarg1, FileListTransferCBInterface jarg1_, long jarg2, FileListTransferCBInterface.DownloadCompleteStruct jarg2_);
  public final static native void FileListTransferCBInterface_OnDereference(long jarg1, FileListTransferCBInterface jarg1_);
  public final static native long new_IncrementalReadInterface();
  public final static native void delete_IncrementalReadInterface(long jarg1);
  public final static native long new_FileListNodeContext__SWIG_0();
  public final static native long new_FileListNodeContext__SWIG_1(short jarg1, long jarg2, long jarg3, long jarg4);
  public final static native void delete_FileListNodeContext(long jarg1);
  public final static native void FileListNodeContext_op_set(long jarg1, FileListNodeContext jarg1_, short jarg2);
  public final static native short FileListNodeContext_op_get(long jarg1, FileListNodeContext jarg1_);
  public final static native void FileListNodeContext_flnc_extraData1_set(long jarg1, FileListNodeContext jarg1_, long jarg2);
  public final static native long FileListNodeContext_flnc_extraData1_get(long jarg1, FileListNodeContext jarg1_);
  public final static native void FileListNodeContext_flnc_extraData2_set(long jarg1, FileListNodeContext jarg1_, long jarg2);
  public final static native long FileListNodeContext_flnc_extraData2_get(long jarg1, FileListNodeContext jarg1_);
  public final static native void FileListNodeContext_flnc_extraData3_set(long jarg1, FileListNodeContext jarg1_, long jarg2);
  public final static native long FileListNodeContext_flnc_extraData3_get(long jarg1, FileListNodeContext jarg1_);
  public final static native void FileListNodeContext_dataPtr_set(long jarg1, FileListNodeContext jarg1_, long jarg2);
  public final static native long FileListNodeContext_dataPtr_get(long jarg1, FileListNodeContext jarg1_);
  public final static native void FileListNodeContext_dataLength_set(long jarg1, FileListNodeContext jarg1_, long jarg2);
  public final static native long FileListNodeContext_dataLength_get(long jarg1, FileListNodeContext jarg1_);
  public final static native void FileListNode_filename_set(long jarg1, FileListNode jarg1_, long jarg2, RakString jarg2_);
  public final static native long FileListNode_filename_get(long jarg1, FileListNode jarg1_);
  public final static native void FileListNode_fullPathToFile_set(long jarg1, FileListNode jarg1_, long jarg2, RakString jarg2_);
  public final static native long FileListNode_fullPathToFile_get(long jarg1, FileListNode jarg1_);
  public final static native void FileListNode_data_set(long jarg1, FileListNode jarg1_, String jarg2);
  public final static native String FileListNode_data_get(long jarg1, FileListNode jarg1_);
  public final static native void FileListNode_dataLengthBytes_set(long jarg1, FileListNode jarg1_, long jarg2);
  public final static native long FileListNode_dataLengthBytes_get(long jarg1, FileListNode jarg1_);
  public final static native void FileListNode_fileLengthBytes_set(long jarg1, FileListNode jarg1_, long jarg2);
  public final static native long FileListNode_fileLengthBytes_get(long jarg1, FileListNode jarg1_);
  public final static native void FileListNode_context_set(long jarg1, FileListNode jarg1_, long jarg2, FileListNodeContext jarg2_);
  public final static native long FileListNode_context_get(long jarg1, FileListNode jarg1_);
  public final static native void FileListNode_isAReference_set(long jarg1, FileListNode jarg1_, boolean jarg2);
  public final static native boolean FileListNode_isAReference_get(long jarg1, FileListNode jarg1_);
  public final static native long new_FileListNode();
  public final static native void delete_FileListNode(long jarg1);
  public final static native long FileListProgress_GetInstance();
  public final static native void FileListProgress_DestroyInstance(long jarg1, FileListProgress jarg1_);
  public final static native long new_FileListProgress();
  public final static native void delete_FileListProgress(long jarg1);
  public final static native void FileListProgress_OnAddFilesFromDirectoryStarted(long jarg1, FileListProgress jarg1_, long jarg2, FileList jarg2_, String jarg3);
  public final static native void FileListProgress_OnDirectory(long jarg1, FileListProgress jarg1_, long jarg2, FileList jarg2_, String jarg3, long jarg4);
  public final static native void FileListProgress_OnFile(long jarg1, FileListProgress jarg1_, long jarg2, FileList jarg2_, String jarg3, String jarg4, long jarg5);
  public final static native void FileListProgress_OnFilePush(long jarg1, FileListProgress jarg1_, String jarg2, long jarg3, long jarg4, long jarg5, boolean jarg6, long jarg7, SystemAddress jarg7_, int jarg8);
  public final static native void FileListProgress_OnFilePushesComplete(long jarg1, FileListProgress jarg1_, long jarg2, SystemAddress jarg2_, int jarg3);
  public final static native void FileListProgress_OnSendAborted(long jarg1, FileListProgress jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native long FLP_Printf_GetInstance();
  public final static native void FLP_Printf_DestroyInstance(long jarg1, FLP_Printf jarg1_);
  public final static native long new_FLP_Printf();
  public final static native void delete_FLP_Printf(long jarg1);
  public final static native void FLP_Printf_OnAddFilesFromDirectoryStarted(long jarg1, FLP_Printf jarg1_, long jarg2, FileList jarg2_, String jarg3);
  public final static native void FLP_Printf_OnDirectory(long jarg1, FLP_Printf jarg1_, long jarg2, FileList jarg2_, String jarg3, long jarg4);
  public final static native void FLP_Printf_OnFilePushesComplete(long jarg1, FLP_Printf jarg1_, long jarg2, SystemAddress jarg2_, int jarg3);
  public final static native void FLP_Printf_OnSendAborted(long jarg1, FLP_Printf jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native long FileList_GetInstance();
  public final static native void FileList_DestroyInstance(long jarg1, FileList jarg1_);
  public final static native long new_FileList();
  public final static native void delete_FileList(long jarg1);
  public final static native void FileList_AddFilesFromDirectory(long jarg1, FileList jarg1_, String jarg2, String jarg3, boolean jarg4, boolean jarg5, boolean jarg6, long jarg7, FileListNodeContext jarg7_);
  public final static native void FileList_Clear(long jarg1, FileList jarg1_);
  public final static native void FileList_Serialize(long jarg1, FileList jarg1_, long jarg2, BitStream jarg2_);
  public final static native boolean FileList_Deserialize(long jarg1, FileList jarg1_, long jarg2, BitStream jarg2_);
  public final static native void FileList_ListMissingOrChangedFiles(long jarg1, FileList jarg1_, String jarg2, long jarg3, FileList jarg3_, boolean jarg4, boolean jarg5);
  public final static native void FileList_GetDeltaToCurrent(long jarg1, FileList jarg1_, long jarg2, FileList jarg2_, long jarg3, FileList jarg3_, String jarg4, String jarg5);
  public final static native void FileList_PopulateDataFromDisk(long jarg1, FileList jarg1_, String jarg2, boolean jarg3, boolean jarg4, boolean jarg5);
  public final static native void FileList_FlagFilesAsReferences(long jarg1, FileList jarg1_);
  public final static native void FileList_WriteDataToDisk(long jarg1, FileList jarg1_, String jarg2);
  public final static native void FileList_AddFile(long jarg1, FileList jarg1_, String jarg2, String jarg3, long jarg4, FileListNodeContext jarg4_);
  public final static native void FileList_DeleteFiles(long jarg1, FileList jarg1_, String jarg2);
  public final static native void FileList_AddCallback(long jarg1, FileList jarg1_, long jarg2, FileListProgress jarg2_);
  public final static native void FileList_RemoveCallback(long jarg1, FileList jarg1_, long jarg2, FileListProgress jarg2_);
  public final static native void FileList_ClearCallbacks(long jarg1, FileList jarg1_);
  public final static native void FileList_fileList_set(long jarg1, FileList jarg1_, long jarg2, RakNetListFileListNode jarg2_);
  public final static native long FileList_fileList_get(long jarg1, FileList jarg1_);
  public final static native boolean FileList_FixEndingSlash__SWIG_0(String jarg1);
  public final static native boolean FileList_FixEndingSlash__SWIG_1(String jarg1, long jarg2);
  public final static native int REMOTE_MAX_TEXT_INPUT_get();
  public final static native void delete_TransportInterface(long jarg1);
  public final static native boolean TransportInterface_Start(long jarg1, TransportInterface jarg1_, int jarg2, boolean jarg3);
  public final static native void TransportInterface_Stop(long jarg1, TransportInterface jarg1_);
  public final static native void TransportInterface_CloseConnection(long jarg1, TransportInterface jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native long TransportInterface_Receive(long jarg1, TransportInterface jarg1_);
  public final static native void TransportInterface_DeallocatePacket(long jarg1, TransportInterface jarg1_, long jarg2, Packet jarg2_);
  public final static native long TransportInterface_HasNewIncomingConnection(long jarg1, TransportInterface jarg1_);
  public final static native long TransportInterface_HasLostConnection(long jarg1, TransportInterface jarg1_);
  public final static native long TransportInterface_GetCommandParser(long jarg1, TransportInterface jarg1_);
  public final static native void delete_CommandParserInterface(long jarg1);
  public final static native String CommandParserInterface_GetName(long jarg1, CommandParserInterface jarg1_);
  public final static native void CommandParserInterface_OnNewIncomingConnection(long jarg1, CommandParserInterface jarg1_, long jarg2, SystemAddress jarg2_, long jarg3, TransportInterface jarg3_);
  public final static native void CommandParserInterface_OnConnectionLost(long jarg1, CommandParserInterface jarg1_, long jarg2, SystemAddress jarg2_, long jarg3, TransportInterface jarg3_);
  public final static native void CommandParserInterface_SendHelp(long jarg1, CommandParserInterface jarg1_, long jarg2, TransportInterface jarg2_, long jarg3, SystemAddress jarg3_);
  public final static native boolean CommandParserInterface_OnCommand(long jarg1, CommandParserInterface jarg1_, String jarg2, long jarg3, long jarg4, long jarg5, TransportInterface jarg5_, long jarg6, SystemAddress jarg6_, String jarg7);
  public final static native void CommandParserInterface_OnTransportChange(long jarg1, CommandParserInterface jarg1_, long jarg2, TransportInterface jarg2_);
  public final static native void CommandParserInterface_SendCommandList(long jarg1, CommandParserInterface jarg1_, long jarg2, TransportInterface jarg2_, long jarg3, SystemAddress jarg3_);
  public final static native short CommandParserInterface_VARIABLE_NUMBER_OF_PARAMETERS_get();
  public final static native void CommandParserInterface_RegisterCommand(long jarg1, CommandParserInterface jarg1_, short jarg2, String jarg3, String jarg4);
  public final static native void CommandParserInterface_ReturnResult__SWIG_0(long jarg1, CommandParserInterface jarg1_, boolean jarg2, String jarg3, long jarg4, TransportInterface jarg4_, long jarg5, SystemAddress jarg5_);
  public final static native void CommandParserInterface_ReturnResult__SWIG_1(long jarg1, CommandParserInterface jarg1_, String jarg2, String jarg3, long jarg4, TransportInterface jarg4_, long jarg5, SystemAddress jarg5_);
  public final static native void CommandParserInterface_ReturnResult__SWIG_2(long jarg1, CommandParserInterface jarg1_, long jarg2, SystemAddress jarg2_, String jarg3, long jarg4, TransportInterface jarg4_, long jarg5, SystemAddress jarg5_);
  public final static native void CommandParserInterface_ReturnResult__SWIG_3(long jarg1, CommandParserInterface jarg1_, int jarg2, String jarg3, long jarg4, TransportInterface jarg4_, long jarg5, SystemAddress jarg5_);
  public final static native void CommandParserInterface_ReturnResult__SWIG_4(long jarg1, CommandParserInterface jarg1_, String jarg2, long jarg3, TransportInterface jarg3_, long jarg4, SystemAddress jarg4_);
  public final static native long LogCommandParser_GetInstance();
  public final static native void LogCommandParser_DestroyInstance(long jarg1, LogCommandParser jarg1_);
  public final static native long new_LogCommandParser();
  public final static native void delete_LogCommandParser(long jarg1);
  public final static native boolean LogCommandParser_OnCommand(long jarg1, LogCommandParser jarg1_, String jarg2, long jarg3, long jarg4, long jarg5, TransportInterface jarg5_, long jarg6, SystemAddress jarg6_, String jarg7);
  public final static native String LogCommandParser_GetName(long jarg1, LogCommandParser jarg1_);
  public final static native void LogCommandParser_SendHelp(long jarg1, LogCommandParser jarg1_, long jarg2, TransportInterface jarg2_, long jarg3, SystemAddress jarg3_);
  public final static native void LogCommandParser_AddChannel(long jarg1, LogCommandParser jarg1_, String jarg2);
  public final static native void LogCommandParser_WriteLog(long jarg1, LogCommandParser jarg1_, String jarg2, String jarg3);
  public final static native void LogCommandParser_OnNewIncomingConnection(long jarg1, LogCommandParser jarg1_, long jarg2, SystemAddress jarg2_, long jarg3, TransportInterface jarg3_);
  public final static native void LogCommandParser_OnConnectionLost(long jarg1, LogCommandParser jarg1_, long jarg2, SystemAddress jarg2_, long jarg3, TransportInterface jarg3_);
  public final static native void LogCommandParser_OnTransportChange(long jarg1, LogCommandParser jarg1_, long jarg2, TransportInterface jarg2_);
  public final static native int MESSAGE_FILTER_MAX_MESSAGE_ID_get();
  public final static native long MessageFilter_GetInstance();
  public final static native void MessageFilter_DestroyInstance(long jarg1, MessageFilter jarg1_);
  public final static native long new_MessageFilter();
  public final static native void delete_MessageFilter(long jarg1);
  public final static native void MessageFilter_SetAutoAddNewConnectionsToFilter(long jarg1, MessageFilter jarg1_, int jarg2);
  public final static native void MessageFilter_SetAllowMessageID(long jarg1, MessageFilter jarg1_, boolean jarg2, int jarg3, int jarg4, int jarg5);
  public final static native void MessageFilter_SetAllowRPC4(long jarg1, MessageFilter jarg1_, boolean jarg2, String jarg3, int jarg4);
  public final static native void MessageFilter_SetActionOnDisallowedMessage(long jarg1, MessageFilter jarg1_, boolean jarg2, boolean jarg3, long jarg4, int jarg5);
  public final static native void MessageFilter_SetFilterMaxTime(long jarg1, MessageFilter jarg1_, int jarg2, boolean jarg3, long jarg4, int jarg5);
  public final static native int MessageFilter_GetSystemFilterSet(long jarg1, MessageFilter jarg1_, long jarg2, AddressOrGUID jarg2_);
  public final static native void MessageFilter_SetSystemFilterSet(long jarg1, MessageFilter jarg1_, long jarg2, AddressOrGUID jarg2_, int jarg3);
  public final static native long MessageFilter_GetSystemCount(long jarg1, MessageFilter jarg1_, int jarg2);
  public final static native long MessageFilter_GetFilterSetCount(long jarg1, MessageFilter jarg1_);
  public final static native int MessageFilter_GetFilterSetIDByIndex(long jarg1, MessageFilter jarg1_, long jarg2);
  public final static native void MessageFilter_DeleteFilterSet(long jarg1, MessageFilter jarg1_, int jarg2);
  public final static native long DirectoryDeltaTransfer_GetInstance();
  public final static native void DirectoryDeltaTransfer_DestroyInstance(long jarg1, DirectoryDeltaTransfer jarg1_);
  public final static native long new_DirectoryDeltaTransfer();
  public final static native void delete_DirectoryDeltaTransfer(long jarg1);
  public final static native void DirectoryDeltaTransfer_SetFileListTransferPlugin(long jarg1, DirectoryDeltaTransfer jarg1_, long jarg2, FileListTransfer jarg2_);
  public final static native void DirectoryDeltaTransfer_SetApplicationDirectory(long jarg1, DirectoryDeltaTransfer jarg1_, String jarg2);
  public final static native void DirectoryDeltaTransfer_SetUploadSendParameters(long jarg1, DirectoryDeltaTransfer jarg1_, int jarg2, char jarg3);
  public final static native void DirectoryDeltaTransfer_AddUploadsFromSubdirectory(long jarg1, DirectoryDeltaTransfer jarg1_, String jarg2);
  public final static native int DirectoryDeltaTransfer_DownloadFromSubdirectory__SWIG_0(long jarg1, DirectoryDeltaTransfer jarg1_, String jarg2, String jarg3, boolean jarg4, long jarg5, SystemAddress jarg5_, long jarg6, FileListTransferCBInterface jarg6_, int jarg7, char jarg8, long jarg9, FileListProgress jarg9_);
  public final static native int DirectoryDeltaTransfer_DownloadFromSubdirectory__SWIG_1(long jarg1, DirectoryDeltaTransfer jarg1_, long jarg2, FileList jarg2_, String jarg3, String jarg4, boolean jarg5, long jarg6, SystemAddress jarg6_, long jarg7, FileListTransferCBInterface jarg7_, int jarg8, char jarg9, long jarg10, FileListProgress jarg10_);
  public final static native void DirectoryDeltaTransfer_GenerateHashes(long jarg1, DirectoryDeltaTransfer jarg1_, long jarg2, FileList jarg2_, String jarg3, boolean jarg4);
  public final static native void DirectoryDeltaTransfer_ClearUploads(long jarg1, DirectoryDeltaTransfer jarg1_);
  public final static native long DirectoryDeltaTransfer_GetNumberOfFilesForUpload(long jarg1, DirectoryDeltaTransfer jarg1_);
  public final static native void DirectoryDeltaTransfer_SetDownloadRequestIncrementalReadInterface(long jarg1, DirectoryDeltaTransfer jarg1_, long jarg2, IncrementalReadInterface jarg2_, long jarg3);
  public final static native long FileListTransfer_GetInstance();
  public final static native void FileListTransfer_DestroyInstance(long jarg1, FileListTransfer jarg1_);
  public final static native long new_FileListTransfer();
  public final static native void delete_FileListTransfer(long jarg1);
  public final static native void FileListTransfer_StartIncrementalReadThreads__SWIG_0(long jarg1, FileListTransfer jarg1_, int jarg2, int jarg3);
  public final static native void FileListTransfer_StartIncrementalReadThreads__SWIG_1(long jarg1, FileListTransfer jarg1_, int jarg2);
  public final static native int FileListTransfer_SetupReceive(long jarg1, FileListTransfer jarg1_, long jarg2, FileListTransferCBInterface jarg2_, boolean jarg3, long jarg4, SystemAddress jarg4_);
  public final static native void FileListTransfer_Send__SWIG_0(long jarg1, FileListTransfer jarg1_, long jarg2, FileList jarg2_, long jarg3, RakPeerInterface jarg3_, long jarg4, SystemAddress jarg4_, int jarg5, int jarg6, char jarg7, long jarg8, IncrementalReadInterface jarg8_, long jarg9);
  public final static native void FileListTransfer_Send__SWIG_1(long jarg1, FileListTransfer jarg1_, long jarg2, FileList jarg2_, long jarg3, RakPeerInterface jarg3_, long jarg4, SystemAddress jarg4_, int jarg5, int jarg6, char jarg7, long jarg8, IncrementalReadInterface jarg8_);
  public final static native void FileListTransfer_Send__SWIG_2(long jarg1, FileListTransfer jarg1_, long jarg2, FileList jarg2_, long jarg3, RakPeerInterface jarg3_, long jarg4, SystemAddress jarg4_, int jarg5, int jarg6, char jarg7);
  public final static native long FileListTransfer_GetPendingFilesToAddress(long jarg1, FileListTransfer jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native void FileListTransfer_CancelReceive(long jarg1, FileListTransfer jarg1_, int jarg2);
  public final static native void FileListTransfer_RemoveReceiver(long jarg1, FileListTransfer jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native boolean FileListTransfer_IsHandlerActive(long jarg1, FileListTransfer jarg1_, int jarg2);
  public final static native void FileListTransfer_AddCallback(long jarg1, FileListTransfer jarg1_, long jarg2, FileListProgress jarg2_);
  public final static native void FileListTransfer_RemoveCallback(long jarg1, FileListTransfer jarg1_, long jarg2, FileListProgress jarg2_);
  public final static native void FileListTransfer_ClearCallbacks(long jarg1, FileListTransfer jarg1_);
  public final static native long new_ThreadsafePacketLogger();
  public final static native void delete_ThreadsafePacketLogger(long jarg1);
  public final static native long new_PacketConsoleLogger();
  public final static native void PacketConsoleLogger_SetLogCommandParser(long jarg1, PacketConsoleLogger jarg1_, long jarg2, LogCommandParser jarg2_);
  public final static native void PacketConsoleLogger_WriteLog(long jarg1, PacketConsoleLogger jarg1_, String jarg2);
  public final static native void delete_PacketConsoleLogger(long jarg1);
  public final static native long ConnectionGraph2_GetInstance();
  public final static native void ConnectionGraph2_DestroyInstance(long jarg1, ConnectionGraph2 jarg1_);
  public final static native long new_ConnectionGraph2();
  public final static native void delete_ConnectionGraph2(long jarg1);
  public final static native boolean ConnectionGraph2_GetConnectionListForRemoteSystem(long jarg1, ConnectionGraph2 jarg1_, long jarg2, RakNetGUID jarg2_, long jarg3, SystemAddress jarg3_, long jarg4, RakNetGUID jarg4_, long jarg5);
  public final static native boolean ConnectionGraph2_ConnectionExists(long jarg1, ConnectionGraph2 jarg1_, long jarg2, RakNetGUID jarg2_, long jarg3, RakNetGUID jarg3_);
  public final static native int ConnectionGraph2_GetPingBetweenSystems(long jarg1, ConnectionGraph2 jarg1_, long jarg2, RakNetGUID jarg2_, long jarg3, RakNetGUID jarg3_);
  public final static native long ConnectionGraph2_GetLowestAveragePingSystem(long jarg1, ConnectionGraph2 jarg1_);
  public final static native void ConnectionGraph2_SetAutoProcessNewConnections(long jarg1, ConnectionGraph2 jarg1_, boolean jarg2);
  public final static native boolean ConnectionGraph2_GetAutoProcessNewConnections(long jarg1, ConnectionGraph2 jarg1_);
  public final static native void ConnectionGraph2_AddParticipant(long jarg1, ConnectionGraph2 jarg1_, long jarg2, SystemAddress jarg2_, long jarg3, RakNetGUID jarg3_);
  public final static native java.math.BigInteger GetTime();
  public final static native long GetTimeMS();
  public final static native java.math.BigInteger GetTimeUS();
  public final static native boolean GreaterThan(java.math.BigInteger jarg1, java.math.BigInteger jarg2);
  public final static native boolean LessThan(java.math.BigInteger jarg1, java.math.BigInteger jarg2);
  public final static native long new_RakNetListRakNetGUID__SWIG_0();
  public final static native void delete_RakNetListRakNetGUID(long jarg1);
  public final static native long new_RakNetListRakNetGUID__SWIG_1(long jarg1, RakNetListRakNetGUID jarg1_);
  public final static native long RakNetListRakNetGUID_Get(long jarg1, RakNetListRakNetGUID jarg1_, long jarg2);
  public final static native void RakNetListRakNetGUID_Push(long jarg1, RakNetListRakNetGUID jarg1_, long jarg2, RakNetGUID jarg2_, String jarg3, long jarg4);
  public final static native long RakNetListRakNetGUID_Pop(long jarg1, RakNetListRakNetGUID jarg1_);
  public final static native void RakNetListRakNetGUID_Insert__SWIG_0(long jarg1, RakNetListRakNetGUID jarg1_, long jarg2, RakNetGUID jarg2_, long jarg3, String jarg4, long jarg5);
  public final static native void RakNetListRakNetGUID_Insert__SWIG_1(long jarg1, RakNetListRakNetGUID jarg1_, long jarg2, RakNetGUID jarg2_, String jarg3, long jarg4);
  public final static native void RakNetListRakNetGUID_Replace__SWIG_0(long jarg1, RakNetListRakNetGUID jarg1_, long jarg2, RakNetGUID jarg2_, long jarg3, RakNetGUID jarg3_, long jarg4, String jarg5, long jarg6);
  public final static native void RakNetListRakNetGUID_Replace__SWIG_1(long jarg1, RakNetListRakNetGUID jarg1_, long jarg2, RakNetGUID jarg2_);
  public final static native void RakNetListRakNetGUID_RemoveAtIndex(long jarg1, RakNetListRakNetGUID jarg1_, long jarg2);
  public final static native void RakNetListRakNetGUID_RemoveAtIndexFast(long jarg1, RakNetListRakNetGUID jarg1_, long jarg2);
  public final static native void RakNetListRakNetGUID_RemoveFromEnd__SWIG_0(long jarg1, RakNetListRakNetGUID jarg1_, long jarg2);
  public final static native void RakNetListRakNetGUID_RemoveFromEnd__SWIG_1(long jarg1, RakNetListRakNetGUID jarg1_);
  public final static native long RakNetListRakNetGUID_GetIndexOf(long jarg1, RakNetListRakNetGUID jarg1_, long jarg2, RakNetGUID jarg2_);
  public final static native long RakNetListRakNetGUID_Size(long jarg1, RakNetListRakNetGUID jarg1_);
  public final static native void RakNetListRakNetGUID_Clear(long jarg1, RakNetListRakNetGUID jarg1_, boolean jarg2, String jarg3, long jarg4);
  public final static native void RakNetListRakNetGUID_Preallocate(long jarg1, RakNetListRakNetGUID jarg1_, long jarg2, String jarg3, long jarg4);
  public final static native void RakNetListRakNetGUID_Compress(long jarg1, RakNetListRakNetGUID jarg1_, String jarg2, long jarg3);
  public final static native long new_RakNetListSystemAddress__SWIG_0();
  public final static native void delete_RakNetListSystemAddress(long jarg1);
  public final static native long new_RakNetListSystemAddress__SWIG_1(long jarg1, RakNetListSystemAddress jarg1_);
  public final static native long RakNetListSystemAddress_Get(long jarg1, RakNetListSystemAddress jarg1_, long jarg2);
  public final static native void RakNetListSystemAddress_Push(long jarg1, RakNetListSystemAddress jarg1_, long jarg2, SystemAddress jarg2_, String jarg3, long jarg4);
  public final static native long RakNetListSystemAddress_Pop(long jarg1, RakNetListSystemAddress jarg1_);
  public final static native void RakNetListSystemAddress_Insert__SWIG_0(long jarg1, RakNetListSystemAddress jarg1_, long jarg2, SystemAddress jarg2_, long jarg3, String jarg4, long jarg5);
  public final static native void RakNetListSystemAddress_Insert__SWIG_1(long jarg1, RakNetListSystemAddress jarg1_, long jarg2, SystemAddress jarg2_, String jarg3, long jarg4);
  public final static native void RakNetListSystemAddress_Replace__SWIG_0(long jarg1, RakNetListSystemAddress jarg1_, long jarg2, SystemAddress jarg2_, long jarg3, SystemAddress jarg3_, long jarg4, String jarg5, long jarg6);
  public final static native void RakNetListSystemAddress_Replace__SWIG_1(long jarg1, RakNetListSystemAddress jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native void RakNetListSystemAddress_RemoveAtIndex(long jarg1, RakNetListSystemAddress jarg1_, long jarg2);
  public final static native void RakNetListSystemAddress_RemoveAtIndexFast(long jarg1, RakNetListSystemAddress jarg1_, long jarg2);
  public final static native void RakNetListSystemAddress_RemoveFromEnd__SWIG_0(long jarg1, RakNetListSystemAddress jarg1_, long jarg2);
  public final static native void RakNetListSystemAddress_RemoveFromEnd__SWIG_1(long jarg1, RakNetListSystemAddress jarg1_);
  public final static native long RakNetListSystemAddress_GetIndexOf(long jarg1, RakNetListSystemAddress jarg1_, long jarg2, SystemAddress jarg2_);
  public final static native long RakNetListSystemAddress_Size(long jarg1, RakNetListSystemAddress jarg1_);
  public final static native void RakNetListSystemAddress_Clear(long jarg1, RakNetListSystemAddress jarg1_, boolean jarg2, String jarg3, long jarg4);
  public final static native void RakNetListSystemAddress_Preallocate(long jarg1, RakNetListSystemAddress jarg1_, long jarg2, String jarg3, long jarg4);
  public final static native void RakNetListSystemAddress_Compress(long jarg1, RakNetListSystemAddress jarg1_, String jarg2, long jarg3);
  public final static native long new_RakNetListRakString__SWIG_0();
  public final static native void delete_RakNetListRakString(long jarg1);
  public final static native long new_RakNetListRakString__SWIG_1(long jarg1, RakNetListRakString jarg1_);
  public final static native long RakNetListRakString_Get(long jarg1, RakNetListRakString jarg1_, long jarg2);
  public final static native void RakNetListRakString_Push(long jarg1, RakNetListRakString jarg1_, long jarg2, RakString jarg2_, String jarg3, long jarg4);
  public final static native long RakNetListRakString_Pop(long jarg1, RakNetListRakString jarg1_);
  public final static native void RakNetListRakString_Insert__SWIG_0(long jarg1, RakNetListRakString jarg1_, long jarg2, RakString jarg2_, long jarg3, String jarg4, long jarg5);
  public final static native void RakNetListRakString_Insert__SWIG_1(long jarg1, RakNetListRakString jarg1_, long jarg2, RakString jarg2_, String jarg3, long jarg4);
  public final static native void RakNetListRakString_Replace__SWIG_0(long jarg1, RakNetListRakString jarg1_, long jarg2, RakString jarg2_, long jarg3, RakString jarg3_, long jarg4, String jarg5, long jarg6);
  public final static native void RakNetListRakString_Replace__SWIG_1(long jarg1, RakNetListRakString jarg1_, long jarg2, RakString jarg2_);
  public final static native void RakNetListRakString_RemoveAtIndex(long jarg1, RakNetListRakString jarg1_, long jarg2);
  public final static native void RakNetListRakString_RemoveAtIndexFast(long jarg1, RakNetListRakString jarg1_, long jarg2);
  public final static native void RakNetListRakString_RemoveFromEnd__SWIG_0(long jarg1, RakNetListRakString jarg1_, long jarg2);
  public final static native void RakNetListRakString_RemoveFromEnd__SWIG_1(long jarg1, RakNetListRakString jarg1_);
  public final static native long RakNetListRakString_GetIndexOf(long jarg1, RakNetListRakString jarg1_, long jarg2, RakString jarg2_);
  public final static native long RakNetListRakString_Size(long jarg1, RakNetListRakString jarg1_);
  public final static native void RakNetListRakString_Clear(long jarg1, RakNetListRakString jarg1_, boolean jarg2, String jarg3, long jarg4);
  public final static native void RakNetListRakString_Preallocate(long jarg1, RakNetListRakString jarg1_, long jarg2, String jarg3, long jarg4);
  public final static native void RakNetListRakString_Compress(long jarg1, RakNetListRakString jarg1_, String jarg2, long jarg3);
  public final static native long new_RakNetListCell__SWIG_0();
  public final static native void delete_RakNetListCell(long jarg1);
  public final static native long new_RakNetListCell__SWIG_1(long jarg1, RakNetListCell jarg1_);
  public final static native long RakNetListCell_Get(long jarg1, RakNetListCell jarg1_, long jarg2);
  public final static native void RakNetListCell_Push(long jarg1, RakNetListCell jarg1_, long jarg2, String jarg3, long jarg4);
  public final static native long RakNetListCell_Pop(long jarg1, RakNetListCell jarg1_);
  public final static native void RakNetListCell_Insert__SWIG_0(long jarg1, RakNetListCell jarg1_, long jarg2, long jarg3, String jarg4, long jarg5);
  public final static native void RakNetListCell_Insert__SWIG_1(long jarg1, RakNetListCell jarg1_, long jarg2, String jarg3, long jarg4);
  public final static native void RakNetListCell_Replace__SWIG_0(long jarg1, RakNetListCell jarg1_, long jarg2, long jarg3, long jarg4, String jarg5, long jarg6);
  public final static native void RakNetListCell_Replace__SWIG_1(long jarg1, RakNetListCell jarg1_, long jarg2);
  public final static native void RakNetListCell_RemoveAtIndex(long jarg1, RakNetListCell jarg1_, long jarg2);
  public final static native void RakNetListCell_RemoveAtIndexFast(long jarg1, RakNetListCell jarg1_, long jarg2);
  public final static native void RakNetListCell_RemoveFromEnd__SWIG_0(long jarg1, RakNetListCell jarg1_, long jarg2);
  public final static native void RakNetListCell_RemoveFromEnd__SWIG_1(long jarg1, RakNetListCell jarg1_);
  public final static native long RakNetListCell_Size(long jarg1, RakNetListCell jarg1_);
  public final static native void RakNetListCell_Clear(long jarg1, RakNetListCell jarg1_, boolean jarg2, String jarg3, long jarg4);
  public final static native void RakNetListCell_Preallocate(long jarg1, RakNetListCell jarg1_, long jarg2, String jarg3, long jarg4);
  public final static native void RakNetListCell_Compress(long jarg1, RakNetListCell jarg1_, String jarg2, long jarg3);
  public final static native long new_RakNetListColumnDescriptor__SWIG_0();
  public final static native void delete_RakNetListColumnDescriptor(long jarg1);
  public final static native long new_RakNetListColumnDescriptor__SWIG_1(long jarg1, RakNetListColumnDescriptor jarg1_);
  public final static native long RakNetListColumnDescriptor_Get(long jarg1, RakNetListColumnDescriptor jarg1_, long jarg2);
  public final static native void RakNetListColumnDescriptor_Push(long jarg1, RakNetListColumnDescriptor jarg1_, long jarg2, String jarg3, long jarg4);
  public final static native long RakNetListColumnDescriptor_Pop(long jarg1, RakNetListColumnDescriptor jarg1_);
  public final static native void RakNetListColumnDescriptor_Insert__SWIG_0(long jarg1, RakNetListColumnDescriptor jarg1_, long jarg2, long jarg3, String jarg4, long jarg5);
  public final static native void RakNetListColumnDescriptor_Insert__SWIG_1(long jarg1, RakNetListColumnDescriptor jarg1_, long jarg2, String jarg3, long jarg4);
  public final static native void RakNetListColumnDescriptor_Replace__SWIG_0(long jarg1, RakNetListColumnDescriptor jarg1_, long jarg2, long jarg3, long jarg4, String jarg5, long jarg6);
  public final static native void RakNetListColumnDescriptor_Replace__SWIG_1(long jarg1, RakNetListColumnDescriptor jarg1_, long jarg2);
  public final static native void RakNetListColumnDescriptor_RemoveAtIndex(long jarg1, RakNetListColumnDescriptor jarg1_, long jarg2);
  public final static native void RakNetListColumnDescriptor_RemoveAtIndexFast(long jarg1, RakNetListColumnDescriptor jarg1_, long jarg2);
  public final static native void RakNetListColumnDescriptor_RemoveFromEnd__SWIG_0(long jarg1, RakNetListColumnDescriptor jarg1_, long jarg2);
  public final static native void RakNetListColumnDescriptor_RemoveFromEnd__SWIG_1(long jarg1, RakNetListColumnDescriptor jarg1_);
  public final static native long RakNetListColumnDescriptor_Size(long jarg1, RakNetListColumnDescriptor jarg1_);
  public final static native void RakNetListColumnDescriptor_Clear(long jarg1, RakNetListColumnDescriptor jarg1_, boolean jarg2, String jarg3, long jarg4);
  public final static native void RakNetListColumnDescriptor_Preallocate(long jarg1, RakNetListColumnDescriptor jarg1_, long jarg2, String jarg3, long jarg4);
  public final static native void RakNetListColumnDescriptor_Compress(long jarg1, RakNetListColumnDescriptor jarg1_, String jarg2, long jarg3);
  public final static native long new_RakNetListTableRow__SWIG_0();
  public final static native void delete_RakNetListTableRow(long jarg1);
  public final static native long new_RakNetListTableRow__SWIG_1(long jarg1, RakNetListTableRow jarg1_);
  public final static native long RakNetListTableRow_Get(long jarg1, RakNetListTableRow jarg1_, long jarg2);
  public final static native void RakNetListTableRow_Push(long jarg1, RakNetListTableRow jarg1_, long jarg2, String jarg3, long jarg4);
  public final static native long RakNetListTableRow_Pop(long jarg1, RakNetListTableRow jarg1_);
  public final static native void RakNetListTableRow_Insert__SWIG_0(long jarg1, RakNetListTableRow jarg1_, long jarg2, long jarg3, String jarg4, long jarg5);
  public final static native void RakNetListTableRow_Insert__SWIG_1(long jarg1, RakNetListTableRow jarg1_, long jarg2, String jarg3, long jarg4);
  public final static native void RakNetListTableRow_Replace__SWIG_0(long jarg1, RakNetListTableRow jarg1_, long jarg2, long jarg3, long jarg4, String jarg5, long jarg6);
  public final static native void RakNetListTableRow_Replace__SWIG_1(long jarg1, RakNetListTableRow jarg1_, long jarg2);
  public final static native void RakNetListTableRow_RemoveAtIndex(long jarg1, RakNetListTableRow jarg1_, long jarg2);
  public final static native void RakNetListTableRow_RemoveAtIndexFast(long jarg1, RakNetListTableRow jarg1_, long jarg2);
  public final static native void RakNetListTableRow_RemoveFromEnd__SWIG_0(long jarg1, RakNetListTableRow jarg1_, long jarg2);
  public final static native void RakNetListTableRow_RemoveFromEnd__SWIG_1(long jarg1, RakNetListTableRow jarg1_);
  public final static native long RakNetListTableRow_Size(long jarg1, RakNetListTableRow jarg1_);
  public final static native void RakNetListTableRow_Clear(long jarg1, RakNetListTableRow jarg1_, boolean jarg2, String jarg3, long jarg4);
  public final static native void RakNetListTableRow_Preallocate(long jarg1, RakNetListTableRow jarg1_, long jarg2, String jarg3, long jarg4);
  public final static native void RakNetListTableRow_Compress(long jarg1, RakNetListTableRow jarg1_, String jarg2, long jarg3);
  public final static native long new_RakNetListFileListNode__SWIG_0();
  public final static native void delete_RakNetListFileListNode(long jarg1);
  public final static native long new_RakNetListFileListNode__SWIG_1(long jarg1, RakNetListFileListNode jarg1_);
  public final static native long RakNetListFileListNode_Get(long jarg1, RakNetListFileListNode jarg1_, long jarg2);
  public final static native void RakNetListFileListNode_Push(long jarg1, RakNetListFileListNode jarg1_, long jarg2, FileListNode jarg2_, String jarg3, long jarg4);
  public final static native long RakNetListFileListNode_Pop(long jarg1, RakNetListFileListNode jarg1_);
  public final static native void RakNetListFileListNode_Insert__SWIG_0(long jarg1, RakNetListFileListNode jarg1_, long jarg2, FileListNode jarg2_, long jarg3, String jarg4, long jarg5);
  public final static native void RakNetListFileListNode_Insert__SWIG_1(long jarg1, RakNetListFileListNode jarg1_, long jarg2, FileListNode jarg2_, String jarg3, long jarg4);
  public final static native void RakNetListFileListNode_Replace__SWIG_0(long jarg1, RakNetListFileListNode jarg1_, long jarg2, FileListNode jarg2_, long jarg3, FileListNode jarg3_, long jarg4, String jarg5, long jarg6);
  public final static native void RakNetListFileListNode_Replace__SWIG_1(long jarg1, RakNetListFileListNode jarg1_, long jarg2, FileListNode jarg2_);
  public final static native void RakNetListFileListNode_RemoveAtIndex(long jarg1, RakNetListFileListNode jarg1_, long jarg2);
  public final static native void RakNetListFileListNode_RemoveAtIndexFast(long jarg1, RakNetListFileListNode jarg1_, long jarg2);
  public final static native void RakNetListFileListNode_RemoveFromEnd__SWIG_0(long jarg1, RakNetListFileListNode jarg1_, long jarg2);
  public final static native void RakNetListFileListNode_RemoveFromEnd__SWIG_1(long jarg1, RakNetListFileListNode jarg1_);
  public final static native long RakNetListFileListNode_Size(long jarg1, RakNetListFileListNode jarg1_);
  public final static native void RakNetListFileListNode_Clear(long jarg1, RakNetListFileListNode jarg1_, boolean jarg2, String jarg3, long jarg4);
  public final static native void RakNetListFileListNode_Preallocate(long jarg1, RakNetListFileListNode jarg1_, long jarg2, String jarg3, long jarg4);
  public final static native void RakNetListFileListNode_Compress(long jarg1, RakNetListFileListNode jarg1_, String jarg2, long jarg3);
  public final static native long new_RakNetListFilterQuery__SWIG_0();
  public final static native void delete_RakNetListFilterQuery(long jarg1);
  public final static native long new_RakNetListFilterQuery__SWIG_1(long jarg1, RakNetListFilterQuery jarg1_);
  public final static native long RakNetListFilterQuery_Get(long jarg1, RakNetListFilterQuery jarg1_, long jarg2);
  public final static native void RakNetListFilterQuery_Push(long jarg1, RakNetListFilterQuery jarg1_, long jarg2, String jarg3, long jarg4);
  public final static native long RakNetListFilterQuery_Pop(long jarg1, RakNetListFilterQuery jarg1_);
  public final static native void RakNetListFilterQuery_Insert__SWIG_0(long jarg1, RakNetListFilterQuery jarg1_, long jarg2, long jarg3, String jarg4, long jarg5);
  public final static native void RakNetListFilterQuery_Insert__SWIG_1(long jarg1, RakNetListFilterQuery jarg1_, long jarg2, String jarg3, long jarg4);
  public final static native void RakNetListFilterQuery_Replace__SWIG_0(long jarg1, RakNetListFilterQuery jarg1_, long jarg2, long jarg3, long jarg4, String jarg5, long jarg6);
  public final static native void RakNetListFilterQuery_Replace__SWIG_1(long jarg1, RakNetListFilterQuery jarg1_, long jarg2);
  public final static native void RakNetListFilterQuery_RemoveAtIndex(long jarg1, RakNetListFilterQuery jarg1_, long jarg2);
  public final static native void RakNetListFilterQuery_RemoveAtIndexFast(long jarg1, RakNetListFilterQuery jarg1_, long jarg2);
  public final static native void RakNetListFilterQuery_RemoveFromEnd__SWIG_0(long jarg1, RakNetListFilterQuery jarg1_, long jarg2);
  public final static native void RakNetListFilterQuery_RemoveFromEnd__SWIG_1(long jarg1, RakNetListFilterQuery jarg1_);
  public final static native long RakNetListFilterQuery_Size(long jarg1, RakNetListFilterQuery jarg1_);
  public final static native void RakNetListFilterQuery_Clear(long jarg1, RakNetListFilterQuery jarg1_, boolean jarg2, String jarg3, long jarg4);
  public final static native void RakNetListFilterQuery_Preallocate(long jarg1, RakNetListFilterQuery jarg1_, long jarg2, String jarg3, long jarg4);
  public final static native void RakNetListFilterQuery_Compress(long jarg1, RakNetListFilterQuery jarg1_, String jarg2, long jarg3);
  public final static native long new_RakNetListSortQuery__SWIG_0();
  public final static native void delete_RakNetListSortQuery(long jarg1);
  public final static native long new_RakNetListSortQuery__SWIG_1(long jarg1, RakNetListSortQuery jarg1_);
  public final static native long RakNetListSortQuery_Get(long jarg1, RakNetListSortQuery jarg1_, long jarg2);
  public final static native void RakNetListSortQuery_Push(long jarg1, RakNetListSortQuery jarg1_, long jarg2, String jarg3, long jarg4);
  public final static native long RakNetListSortQuery_Pop(long jarg1, RakNetListSortQuery jarg1_);
  public final static native void RakNetListSortQuery_Insert__SWIG_0(long jarg1, RakNetListSortQuery jarg1_, long jarg2, long jarg3, String jarg4, long jarg5);
  public final static native void RakNetListSortQuery_Insert__SWIG_1(long jarg1, RakNetListSortQuery jarg1_, long jarg2, String jarg3, long jarg4);
  public final static native void RakNetListSortQuery_Replace__SWIG_0(long jarg1, RakNetListSortQuery jarg1_, long jarg2, long jarg3, long jarg4, String jarg5, long jarg6);
  public final static native void RakNetListSortQuery_Replace__SWIG_1(long jarg1, RakNetListSortQuery jarg1_, long jarg2);
  public final static native void RakNetListSortQuery_RemoveAtIndex(long jarg1, RakNetListSortQuery jarg1_, long jarg2);
  public final static native void RakNetListSortQuery_RemoveAtIndexFast(long jarg1, RakNetListSortQuery jarg1_, long jarg2);
  public final static native void RakNetListSortQuery_RemoveFromEnd__SWIG_0(long jarg1, RakNetListSortQuery jarg1_, long jarg2);
  public final static native void RakNetListSortQuery_RemoveFromEnd__SWIG_1(long jarg1, RakNetListSortQuery jarg1_);
  public final static native long RakNetListSortQuery_Size(long jarg1, RakNetListSortQuery jarg1_);
  public final static native void RakNetListSortQuery_Clear(long jarg1, RakNetListSortQuery jarg1_, boolean jarg2, String jarg3, long jarg4);
  public final static native void RakNetListSortQuery_Preallocate(long jarg1, RakNetListSortQuery jarg1_, long jarg2, String jarg3, long jarg4);
  public final static native void RakNetListSortQuery_Compress(long jarg1, RakNetListSortQuery jarg1_, String jarg2, long jarg3);
  public final static native long new_RakNetListCellPointer__SWIG_0();
  public final static native void delete_RakNetListCellPointer(long jarg1);
  public final static native long new_RakNetListCellPointer__SWIG_1(long jarg1, RakNetListCellPointer jarg1_);
  public final static native void RakNetListCellPointer_Push(long jarg1, RakNetListCellPointer jarg1_, long jarg2, String jarg3, long jarg4);
  public final static native void RakNetListCellPointer_Insert__SWIG_0(long jarg1, RakNetListCellPointer jarg1_, long jarg2, long jarg3, String jarg4, long jarg5);
  public final static native void RakNetListCellPointer_Insert__SWIG_1(long jarg1, RakNetListCellPointer jarg1_, long jarg2, String jarg3, long jarg4);
  public final static native void RakNetListCellPointer_Replace__SWIG_0(long jarg1, RakNetListCellPointer jarg1_, long jarg2, long jarg3, long jarg4, String jarg5, long jarg6);
  public final static native void RakNetListCellPointer_Replace__SWIG_1(long jarg1, RakNetListCellPointer jarg1_, long jarg2);
  public final static native void RakNetListCellPointer_RemoveAtIndex(long jarg1, RakNetListCellPointer jarg1_, long jarg2);
  public final static native void RakNetListCellPointer_RemoveAtIndexFast(long jarg1, RakNetListCellPointer jarg1_, long jarg2);
  public final static native void RakNetListCellPointer_RemoveFromEnd__SWIG_0(long jarg1, RakNetListCellPointer jarg1_, long jarg2);
  public final static native void RakNetListCellPointer_RemoveFromEnd__SWIG_1(long jarg1, RakNetListCellPointer jarg1_);
  public final static native long RakNetListCellPointer_GetIndexOf(long jarg1, RakNetListCellPointer jarg1_, long jarg2);
  public final static native long RakNetListCellPointer_Size(long jarg1, RakNetListCellPointer jarg1_);
  public final static native void RakNetListCellPointer_Clear(long jarg1, RakNetListCellPointer jarg1_, boolean jarg2, String jarg3, long jarg4);
  public final static native void RakNetListCellPointer_Preallocate(long jarg1, RakNetListCellPointer jarg1_, long jarg2, String jarg3, long jarg4);
  public final static native void RakNetListCellPointer_Compress(long jarg1, RakNetListCellPointer jarg1_, String jarg2, long jarg3);
  public final static native long RakNetListCellPointer_GetHelper(long jarg1, RakNetListCellPointer jarg1_, long jarg2);
  public final static native long RakNetListCellPointer_PopHelper(long jarg1, RakNetListCellPointer jarg1_);
  public final static native void RakNetPageRow_isLeaf_set(long jarg1, RakNetPageRow jarg1_, boolean jarg2);
  public final static native boolean RakNetPageRow_isLeaf_get(long jarg1, RakNetPageRow jarg1_);
  public final static native void RakNetPageRow_size_set(long jarg1, RakNetPageRow jarg1_, int jarg2);
  public final static native int RakNetPageRow_size_get(long jarg1, RakNetPageRow jarg1_);
  public final static native void RakNetPageRow_next_set(long jarg1, RakNetPageRow jarg1_, long jarg2, RakNetPageRow jarg2_);
  public final static native long RakNetPageRow_next_get(long jarg1, RakNetPageRow jarg1_);
  public final static native void RakNetPageRow_previous_set(long jarg1, RakNetPageRow jarg1_, long jarg2, RakNetPageRow jarg2_);
  public final static native long RakNetPageRow_previous_get(long jarg1, RakNetPageRow jarg1_);
  public final static native long new_RakNetPageRow();
  public final static native void delete_RakNetPageRow(long jarg1);
  public final static native void RakNetBPlusTreeRow_ReturnAction_key1_set(long jarg1, RakNetBPlusTreeRow.ReturnAction jarg1_, long jarg2);
  public final static native long RakNetBPlusTreeRow_ReturnAction_key1_get(long jarg1, RakNetBPlusTreeRow.ReturnAction jarg1_);
  public final static native void RakNetBPlusTreeRow_ReturnAction_key2_set(long jarg1, RakNetBPlusTreeRow.ReturnAction jarg1_, long jarg2);
  public final static native long RakNetBPlusTreeRow_ReturnAction_key2_get(long jarg1, RakNetBPlusTreeRow.ReturnAction jarg1_);
  public final static native int RakNetBPlusTreeRow_ReturnAction_NO_ACTION_get();
  public final static native int RakNetBPlusTreeRow_ReturnAction_REPLACE_KEY1_WITH_KEY2_get();
  public final static native int RakNetBPlusTreeRow_ReturnAction_PUSH_KEY_TO_PARENT_get();
  public final static native int RakNetBPlusTreeRow_ReturnAction_SET_BRANCH_KEY_get();
  public final static native void RakNetBPlusTreeRow_ReturnAction_action_set(long jarg1, RakNetBPlusTreeRow.ReturnAction jarg1_, int jarg2);
  public final static native int RakNetBPlusTreeRow_ReturnAction_action_get(long jarg1, RakNetBPlusTreeRow.ReturnAction jarg1_);
  public final static native long new_RakNetBPlusTreeRow_ReturnAction();
  public final static native void delete_RakNetBPlusTreeRow_ReturnAction(long jarg1);
  public final static native long new_RakNetBPlusTreeRow();
  public final static native void delete_RakNetBPlusTreeRow(long jarg1);
  public final static native void RakNetBPlusTreeRow_SetPoolPageSize(long jarg1, RakNetBPlusTreeRow jarg1_, int jarg2);
  public final static native boolean RakNetBPlusTreeRow_Insert(long jarg1, RakNetBPlusTreeRow jarg1_, long jarg2, long jarg3, Table.Row jarg3_);
  public final static native void RakNetBPlusTreeRow_Clear(long jarg1, RakNetBPlusTreeRow jarg1_);
  public final static native long RakNetBPlusTreeRow_Size(long jarg1, RakNetBPlusTreeRow jarg1_);
  public final static native boolean RakNetBPlusTreeRow_IsEmpty(long jarg1, RakNetBPlusTreeRow jarg1_);
  public final static native long RakNetBPlusTreeRow_GetListHead(long jarg1, RakNetBPlusTreeRow jarg1_);
  public final static native long RakNetBPlusTreeRow_GetDataHead(long jarg1, RakNetBPlusTreeRow jarg1_);
  public final static native void RakNetBPlusTreeRow_PrintLeaves(long jarg1, RakNetBPlusTreeRow jarg1_);
  public final static native void RakNetBPlusTreeRow_PrintGraph(long jarg1, RakNetBPlusTreeRow jarg1_);
  public final static native long RakPeer_SWIGUpcast(long jarg1);
  public final static native long PacketLogger_SWIGUpcast(long jarg1);
  public final static native long PacketFileLogger_SWIGUpcast(long jarg1);
  public final static native long NatTypeDetectionClient_SWIGUpcast(long jarg1);
  public final static native long NatPunchthroughDebugInterface_Printf_SWIGUpcast(long jarg1);
  public final static native long NatPunchthroughDebugInterface_PacketLogger_SWIGUpcast(long jarg1);
  public final static native long NatPunchthroughClient_SWIGUpcast(long jarg1);
  public final static native long Router2_SWIGUpcast(long jarg1);
  public final static native long UDPProxyClient_SWIGUpcast(long jarg1);
  public final static native long FullyConnectedMesh2_SWIGUpcast(long jarg1);
  public final static native long ReadyEvent_SWIGUpcast(long jarg1);
  public final static native long NatPunchthroughServerDebugInterface_Printf_SWIGUpcast(long jarg1);
  public final static native long NatPunchthroughServerDebugInterface_PacketLogger_SWIGUpcast(long jarg1);
  public final static native long NatPunchthroughServer_SWIGUpcast(long jarg1);
  public final static native long UDPProxyServer_SWIGUpcast(long jarg1);
  public final static native long UDPProxyCoordinator_SWIGUpcast(long jarg1);
  public final static native long NatTypeDetectionServer_SWIGUpcast(long jarg1);
  public final static native long FLP_Printf_SWIGUpcast(long jarg1);
  public final static native long LogCommandParser_SWIGUpcast(long jarg1);
  public final static native long MessageFilter_SWIGUpcast(long jarg1);
  public final static native long DirectoryDeltaTransfer_SWIGUpcast(long jarg1);
  public final static native long FileListTransfer_SWIGUpcast(long jarg1);
  public final static native long ThreadsafePacketLogger_SWIGUpcast(long jarg1);
  public final static native long PacketConsoleLogger_SWIGUpcast(long jarg1);
  public final static native long ConnectionGraph2_SWIGUpcast(long jarg1);
}
