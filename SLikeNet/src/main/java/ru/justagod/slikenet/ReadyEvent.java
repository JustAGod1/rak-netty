/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package ru.justagod.slikenet;

public class ReadyEvent extends PluginInterface2 {
  private transient long swigCPtr;

  protected ReadyEvent(long cPtr, boolean cMemoryOwn) {
    super(SLikeNetJNI.ReadyEvent_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(ReadyEvent obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        SLikeNetJNI.delete_ReadyEvent(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static ReadyEvent GetInstance() {
    long cPtr = SLikeNetJNI.ReadyEvent_GetInstance();
    return (cPtr == 0) ? null : new ReadyEvent(cPtr, false);
  }

  public static void DestroyInstance(ReadyEvent i) {
    SLikeNetJNI.ReadyEvent_DestroyInstance(ReadyEvent.getCPtr(i), i);
  }

  public ReadyEvent() {
    this(SLikeNetJNI.new_ReadyEvent(), true);
  }

  public boolean SetEvent(int eventId, boolean isReady) {
    return SLikeNetJNI.ReadyEvent_SetEvent(swigCPtr, this, eventId, isReady);
  }

  public void ForceCompletion(int eventId) {
    SLikeNetJNI.ReadyEvent_ForceCompletion(swigCPtr, this, eventId);
  }

  public boolean DeleteEvent(int eventId) {
    return SLikeNetJNI.ReadyEvent_DeleteEvent(swigCPtr, this, eventId);
  }

  public boolean IsEventSet(int eventId) {
    return SLikeNetJNI.ReadyEvent_IsEventSet(swigCPtr, this, eventId);
  }

  public boolean IsEventCompletionProcessing(int eventId) {
    return SLikeNetJNI.ReadyEvent_IsEventCompletionProcessing(swigCPtr, this, eventId);
  }

  public boolean IsEventCompleted(int eventId) {
    return SLikeNetJNI.ReadyEvent_IsEventCompleted(swigCPtr, this, eventId);
  }

  public boolean HasEvent(int eventId) {
    return SLikeNetJNI.ReadyEvent_HasEvent(swigCPtr, this, eventId);
  }

  public long GetEventListSize() {
    return SLikeNetJNI.ReadyEvent_GetEventListSize(swigCPtr, this);
  }

  public int GetEventAtIndex(long index) {
    return SLikeNetJNI.ReadyEvent_GetEventAtIndex(swigCPtr, this, index);
  }

  public boolean AddToWaitList(int eventId, RakNetGUID guid) {
    return SLikeNetJNI.ReadyEvent_AddToWaitList(swigCPtr, this, eventId, RakNetGUID.getCPtr(guid), guid);
  }

  public boolean RemoveFromWaitList(int eventId, RakNetGUID guid) {
    return SLikeNetJNI.ReadyEvent_RemoveFromWaitList(swigCPtr, this, eventId, RakNetGUID.getCPtr(guid), guid);
  }

  public boolean IsInWaitList(int eventId, RakNetGUID guid) {
    return SLikeNetJNI.ReadyEvent_IsInWaitList(swigCPtr, this, eventId, RakNetGUID.getCPtr(guid), guid);
  }

  public long GetRemoteWaitListSize(int eventId) {
    return SLikeNetJNI.ReadyEvent_GetRemoteWaitListSize(swigCPtr, this, eventId);
  }

  public RakNetGUID GetFromWaitListAtIndex(int eventId, long index) {
    return new RakNetGUID(SLikeNetJNI.ReadyEvent_GetFromWaitListAtIndex(swigCPtr, this, eventId, index), true);
  }

  public ReadyEventSystemStatus GetReadyStatus(int eventId, RakNetGUID guid) {
    return ReadyEventSystemStatus.swigToEnum(SLikeNetJNI.ReadyEvent_GetReadyStatus(swigCPtr, this, eventId, RakNetGUID.getCPtr(guid), guid));
  }

  public void SetSendChannel(short newChannel) {
    SLikeNetJNI.ReadyEvent_SetSendChannel(swigCPtr, this, newChannel);
  }

  public static int RemoteSystemCompByGuid(RakNetGUID key, SWIGTYPE_p_SLNet__ReadyEvent__RemoteSystem data) {
    return SLikeNetJNI.ReadyEvent_RemoteSystemCompByGuid(RakNetGUID.getCPtr(key), key, SWIGTYPE_p_SLNet__ReadyEvent__RemoteSystem.getCPtr(data));
  }

}
