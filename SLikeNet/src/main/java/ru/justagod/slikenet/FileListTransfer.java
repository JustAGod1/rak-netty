/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package ru.justagod.slikenet;

public class FileListTransfer extends PluginInterface2 {
  private transient long swigCPtr;

  protected FileListTransfer(long cPtr, boolean cMemoryOwn) {
    super(SLikeNetJNI.FileListTransfer_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(FileListTransfer obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        SLikeNetJNI.delete_FileListTransfer(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static FileListTransfer GetInstance() {
    long cPtr = SLikeNetJNI.FileListTransfer_GetInstance();
    return (cPtr == 0) ? null : new FileListTransfer(cPtr, false);
  }

  public static void DestroyInstance(FileListTransfer i) {
    SLikeNetJNI.FileListTransfer_DestroyInstance(FileListTransfer.getCPtr(i), i);
  }

  public FileListTransfer() {
    this(SLikeNetJNI.new_FileListTransfer(), true);
  }

  public void StartIncrementalReadThreads(int numThreads, int threadPriority) {
    SLikeNetJNI.FileListTransfer_StartIncrementalReadThreads__SWIG_0(swigCPtr, this, numThreads, threadPriority);
  }

  public void StartIncrementalReadThreads(int numThreads) {
    SLikeNetJNI.FileListTransfer_StartIncrementalReadThreads__SWIG_1(swigCPtr, this, numThreads);
  }

  public int SetupReceive(FileListTransferCBInterface handler, boolean deleteHandler, SystemAddress allowedSender) {
    return SLikeNetJNI.FileListTransfer_SetupReceive(swigCPtr, this, FileListTransferCBInterface.getCPtr(handler), handler, deleteHandler, SystemAddress.getCPtr(allowedSender), allowedSender);
  }

  public void Send(FileList fileList, RakPeerInterface rakPeer, SystemAddress recipient, int setID, PacketPriority priority, char orderingChannel, IncrementalReadInterface _incrementalReadInterface, long _chunkSize) {
    SLikeNetJNI.FileListTransfer_Send__SWIG_0(swigCPtr, this, FileList.getCPtr(fileList), fileList, RakPeerInterface.getCPtr(rakPeer), rakPeer, SystemAddress.getCPtr(recipient), recipient, setID, priority.swigValue(), orderingChannel, IncrementalReadInterface.getCPtr(_incrementalReadInterface), _incrementalReadInterface, _chunkSize);
  }

  public void Send(FileList fileList, RakPeerInterface rakPeer, SystemAddress recipient, int setID, PacketPriority priority, char orderingChannel, IncrementalReadInterface _incrementalReadInterface) {
    SLikeNetJNI.FileListTransfer_Send__SWIG_1(swigCPtr, this, FileList.getCPtr(fileList), fileList, RakPeerInterface.getCPtr(rakPeer), rakPeer, SystemAddress.getCPtr(recipient), recipient, setID, priority.swigValue(), orderingChannel, IncrementalReadInterface.getCPtr(_incrementalReadInterface), _incrementalReadInterface);
  }

  public void Send(FileList fileList, RakPeerInterface rakPeer, SystemAddress recipient, int setID, PacketPriority priority, char orderingChannel) {
    SLikeNetJNI.FileListTransfer_Send__SWIG_2(swigCPtr, this, FileList.getCPtr(fileList), fileList, RakPeerInterface.getCPtr(rakPeer), rakPeer, SystemAddress.getCPtr(recipient), recipient, setID, priority.swigValue(), orderingChannel);
  }

  public long GetPendingFilesToAddress(SystemAddress recipient) {
    return SLikeNetJNI.FileListTransfer_GetPendingFilesToAddress(swigCPtr, this, SystemAddress.getCPtr(recipient), recipient);
  }

  public void CancelReceive(int inSetId) {
    SLikeNetJNI.FileListTransfer_CancelReceive(swigCPtr, this, inSetId);
  }

  public void RemoveReceiver(SystemAddress systemAddress) {
    SLikeNetJNI.FileListTransfer_RemoveReceiver(swigCPtr, this, SystemAddress.getCPtr(systemAddress), systemAddress);
  }

  public boolean IsHandlerActive(int inSetId) {
    return SLikeNetJNI.FileListTransfer_IsHandlerActive(swigCPtr, this, inSetId);
  }

  public void AddCallback(FileListProgress cb) {
    SLikeNetJNI.FileListTransfer_AddCallback(swigCPtr, this, FileListProgress.getCPtr(cb), cb);
  }

  public void RemoveCallback(FileListProgress cb) {
    SLikeNetJNI.FileListTransfer_RemoveCallback(swigCPtr, this, FileListProgress.getCPtr(cb), cb);
  }

  public void ClearCallbacks() {
    SLikeNetJNI.FileListTransfer_ClearCallbacks(swigCPtr, this);
  }

}
