/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package ru.justagod.slikenet;

public class RakPeerInterface {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected RakPeerInterface(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(RakPeerInterface obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        SLikeNetJNI.delete_RakPeerInterface(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public static RakPeerInterface GetInstance() {
    long cPtr = SLikeNetJNI.RakPeerInterface_GetInstance();
    return (cPtr == 0) ? null : new RakPeerInterface(cPtr, false);
  }

  public static void DestroyInstance(RakPeerInterface i) {
    SLikeNetJNI.RakPeerInterface_DestroyInstance(RakPeerInterface.getCPtr(i), i);
  }

  public StartupResult Startup(long maxConnections, SocketDescriptor socketDescriptors, long socketDescriptorCount, int threadPriority) {
    return StartupResult.swigToEnum(SLikeNetJNI.RakPeerInterface_Startup__SWIG_0(swigCPtr, this, maxConnections, SocketDescriptor.getCPtr(socketDescriptors), socketDescriptors, socketDescriptorCount, threadPriority));
  }

  public StartupResult Startup(long maxConnections, SocketDescriptor socketDescriptors, long socketDescriptorCount) {
    return StartupResult.swigToEnum(SLikeNetJNI.RakPeerInterface_Startup__SWIG_1(swigCPtr, this, maxConnections, SocketDescriptor.getCPtr(socketDescriptors), socketDescriptors, socketDescriptorCount));
  }

  public boolean InitializeSecurity(String publicKey, String privateKey, boolean bRequireClientKey) {
    return SLikeNetJNI.RakPeerInterface_InitializeSecurity__SWIG_0(swigCPtr, this, publicKey, privateKey, bRequireClientKey);
  }

  public boolean InitializeSecurity(String publicKey, String privateKey) {
    return SLikeNetJNI.RakPeerInterface_InitializeSecurity__SWIG_1(swigCPtr, this, publicKey, privateKey);
  }

  public void DisableSecurity() {
    SLikeNetJNI.RakPeerInterface_DisableSecurity(swigCPtr, this);
  }

  public void AddToSecurityExceptionList(String ip) {
    SLikeNetJNI.RakPeerInterface_AddToSecurityExceptionList(swigCPtr, this, ip);
  }

  public void RemoveFromSecurityExceptionList(String ip) {
    SLikeNetJNI.RakPeerInterface_RemoveFromSecurityExceptionList(swigCPtr, this, ip);
  }

  public boolean IsInSecurityExceptionList(String ip) {
    return SLikeNetJNI.RakPeerInterface_IsInSecurityExceptionList(swigCPtr, this, ip);
  }

  public void SetMaximumIncomingConnections(int numberAllowed) {
    SLikeNetJNI.RakPeerInterface_SetMaximumIncomingConnections(swigCPtr, this, numberAllowed);
  }

  public long GetMaximumIncomingConnections() {
    return SLikeNetJNI.RakPeerInterface_GetMaximumIncomingConnections(swigCPtr, this);
  }

  public int NumberOfConnections() {
    return SLikeNetJNI.RakPeerInterface_NumberOfConnections(swigCPtr, this);
  }

  public void SetIncomingPassword(String passwordData, int passwordDataLength) {
    SLikeNetJNI.RakPeerInterface_SetIncomingPassword(swigCPtr, this, passwordData, passwordDataLength);
  }

  public ConnectionAttemptResult Connect(String host, int remotePort, String passwordData, int passwordDataLength, PublicKey publicKey, long connectionSocketIndex, long sendConnectionAttemptCount, long timeBetweenSendConnectionAttemptsMS, SWIGTYPE_p_unsigned___int32 timeoutTime) {
    return ConnectionAttemptResult.swigToEnum(SLikeNetJNI.RakPeerInterface_Connect__SWIG_0(swigCPtr, this, host, remotePort, passwordData, passwordDataLength, PublicKey.getCPtr(publicKey), publicKey, connectionSocketIndex, sendConnectionAttemptCount, timeBetweenSendConnectionAttemptsMS, SWIGTYPE_p_unsigned___int32.getCPtr(timeoutTime)));
  }

  public ConnectionAttemptResult Connect(String host, int remotePort, String passwordData, int passwordDataLength, PublicKey publicKey, long connectionSocketIndex, long sendConnectionAttemptCount, long timeBetweenSendConnectionAttemptsMS) {
    return ConnectionAttemptResult.swigToEnum(SLikeNetJNI.RakPeerInterface_Connect__SWIG_1(swigCPtr, this, host, remotePort, passwordData, passwordDataLength, PublicKey.getCPtr(publicKey), publicKey, connectionSocketIndex, sendConnectionAttemptCount, timeBetweenSendConnectionAttemptsMS));
  }

  public ConnectionAttemptResult Connect(String host, int remotePort, String passwordData, int passwordDataLength, PublicKey publicKey, long connectionSocketIndex, long sendConnectionAttemptCount) {
    return ConnectionAttemptResult.swigToEnum(SLikeNetJNI.RakPeerInterface_Connect__SWIG_2(swigCPtr, this, host, remotePort, passwordData, passwordDataLength, PublicKey.getCPtr(publicKey), publicKey, connectionSocketIndex, sendConnectionAttemptCount));
  }

  public ConnectionAttemptResult Connect(String host, int remotePort, String passwordData, int passwordDataLength, PublicKey publicKey, long connectionSocketIndex) {
    return ConnectionAttemptResult.swigToEnum(SLikeNetJNI.RakPeerInterface_Connect__SWIG_3(swigCPtr, this, host, remotePort, passwordData, passwordDataLength, PublicKey.getCPtr(publicKey), publicKey, connectionSocketIndex));
  }

  public ConnectionAttemptResult Connect(String host, int remotePort, String passwordData, int passwordDataLength, PublicKey publicKey) {
    return ConnectionAttemptResult.swigToEnum(SLikeNetJNI.RakPeerInterface_Connect__SWIG_4(swigCPtr, this, host, remotePort, passwordData, passwordDataLength, PublicKey.getCPtr(publicKey), publicKey));
  }

  public ConnectionAttemptResult Connect(String host, int remotePort, String passwordData, int passwordDataLength) {
    return ConnectionAttemptResult.swigToEnum(SLikeNetJNI.RakPeerInterface_Connect__SWIG_5(swigCPtr, this, host, remotePort, passwordData, passwordDataLength));
  }

  public void Shutdown(long blockDuration, short orderingChannel, PacketPriority disconnectionNotificationPriority) {
    SLikeNetJNI.RakPeerInterface_Shutdown__SWIG_0(swigCPtr, this, blockDuration, orderingChannel, disconnectionNotificationPriority.swigValue());
  }

  public void Shutdown(long blockDuration, short orderingChannel) {
    SLikeNetJNI.RakPeerInterface_Shutdown__SWIG_1(swigCPtr, this, blockDuration, orderingChannel);
  }

  public void Shutdown(long blockDuration) {
    SLikeNetJNI.RakPeerInterface_Shutdown__SWIG_2(swigCPtr, this, blockDuration);
  }

  public boolean IsActive() {
    return SLikeNetJNI.RakPeerInterface_IsActive(swigCPtr, this);
  }

  public SWIGTYPE_p_unsigned___int32 GetNextSendReceipt() {
    return new SWIGTYPE_p_unsigned___int32(SLikeNetJNI.RakPeerInterface_GetNextSendReceipt(swigCPtr, this), true);
  }

  public SWIGTYPE_p_unsigned___int32 IncrementNextSendReceipt() {
    return new SWIGTYPE_p_unsigned___int32(SLikeNetJNI.RakPeerInterface_IncrementNextSendReceipt(swigCPtr, this), true);
  }

  public SWIGTYPE_p_unsigned___int32 Send(String data, int length, PacketPriority priority, PacketReliability reliability, char orderingChannel, AddressOrGUID systemIdentifier, boolean broadcast, SWIGTYPE_p_unsigned___int32 forceReceiptNumber) {
    return new SWIGTYPE_p_unsigned___int32(SLikeNetJNI.RakPeerInterface_Send__SWIG_0(swigCPtr, this, data, length, priority.swigValue(), reliability.swigValue(), orderingChannel, AddressOrGUID.getCPtr(systemIdentifier), systemIdentifier, broadcast, SWIGTYPE_p_unsigned___int32.getCPtr(forceReceiptNumber)), true);
  }

  public SWIGTYPE_p_unsigned___int32 Send(String data, int length, PacketPriority priority, PacketReliability reliability, char orderingChannel, AddressOrGUID systemIdentifier, boolean broadcast) {
    return new SWIGTYPE_p_unsigned___int32(SLikeNetJNI.RakPeerInterface_Send__SWIG_1(swigCPtr, this, data, length, priority.swigValue(), reliability.swigValue(), orderingChannel, AddressOrGUID.getCPtr(systemIdentifier), systemIdentifier, broadcast), true);
  }

  public void SendLoopback(String data, int length) {
    SLikeNetJNI.RakPeerInterface_SendLoopback(swigCPtr, this, data, length);
  }

  public SWIGTYPE_p_unsigned___int32 Send(BitStream bitStream, PacketPriority priority, PacketReliability reliability, char orderingChannel, AddressOrGUID systemIdentifier, boolean broadcast, SWIGTYPE_p_unsigned___int32 forceReceiptNumber) {
    return new SWIGTYPE_p_unsigned___int32(SLikeNetJNI.RakPeerInterface_Send__SWIG_2(swigCPtr, this, BitStream.getCPtr(bitStream), bitStream, priority.swigValue(), reliability.swigValue(), orderingChannel, AddressOrGUID.getCPtr(systemIdentifier), systemIdentifier, broadcast, SWIGTYPE_p_unsigned___int32.getCPtr(forceReceiptNumber)), true);
  }

  public SWIGTYPE_p_unsigned___int32 Send(BitStream bitStream, PacketPriority priority, PacketReliability reliability, char orderingChannel, AddressOrGUID systemIdentifier, boolean broadcast) {
    return new SWIGTYPE_p_unsigned___int32(SLikeNetJNI.RakPeerInterface_Send__SWIG_3(swigCPtr, this, BitStream.getCPtr(bitStream), bitStream, priority.swigValue(), reliability.swigValue(), orderingChannel, AddressOrGUID.getCPtr(systemIdentifier), systemIdentifier, broadcast), true);
  }

  public Packet Receive() {
    long cPtr = SLikeNetJNI.RakPeerInterface_Receive(swigCPtr, this);
    return (cPtr == 0) ? null : new Packet(cPtr, false);
  }

  public void DeallocatePacket(Packet packet) {
    SLikeNetJNI.RakPeerInterface_DeallocatePacket(swigCPtr, this, Packet.getCPtr(packet), packet);
  }

  public long GetMaximumNumberOfPeers() {
    return SLikeNetJNI.RakPeerInterface_GetMaximumNumberOfPeers(swigCPtr, this);
  }

  public void CloseConnection(AddressOrGUID target, boolean sendDisconnectionNotification, short orderingChannel, PacketPriority disconnectionNotificationPriority) {
    SLikeNetJNI.RakPeerInterface_CloseConnection__SWIG_0(swigCPtr, this, AddressOrGUID.getCPtr(target), target, sendDisconnectionNotification, orderingChannel, disconnectionNotificationPriority.swigValue());
  }

  public void CloseConnection(AddressOrGUID target, boolean sendDisconnectionNotification, short orderingChannel) {
    SLikeNetJNI.RakPeerInterface_CloseConnection__SWIG_1(swigCPtr, this, AddressOrGUID.getCPtr(target), target, sendDisconnectionNotification, orderingChannel);
  }

  public void CloseConnection(AddressOrGUID target, boolean sendDisconnectionNotification) {
    SLikeNetJNI.RakPeerInterface_CloseConnection__SWIG_2(swigCPtr, this, AddressOrGUID.getCPtr(target), target, sendDisconnectionNotification);
  }

  public ConnectionState GetConnectionState(AddressOrGUID systemIdentifier) {
    return ConnectionState.swigToEnum(SLikeNetJNI.RakPeerInterface_GetConnectionState(swigCPtr, this, AddressOrGUID.getCPtr(systemIdentifier), systemIdentifier));
  }

  public void CancelConnectionAttempt(SystemAddress target) {
    SLikeNetJNI.RakPeerInterface_CancelConnectionAttempt(swigCPtr, this, SystemAddress.getCPtr(target), target);
  }

  public int GetIndexFromSystemAddress(SystemAddress systemAddress) {
    return SLikeNetJNI.RakPeerInterface_GetIndexFromSystemAddress(swigCPtr, this, SystemAddress.getCPtr(systemAddress), systemAddress);
  }

  public SystemAddress GetSystemAddressFromIndex(long index) {
    return new SystemAddress(SLikeNetJNI.RakPeerInterface_GetSystemAddressFromIndex(swigCPtr, this, index), true);
  }

  public RakNetGUID GetGUIDFromIndex(long index) {
    return new RakNetGUID(SLikeNetJNI.RakPeerInterface_GetGUIDFromIndex(swigCPtr, this, index), true);
  }

  public void GetSystemList(RakNetListSystemAddress addresses, RakNetListRakNetGUID guids) {
    SLikeNetJNI.RakPeerInterface_GetSystemList(swigCPtr, this, RakNetListSystemAddress.getCPtr(addresses), addresses, RakNetListRakNetGUID.getCPtr(guids), guids);
  }

  public void AddToBanList(String IP, SWIGTYPE_p_unsigned___int32 milliseconds) {
    SLikeNetJNI.RakPeerInterface_AddToBanList__SWIG_0(swigCPtr, this, IP, SWIGTYPE_p_unsigned___int32.getCPtr(milliseconds));
  }

  public void AddToBanList(String IP) {
    SLikeNetJNI.RakPeerInterface_AddToBanList__SWIG_1(swigCPtr, this, IP);
  }

  public void RemoveFromBanList(String IP) {
    SLikeNetJNI.RakPeerInterface_RemoveFromBanList(swigCPtr, this, IP);
  }

  public void ClearBanList() {
    SLikeNetJNI.RakPeerInterface_ClearBanList(swigCPtr, this);
  }

  public boolean IsBanned(String IP) {
    return SLikeNetJNI.RakPeerInterface_IsBanned(swigCPtr, this, IP);
  }

  public void SetLimitIPConnectionFrequency(boolean b) {
    SLikeNetJNI.RakPeerInterface_SetLimitIPConnectionFrequency(swigCPtr, this, b);
  }

  public void Ping(SystemAddress target) {
    SLikeNetJNI.RakPeerInterface_Ping__SWIG_0(swigCPtr, this, SystemAddress.getCPtr(target), target);
  }

  public boolean Ping(String host, int remotePort, boolean onlyReplyOnAcceptingConnections, long connectionSocketIndex) {
    return SLikeNetJNI.RakPeerInterface_Ping__SWIG_1(swigCPtr, this, host, remotePort, onlyReplyOnAcceptingConnections, connectionSocketIndex);
  }

  public boolean Ping(String host, int remotePort, boolean onlyReplyOnAcceptingConnections) {
    return SLikeNetJNI.RakPeerInterface_Ping__SWIG_2(swigCPtr, this, host, remotePort, onlyReplyOnAcceptingConnections);
  }

  public int GetAveragePing(AddressOrGUID systemIdentifier) {
    return SLikeNetJNI.RakPeerInterface_GetAveragePing(swigCPtr, this, AddressOrGUID.getCPtr(systemIdentifier), systemIdentifier);
  }

  public int GetLastPing(AddressOrGUID systemIdentifier) {
    return SLikeNetJNI.RakPeerInterface_GetLastPing(swigCPtr, this, AddressOrGUID.getCPtr(systemIdentifier), systemIdentifier);
  }

  public int GetLowestPing(AddressOrGUID systemIdentifier) {
    return SLikeNetJNI.RakPeerInterface_GetLowestPing(swigCPtr, this, AddressOrGUID.getCPtr(systemIdentifier), systemIdentifier);
  }

  public void SetOccasionalPing(boolean doPing) {
    SLikeNetJNI.RakPeerInterface_SetOccasionalPing(swigCPtr, this, doPing);
  }

  public java.math.BigInteger GetClockDifferential(AddressOrGUID systemIdentifier) {
    return SLikeNetJNI.RakPeerInterface_GetClockDifferential(swigCPtr, this, AddressOrGUID.getCPtr(systemIdentifier), systemIdentifier);
  }

  public void SetOfflinePingResponse(String data, long length) {
    SLikeNetJNI.RakPeerInterface_SetOfflinePingResponse(swigCPtr, this, data, length);
  }

  public SystemAddress GetInternalID(SystemAddress systemAddress, int index) {
    return new SystemAddress(SLikeNetJNI.RakPeerInterface_GetInternalID__SWIG_0(swigCPtr, this, SystemAddress.getCPtr(systemAddress), systemAddress, index), true);
  }

  public SystemAddress GetInternalID(SystemAddress systemAddress) {
    return new SystemAddress(SLikeNetJNI.RakPeerInterface_GetInternalID__SWIG_1(swigCPtr, this, SystemAddress.getCPtr(systemAddress), systemAddress), true);
  }

  public SystemAddress GetInternalID() {
    return new SystemAddress(SLikeNetJNI.RakPeerInterface_GetInternalID__SWIG_2(swigCPtr, this), true);
  }

  public void SetInternalID(SystemAddress systemAddress, int index) {
    SLikeNetJNI.RakPeerInterface_SetInternalID__SWIG_0(swigCPtr, this, SystemAddress.getCPtr(systemAddress), systemAddress, index);
  }

  public void SetInternalID(SystemAddress systemAddress) {
    SLikeNetJNI.RakPeerInterface_SetInternalID__SWIG_1(swigCPtr, this, SystemAddress.getCPtr(systemAddress), systemAddress);
  }

  public SystemAddress GetExternalID(SystemAddress target) {
    return new SystemAddress(SLikeNetJNI.RakPeerInterface_GetExternalID(swigCPtr, this, SystemAddress.getCPtr(target), target), true);
  }

  public RakNetGUID GetMyGUID() {
    return new RakNetGUID(SLikeNetJNI.RakPeerInterface_GetMyGUID(swigCPtr, this), true);
  }

  public SystemAddress GetMyBoundAddress(int socketIndex) {
    return new SystemAddress(SLikeNetJNI.RakPeerInterface_GetMyBoundAddress__SWIG_0(swigCPtr, this, socketIndex), true);
  }

  public SystemAddress GetMyBoundAddress() {
    return new SystemAddress(SLikeNetJNI.RakPeerInterface_GetMyBoundAddress__SWIG_1(swigCPtr, this), true);
  }

  public static java.math.BigInteger Get64BitUniqueRandomNumber() {
    return SLikeNetJNI.RakPeerInterface_Get64BitUniqueRandomNumber();
  }

  public RakNetGUID GetGuidFromSystemAddress(SystemAddress input) {
    return new RakNetGUID(SLikeNetJNI.RakPeerInterface_GetGuidFromSystemAddress(swigCPtr, this, SystemAddress.getCPtr(input), input), false);
  }

  public SystemAddress GetSystemAddressFromGuid(RakNetGUID input) {
    return new SystemAddress(SLikeNetJNI.RakPeerInterface_GetSystemAddressFromGuid(swigCPtr, this, RakNetGUID.getCPtr(input), input), true);
  }

  public boolean GetClientPublicKeyFromSystemAddress(SystemAddress input, String client_public_key) {
    return SLikeNetJNI.RakPeerInterface_GetClientPublicKeyFromSystemAddress(swigCPtr, this, SystemAddress.getCPtr(input), input, client_public_key);
  }

  public void SetTimeoutTime(SWIGTYPE_p_unsigned___int32 timeMS, SystemAddress target) {
    SLikeNetJNI.RakPeerInterface_SetTimeoutTime(swigCPtr, this, SWIGTYPE_p_unsigned___int32.getCPtr(timeMS), SystemAddress.getCPtr(target), target);
  }

  public SWIGTYPE_p_unsigned___int32 GetTimeoutTime(SystemAddress target) {
    return new SWIGTYPE_p_unsigned___int32(SLikeNetJNI.RakPeerInterface_GetTimeoutTime(swigCPtr, this, SystemAddress.getCPtr(target), target), true);
  }

  public int GetMTUSize(SystemAddress target) {
    return SLikeNetJNI.RakPeerInterface_GetMTUSize(swigCPtr, this, SystemAddress.getCPtr(target), target);
  }

  public long GetNumberOfAddresses() {
    return SLikeNetJNI.RakPeerInterface_GetNumberOfAddresses(swigCPtr, this);
  }

  public String GetLocalIP(long index) {
    return SLikeNetJNI.RakPeerInterface_GetLocalIP(swigCPtr, this, index);
  }

  public boolean IsLocalIP(String ip) {
    return SLikeNetJNI.RakPeerInterface_IsLocalIP(swigCPtr, this, ip);
  }

  public void AllowConnectionResponseIPMigration(boolean allow) {
    SLikeNetJNI.RakPeerInterface_AllowConnectionResponseIPMigration(swigCPtr, this, allow);
  }

  public boolean AdvertiseSystem(String host, int remotePort, String data, int dataLength, long connectionSocketIndex) {
    return SLikeNetJNI.RakPeerInterface_AdvertiseSystem__SWIG_0(swigCPtr, this, host, remotePort, data, dataLength, connectionSocketIndex);
  }

  public boolean AdvertiseSystem(String host, int remotePort, String data, int dataLength) {
    return SLikeNetJNI.RakPeerInterface_AdvertiseSystem__SWIG_1(swigCPtr, this, host, remotePort, data, dataLength);
  }

  public void SetSplitMessageProgressInterval(int interval) {
    SLikeNetJNI.RakPeerInterface_SetSplitMessageProgressInterval(swigCPtr, this, interval);
  }

  public int GetSplitMessageProgressInterval() {
    return SLikeNetJNI.RakPeerInterface_GetSplitMessageProgressInterval(swigCPtr, this);
  }

  public void SetUnreliableTimeout(SWIGTYPE_p_unsigned___int32 timeoutMS) {
    SLikeNetJNI.RakPeerInterface_SetUnreliableTimeout(swigCPtr, this, SWIGTYPE_p_unsigned___int32.getCPtr(timeoutMS));
  }

  public void SendTTL(String host, int remotePort, int ttl, long connectionSocketIndex) {
    SLikeNetJNI.RakPeerInterface_SendTTL__SWIG_0(swigCPtr, this, host, remotePort, ttl, connectionSocketIndex);
  }

  public void SendTTL(String host, int remotePort, int ttl) {
    SLikeNetJNI.RakPeerInterface_SendTTL__SWIG_1(swigCPtr, this, host, remotePort, ttl);
  }

  public void AttachPlugin(PluginInterface2 plugin) {
    SLikeNetJNI.RakPeerInterface_AttachPlugin(swigCPtr, this, PluginInterface2.getCPtr(plugin), plugin);
  }

  public void DetachPlugin(PluginInterface2 messageHandler) {
    SLikeNetJNI.RakPeerInterface_DetachPlugin(swigCPtr, this, PluginInterface2.getCPtr(messageHandler), messageHandler);
  }

  public void PushBackPacket(Packet packet, boolean pushAtHead) {
    SLikeNetJNI.RakPeerInterface_PushBackPacket(swigCPtr, this, Packet.getCPtr(packet), packet, pushAtHead);
  }

  public void ChangeSystemAddress(RakNetGUID guid, SystemAddress systemAddress) {
    SLikeNetJNI.RakPeerInterface_ChangeSystemAddress(swigCPtr, this, RakNetGUID.getCPtr(guid), guid, SystemAddress.getCPtr(systemAddress), systemAddress);
  }

  public Packet AllocatePacket(long dataSize) {
    long cPtr = SLikeNetJNI.RakPeerInterface_AllocatePacket(swigCPtr, this, dataSize);
    return (cPtr == 0) ? null : new Packet(cPtr, false);
  }

  public void GetSockets(SWIGTYPE_p_DataStructures__ListT_RakNetSocket2_p_t sockets) {
    SLikeNetJNI.RakPeerInterface_GetSockets(swigCPtr, this, SWIGTYPE_p_DataStructures__ListT_RakNetSocket2_p_t.getCPtr(sockets));
  }

  public void WriteOutOfBandHeader(BitStream bitStream) {
    SLikeNetJNI.RakPeerInterface_WriteOutOfBandHeader(swigCPtr, this, BitStream.getCPtr(bitStream), bitStream);
  }

  public void ApplyNetworkSimulator(float packetloss, int minExtraPing, int extraPingVariance) {
    SLikeNetJNI.RakPeerInterface_ApplyNetworkSimulator(swigCPtr, this, packetloss, minExtraPing, extraPingVariance);
  }

  public void SetPerConnectionOutgoingBandwidthLimit(long maxBitsPerSecond) {
    SLikeNetJNI.RakPeerInterface_SetPerConnectionOutgoingBandwidthLimit(swigCPtr, this, maxBitsPerSecond);
  }

  public boolean IsNetworkSimulatorActive() {
    return SLikeNetJNI.RakPeerInterface_IsNetworkSimulatorActive(swigCPtr, this);
  }

  public RakNetStatistics GetStatistics(SystemAddress systemAddress, RakNetStatistics rns) {
    long cPtr = SLikeNetJNI.RakPeerInterface_GetStatistics__SWIG_0(swigCPtr, this, SystemAddress.getCPtr(systemAddress), systemAddress, RakNetStatistics.getCPtr(rns), rns);
    return (cPtr == 0) ? null : new RakNetStatistics(cPtr, false);
  }

  public RakNetStatistics GetStatistics(SystemAddress systemAddress) {
    long cPtr = SLikeNetJNI.RakPeerInterface_GetStatistics__SWIG_1(swigCPtr, this, SystemAddress.getCPtr(systemAddress), systemAddress);
    return (cPtr == 0) ? null : new RakNetStatistics(cPtr, false);
  }

  public boolean GetStatistics(long index, RakNetStatistics rns) {
    return SLikeNetJNI.RakPeerInterface_GetStatistics__SWIG_2(swigCPtr, this, index, RakNetStatistics.getCPtr(rns), rns);
  }

  public long GetReceiveBufferSize() {
    return SLikeNetJNI.RakPeerInterface_GetReceiveBufferSize(swigCPtr, this);
  }

  public boolean RunUpdateCycle(BitStream updateBitStream) {
    return SLikeNetJNI.RakPeerInterface_RunUpdateCycle(swigCPtr, this, BitStream.getCPtr(updateBitStream), updateBitStream);
  }

  public boolean SendOutOfBand(String host, int remotePort, String data, SWIGTYPE_p_unsigned___int32 dataLength, long connectionSocketIndex) {
    return SLikeNetJNI.RakPeerInterface_SendOutOfBand__SWIG_0(swigCPtr, this, host, remotePort, data, SWIGTYPE_p_unsigned___int32.getCPtr(dataLength), connectionSocketIndex);
  }

  public boolean SendOutOfBand(String host, int remotePort, String data, SWIGTYPE_p_unsigned___int32 dataLength) {
    return SLikeNetJNI.RakPeerInterface_SendOutOfBand__SWIG_1(swigCPtr, this, host, remotePort, data, SWIGTYPE_p_unsigned___int32.getCPtr(dataLength));
  }

}
