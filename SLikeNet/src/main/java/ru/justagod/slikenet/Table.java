/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package ru.justagod.slikenet;

public class Table {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected Table(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Table obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        SLikeNetJNI.delete_Table(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  static public class Cell {
    private transient long swigCPtr;
    protected transient boolean swigCMemOwn;
  
    protected Cell(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(Cell obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    @SuppressWarnings("deprecation")
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          SLikeNetJNI.delete_Table_Cell(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public Cell() {
      this(SLikeNetJNI.new_Table_Cell__SWIG_0(), true);
    }
  
    public Cell(double numericValue, String charValue, SWIGTYPE_p_void ptr, Table.ColumnType type) {
      this(SLikeNetJNI.new_Table_Cell__SWIG_1(numericValue, charValue, SWIGTYPE_p_void.getCPtr(ptr), type.swigValue()), true);
    }
  
    public void SetByType(double numericValue, String charValue, SWIGTYPE_p_void inPtr, Table.ColumnType type) {
      SLikeNetJNI.Table_Cell_SetByType(swigCPtr, this, numericValue, charValue, SWIGTYPE_p_void.getCPtr(inPtr), type.swigValue());
    }
  
    public void Clear() {
      SLikeNetJNI.Table_Cell_Clear(swigCPtr, this);
    }
  
    public void Set(int input) {
      SLikeNetJNI.Table_Cell_Set__SWIG_0(swigCPtr, this, input);
    }
  
    public void Set(long input) {
      SLikeNetJNI.Table_Cell_Set__SWIG_1(swigCPtr, this, input);
    }
  
    public void Set(double input) {
      SLikeNetJNI.Table_Cell_Set__SWIG_2(swigCPtr, this, input);
    }
  
    public void Set(String input) {
      SLikeNetJNI.Table_Cell_Set__SWIG_3(swigCPtr, this, input);
    }
  
    public void Set(String input, int inputLength) {
      SLikeNetJNI.Table_Cell_Set__SWIG_4(swigCPtr, this, input, inputLength);
    }
  
    public void SetPtr(SWIGTYPE_p_void p) {
      SLikeNetJNI.Table_Cell_SetPtr(swigCPtr, this, SWIGTYPE_p_void.getCPtr(p));
    }
  
    public void Get(SWIGTYPE_p_int output) {
      SLikeNetJNI.Table_Cell_Get__SWIG_0(swigCPtr, this, SWIGTYPE_p_int.getCPtr(output));
    }
  
    public void Get(SWIGTYPE_p_double output) {
      SLikeNetJNI.Table_Cell_Get__SWIG_1(swigCPtr, this, SWIGTYPE_p_double.getCPtr(output));
    }
  
    public void Get(String output) {
      SLikeNetJNI.Table_Cell_Get__SWIG_2(swigCPtr, this, output);
    }
  
    public void Get(String output, long outputLength) {
      SLikeNetJNI.Table_Cell_Get__SWIG_3(swigCPtr, this, output, outputLength);
    }
  
    public void Get(String output, SWIGTYPE_p_int outputLength) {
      SLikeNetJNI.Table_Cell_Get__SWIG_4(swigCPtr, this, output, SWIGTYPE_p_int.getCPtr(outputLength));
    }
  
    public RakString ToString(Table.ColumnType columnType) {
      return new RakString(SLikeNetJNI.Table_Cell_ToString(swigCPtr, this, columnType.swigValue()), true);
    }
  
    public Cell(Table.Cell input) {
      this(SLikeNetJNI.new_Table_Cell__SWIG_2(Table.Cell.getCPtr(input), input), true);
    }
  
    public Table.ColumnType EstimateColumnType() {
      return Table.ColumnType.swigToEnum(SLikeNetJNI.Table_Cell_EstimateColumnType(swigCPtr, this));
    }
  
    public void setIsEmpty(boolean value) {
      SLikeNetJNI.Table_Cell_isEmpty_set(swigCPtr, this, value);
    }
  
    public boolean getIsEmpty() {
      return SLikeNetJNI.Table_Cell_isEmpty_get(swigCPtr, this);
    }
  
    public void setI(double value) {
      SLikeNetJNI.Table_Cell_i_set(swigCPtr, this, value);
    }
  
    public double getI() {
      return SLikeNetJNI.Table_Cell_i_get(swigCPtr, this);
    }
  
    public void setC(String value) {
      SLikeNetJNI.Table_Cell_c_set(swigCPtr, this, value);
    }
  
    public String getC() {
      return SLikeNetJNI.Table_Cell_c_get(swigCPtr, this);
    }
  
    public void setPtr(SWIGTYPE_p_void value) {
      SLikeNetJNI.Table_Cell_ptr_set(swigCPtr, this, SWIGTYPE_p_void.getCPtr(value));
    }
  
    public SWIGTYPE_p_void getPtr() {
      long cPtr = SLikeNetJNI.Table_Cell_ptr_get(swigCPtr, this);
      return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
    }
  
  }

  static public class ColumnDescriptor {
    private transient long swigCPtr;
    protected transient boolean swigCMemOwn;
  
    protected ColumnDescriptor(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(ColumnDescriptor obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    @SuppressWarnings("deprecation")
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          SLikeNetJNI.delete_Table_ColumnDescriptor(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public ColumnDescriptor() {
      this(SLikeNetJNI.new_Table_ColumnDescriptor__SWIG_0(), true);
    }
  
    public ColumnDescriptor(String cn, Table.ColumnType ct) {
      this(SLikeNetJNI.new_Table_ColumnDescriptor__SWIG_1(cn, ct.swigValue()), true);
    }
  
    public void setColumnName(String value) {
      SLikeNetJNI.Table_ColumnDescriptor_columnName_set(swigCPtr, this, value);
    }
  
    public String getColumnName() {
      return SLikeNetJNI.Table_ColumnDescriptor_columnName_get(swigCPtr, this);
    }
  
    public void setColumnType(Table.ColumnType value) {
      SLikeNetJNI.Table_ColumnDescriptor_columnType_set(swigCPtr, this, value.swigValue());
    }
  
    public Table.ColumnType getColumnType() {
      return Table.ColumnType.swigToEnum(SLikeNetJNI.Table_ColumnDescriptor_columnType_get(swigCPtr, this));
    }
  
  }

  static public class Row {
    private transient long swigCPtr;
    protected transient boolean swigCMemOwn;
  
    protected Row(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(Row obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    @SuppressWarnings("deprecation")
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          SLikeNetJNI.delete_Table_Row(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public void setCells(SWIGTYPE_p_DataStructures__ListT_DataStructures__Table__Cell_p_t value) {
      SLikeNetJNI.Table_Row_cells_set(swigCPtr, this, SWIGTYPE_p_DataStructures__ListT_DataStructures__Table__Cell_p_t.getCPtr(value));
    }
  
    public SWIGTYPE_p_DataStructures__ListT_DataStructures__Table__Cell_p_t getCells() {
      long cPtr = SLikeNetJNI.Table_Row_cells_get(swigCPtr, this);
      return (cPtr == 0) ? null : new SWIGTYPE_p_DataStructures__ListT_DataStructures__Table__Cell_p_t(cPtr, false);
    }
  
    public void UpdateCell(long columnIndex, double value) {
      SLikeNetJNI.Table_Row_UpdateCell__SWIG_0(swigCPtr, this, columnIndex, value);
    }
  
    public void UpdateCell(long columnIndex, String str) {
      SLikeNetJNI.Table_Row_UpdateCell__SWIG_1(swigCPtr, this, columnIndex, str);
    }
  
    public void UpdateCell(long columnIndex, int byteLength, String data) {
      SLikeNetJNI.Table_Row_UpdateCell__SWIG_2(swigCPtr, this, columnIndex, byteLength, data);
    }
  
    public Row() {
      this(SLikeNetJNI.new_Table_Row(), true);
    }
  
  }

  static public class FilterQuery {
    private transient long swigCPtr;
    protected transient boolean swigCMemOwn;
  
    protected FilterQuery(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(FilterQuery obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    @SuppressWarnings("deprecation")
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          SLikeNetJNI.delete_Table_FilterQuery(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public FilterQuery() {
      this(SLikeNetJNI.new_Table_FilterQuery__SWIG_0(), true);
    }
  
    public FilterQuery(long column, Table.Cell cell, Table.FilterQueryType op) {
      this(SLikeNetJNI.new_Table_FilterQuery__SWIG_1(column, Table.Cell.getCPtr(cell), cell, op.swigValue()), true);
    }
  
    public void setColumnName(String value) {
      SLikeNetJNI.Table_FilterQuery_columnName_set(swigCPtr, this, value);
    }
  
    public String getColumnName() {
      return SLikeNetJNI.Table_FilterQuery_columnName_get(swigCPtr, this);
    }
  
    public void setColumnIndex(long value) {
      SLikeNetJNI.Table_FilterQuery_columnIndex_set(swigCPtr, this, value);
    }
  
    public long getColumnIndex() {
      return SLikeNetJNI.Table_FilterQuery_columnIndex_get(swigCPtr, this);
    }
  
    public void setCellValue(Table.Cell value) {
      SLikeNetJNI.Table_FilterQuery_cellValue_set(swigCPtr, this, Table.Cell.getCPtr(value), value);
    }
  
    public Table.Cell getCellValue() {
      long cPtr = SLikeNetJNI.Table_FilterQuery_cellValue_get(swigCPtr, this);
      return (cPtr == 0) ? null : new Table.Cell(cPtr, false);
    }
  
    public void setOperation(Table.FilterQueryType value) {
      SLikeNetJNI.Table_FilterQuery_operation_set(swigCPtr, this, value.swigValue());
    }
  
    public Table.FilterQueryType getOperation() {
      return Table.FilterQueryType.swigToEnum(SLikeNetJNI.Table_FilterQuery_operation_get(swigCPtr, this));
    }
  
  }

  static public class SortQuery {
    private transient long swigCPtr;
    protected transient boolean swigCMemOwn;
  
    protected SortQuery(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(SortQuery obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    @SuppressWarnings("deprecation")
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          SLikeNetJNI.delete_Table_SortQuery(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public void setColumnIndex(long value) {
      SLikeNetJNI.Table_SortQuery_columnIndex_set(swigCPtr, this, value);
    }
  
    public long getColumnIndex() {
      return SLikeNetJNI.Table_SortQuery_columnIndex_get(swigCPtr, this);
    }
  
    public void setOperation(Table.SortQueryType value) {
      SLikeNetJNI.Table_SortQuery_operation_set(swigCPtr, this, value.swigValue());
    }
  
    public Table.SortQueryType getOperation() {
      return Table.SortQueryType.swigToEnum(SLikeNetJNI.Table_SortQuery_operation_get(swigCPtr, this));
    }
  
    public SortQuery() {
      this(SLikeNetJNI.new_Table_SortQuery(), true);
    }
  
  }

  public Table() {
    this(SLikeNetJNI.new_Table(), true);
  }

  public long AddColumn(String columnName, Table.ColumnType columnType) {
    return SLikeNetJNI.Table_AddColumn(swigCPtr, this, columnName, columnType.swigValue());
  }

  public void RemoveColumn(long columnIndex) {
    SLikeNetJNI.Table_RemoveColumn(swigCPtr, this, columnIndex);
  }

  public String ColumnName(long index) {
    return SLikeNetJNI.Table_ColumnName(swigCPtr, this, index);
  }

  public Table.ColumnType GetColumnType(long index) {
    return Table.ColumnType.swigToEnum(SLikeNetJNI.Table_GetColumnType(swigCPtr, this, index));
  }

  public long GetColumnCount() {
    return SLikeNetJNI.Table_GetColumnCount(swigCPtr, this);
  }

  public long GetRowCount() {
    return SLikeNetJNI.Table_GetRowCount(swigCPtr, this);
  }

  public Table.Row AddRow(long rowId) {
    long cPtr = SLikeNetJNI.Table_AddRow__SWIG_0(swigCPtr, this, rowId);
    return (cPtr == 0) ? null : new Table.Row(cPtr, false);
  }

  public Table.Row AddRow(long rowId, SWIGTYPE_p_DataStructures__ListT_DataStructures__Table__Cell_t initialCellValues) {
    long cPtr = SLikeNetJNI.Table_AddRow__SWIG_1(swigCPtr, this, rowId, SWIGTYPE_p_DataStructures__ListT_DataStructures__Table__Cell_t.getCPtr(initialCellValues));
    return (cPtr == 0) ? null : new Table.Row(cPtr, false);
  }

  public Table.Row AddRow(long rowId, SWIGTYPE_p_DataStructures__ListT_DataStructures__Table__Cell_p_t initialCellValues, boolean copyCells) {
    long cPtr = SLikeNetJNI.Table_AddRow__SWIG_2(swigCPtr, this, rowId, SWIGTYPE_p_DataStructures__ListT_DataStructures__Table__Cell_p_t.getCPtr(initialCellValues), copyCells);
    return (cPtr == 0) ? null : new Table.Row(cPtr, false);
  }

  public Table.Row AddRow(long rowId, SWIGTYPE_p_DataStructures__ListT_DataStructures__Table__Cell_p_t initialCellValues) {
    long cPtr = SLikeNetJNI.Table_AddRow__SWIG_3(swigCPtr, this, rowId, SWIGTYPE_p_DataStructures__ListT_DataStructures__Table__Cell_p_t.getCPtr(initialCellValues));
    return (cPtr == 0) ? null : new Table.Row(cPtr, false);
  }

  public boolean RemoveRow(long rowId) {
    return SLikeNetJNI.Table_RemoveRow(swigCPtr, this, rowId);
  }

  public void RemoveRows(Table tableContainingRowIDs) {
    SLikeNetJNI.Table_RemoveRows(swigCPtr, this, Table.getCPtr(tableContainingRowIDs), tableContainingRowIDs);
  }

  public boolean UpdateCell(long rowId, long columnIndex, int value) {
    return SLikeNetJNI.Table_UpdateCell__SWIG_0(swigCPtr, this, rowId, columnIndex, value);
  }

  public boolean UpdateCell(long rowId, long columnIndex, String str) {
    return SLikeNetJNI.Table_UpdateCell__SWIG_1(swigCPtr, this, rowId, columnIndex, str);
  }

  public boolean UpdateCellByIndex(long rowIndex, long columnIndex, int value) {
    return SLikeNetJNI.Table_UpdateCellByIndex__SWIG_0(swigCPtr, this, rowIndex, columnIndex, value);
  }

  public boolean UpdateCellByIndex(long rowIndex, long columnIndex, String str) {
    return SLikeNetJNI.Table_UpdateCellByIndex__SWIG_1(swigCPtr, this, rowIndex, columnIndex, str);
  }

  public void GetCellValueByIndex(long rowIndex, long columnIndex, SWIGTYPE_p_int output) {
    SLikeNetJNI.Table_GetCellValueByIndex__SWIG_0(swigCPtr, this, rowIndex, columnIndex, SWIGTYPE_p_int.getCPtr(output));
  }

  public void GetCellValueByIndex(long rowIndex, long columnIndex, String output, long outputLength) {
    SLikeNetJNI.Table_GetCellValueByIndex__SWIG_1(swigCPtr, this, rowIndex, columnIndex, output, outputLength);
  }

  public Table.Row GetRowByID(long rowId) {
    long cPtr = SLikeNetJNI.Table_GetRowByID(swigCPtr, this, rowId);
    return (cPtr == 0) ? null : new Table.Row(cPtr, false);
  }

  public Table.Row GetRowByIndex(long rowIndex, SWIGTYPE_p_unsigned_int key) {
    long cPtr = SLikeNetJNI.Table_GetRowByIndex(swigCPtr, this, rowIndex, SWIGTYPE_p_unsigned_int.getCPtr(key));
    return (cPtr == 0) ? null : new Table.Row(cPtr, false);
  }

  public void Clear() {
    SLikeNetJNI.Table_Clear(swigCPtr, this);
  }

  public SWIGTYPE_p_DataStructures__ListT_DataStructures__Table__ColumnDescriptor_t GetColumns() {
    return new SWIGTYPE_p_DataStructures__ListT_DataStructures__Table__ColumnDescriptor_t(SLikeNetJNI.Table_GetColumns(swigCPtr, this), false);
  }

  public RakNetBPlusTreeRow GetRows() {
    return new RakNetBPlusTreeRow(SLikeNetJNI.Table_GetRows(swigCPtr, this), false);
  }

  public long GetAvailableRowId() {
    return SLikeNetJNI.Table_GetAvailableRowId(swigCPtr, this);
  }

  public final static class ColumnType {
    public final static Table.ColumnType NUMERIC = new Table.ColumnType("NUMERIC");
    public final static Table.ColumnType STRING = new Table.ColumnType("STRING");
    public final static Table.ColumnType BINARY = new Table.ColumnType("BINARY");
    public final static Table.ColumnType POINTER = new Table.ColumnType("POINTER");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static ColumnType swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + ColumnType.class + " with value " + swigValue);
    }

    private ColumnType(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private ColumnType(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private ColumnType(String swigName, ColumnType swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static ColumnType[] swigValues = { NUMERIC, STRING, BINARY, POINTER };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class FilterQueryType {
    public final static Table.FilterQueryType QF_EQUAL = new Table.FilterQueryType("QF_EQUAL");
    public final static Table.FilterQueryType QF_NOT_EQUAL = new Table.FilterQueryType("QF_NOT_EQUAL");
    public final static Table.FilterQueryType QF_GREATER_THAN = new Table.FilterQueryType("QF_GREATER_THAN");
    public final static Table.FilterQueryType QF_GREATER_THAN_EQ = new Table.FilterQueryType("QF_GREATER_THAN_EQ");
    public final static Table.FilterQueryType QF_LESS_THAN = new Table.FilterQueryType("QF_LESS_THAN");
    public final static Table.FilterQueryType QF_LESS_THAN_EQ = new Table.FilterQueryType("QF_LESS_THAN_EQ");
    public final static Table.FilterQueryType QF_IS_EMPTY = new Table.FilterQueryType("QF_IS_EMPTY");
    public final static Table.FilterQueryType QF_NOT_EMPTY = new Table.FilterQueryType("QF_NOT_EMPTY");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static FilterQueryType swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + FilterQueryType.class + " with value " + swigValue);
    }

    private FilterQueryType(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private FilterQueryType(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private FilterQueryType(String swigName, FilterQueryType swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static FilterQueryType[] swigValues = { QF_EQUAL, QF_NOT_EQUAL, QF_GREATER_THAN, QF_GREATER_THAN_EQ, QF_LESS_THAN, QF_LESS_THAN_EQ, QF_IS_EMPTY, QF_NOT_EMPTY };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class SortQueryType {
    public final static Table.SortQueryType QS_INCREASING_ORDER = new Table.SortQueryType("QS_INCREASING_ORDER");
    public final static Table.SortQueryType QS_DECREASING_ORDER = new Table.SortQueryType("QS_DECREASING_ORDER");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static SortQueryType swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + SortQueryType.class + " with value " + swigValue);
    }

    private SortQueryType(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private SortQueryType(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private SortQueryType(String swigName, SortQueryType swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static SortQueryType[] swigValues = { QS_INCREASING_ORDER, QS_DECREASING_ORDER };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
