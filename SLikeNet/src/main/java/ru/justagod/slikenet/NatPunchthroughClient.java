/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package ru.justagod.slikenet;

public class NatPunchthroughClient extends PluginInterface2 {
  private transient long swigCPtr;

  protected NatPunchthroughClient(long cPtr, boolean cMemoryOwn) {
    super(SLikeNetJNI.NatPunchthroughClient_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(NatPunchthroughClient obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        SLikeNetJNI.delete_NatPunchthroughClient(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static NatPunchthroughClient GetInstance() {
    long cPtr = SLikeNetJNI.NatPunchthroughClient_GetInstance();
    return (cPtr == 0) ? null : new NatPunchthroughClient(cPtr, false);
  }

  public static void DestroyInstance(NatPunchthroughClient i) {
    SLikeNetJNI.NatPunchthroughClient_DestroyInstance(NatPunchthroughClient.getCPtr(i), i);
  }

  public NatPunchthroughClient() {
    this(SLikeNetJNI.new_NatPunchthroughClient(), true);
  }

  public void FindRouterPortStride(SystemAddress facilitator) {
    SLikeNetJNI.NatPunchthroughClient_FindRouterPortStride(swigCPtr, this, SystemAddress.getCPtr(facilitator), facilitator);
  }

  public boolean OpenNAT(RakNetGUID destination, SystemAddress facilitator) {
    return SLikeNetJNI.NatPunchthroughClient_OpenNAT(swigCPtr, this, RakNetGUID.getCPtr(destination), destination, SystemAddress.getCPtr(facilitator), facilitator);
  }

  public PunchthroughConfiguration GetPunchthroughConfiguration() {
    long cPtr = SLikeNetJNI.NatPunchthroughClient_GetPunchthroughConfiguration(swigCPtr, this);
    return (cPtr == 0) ? null : new PunchthroughConfiguration(cPtr, false);
  }

  public void SetDebugInterface(NatPunchthroughDebugInterface i) {
    SLikeNetJNI.NatPunchthroughClient_SetDebugInterface(swigCPtr, this, NatPunchthroughDebugInterface.getCPtr(i), i);
  }

  public void GetUPNPPortMappings(String externalPort, String internalPort, SystemAddress natPunchthroughServerAddress) {
    SLikeNetJNI.NatPunchthroughClient_GetUPNPPortMappings(swigCPtr, this, externalPort, internalPort, SystemAddress.getCPtr(natPunchthroughServerAddress), natPunchthroughServerAddress);
  }

  public void Clear() {
    SLikeNetJNI.NatPunchthroughClient_Clear(swigCPtr, this);
  }

  static public class SendPing {
    private transient long swigCPtr;
    protected transient boolean swigCMemOwn;
  
    protected SendPing(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(SendPing obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    @SuppressWarnings("deprecation")
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          SLikeNetJNI.delete_NatPunchthroughClient_SendPing(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public void setNextActionTime(java.math.BigInteger value) {
      SLikeNetJNI.NatPunchthroughClient_SendPing_nextActionTime_set(swigCPtr, this, value);
    }
  
    public java.math.BigInteger getNextActionTime() {
      return SLikeNetJNI.NatPunchthroughClient_SendPing_nextActionTime_get(swigCPtr, this);
    }
  
    public void setTargetAddress(SystemAddress value) {
      SLikeNetJNI.NatPunchthroughClient_SendPing_targetAddress_set(swigCPtr, this, SystemAddress.getCPtr(value), value);
    }
  
    public SystemAddress getTargetAddress() {
      long cPtr = SLikeNetJNI.NatPunchthroughClient_SendPing_targetAddress_get(swigCPtr, this);
      return (cPtr == 0) ? null : new SystemAddress(cPtr, false);
    }
  
    public void setFacilitator(SystemAddress value) {
      SLikeNetJNI.NatPunchthroughClient_SendPing_facilitator_set(swigCPtr, this, SystemAddress.getCPtr(value), value);
    }
  
    public SystemAddress getFacilitator() {
      long cPtr = SLikeNetJNI.NatPunchthroughClient_SendPing_facilitator_get(swigCPtr, this);
      return (cPtr == 0) ? null : new SystemAddress(cPtr, false);
    }
  
    public void setInternalIds(SystemAddress value) {
      SLikeNetJNI.NatPunchthroughClient_SendPing_internalIds_set(swigCPtr, this, SystemAddress.getCPtr(value), value);
    }
  
    public SystemAddress getInternalIds() {
      long cPtr = SLikeNetJNI.NatPunchthroughClient_SendPing_internalIds_get(swigCPtr, this);
      return (cPtr == 0) ? null : new SystemAddress(cPtr, false);
    }
  
    public void setTargetGuid(RakNetGUID value) {
      SLikeNetJNI.NatPunchthroughClient_SendPing_targetGuid_set(swigCPtr, this, RakNetGUID.getCPtr(value), value);
    }
  
    public RakNetGUID getTargetGuid() {
      long cPtr = SLikeNetJNI.NatPunchthroughClient_SendPing_targetGuid_get(swigCPtr, this);
      return (cPtr == 0) ? null : new RakNetGUID(cPtr, false);
    }
  
    public void setWeAreSender(boolean value) {
      SLikeNetJNI.NatPunchthroughClient_SendPing_weAreSender_set(swigCPtr, this, value);
    }
  
    public boolean getWeAreSender() {
      return SLikeNetJNI.NatPunchthroughClient_SendPing_weAreSender_get(swigCPtr, this);
    }
  
    public void setAttemptCount(int value) {
      SLikeNetJNI.NatPunchthroughClient_SendPing_attemptCount_set(swigCPtr, this, value);
    }
  
    public int getAttemptCount() {
      return SLikeNetJNI.NatPunchthroughClient_SendPing_attemptCount_get(swigCPtr, this);
    }
  
    public void setRetryCount(int value) {
      SLikeNetJNI.NatPunchthroughClient_SendPing_retryCount_set(swigCPtr, this, value);
    }
  
    public int getRetryCount() {
      return SLikeNetJNI.NatPunchthroughClient_SendPing_retryCount_get(swigCPtr, this);
    }
  
    public void setPunchingFixedPortAttempts(int value) {
      SLikeNetJNI.NatPunchthroughClient_SendPing_punchingFixedPortAttempts_set(swigCPtr, this, value);
    }
  
    public int getPunchingFixedPortAttempts() {
      return SLikeNetJNI.NatPunchthroughClient_SendPing_punchingFixedPortAttempts_get(swigCPtr, this);
    }
  
    public void setSessionId(int value) {
      SLikeNetJNI.NatPunchthroughClient_SendPing_sessionId_set(swigCPtr, this, value);
    }
  
    public int getSessionId() {
      return SLikeNetJNI.NatPunchthroughClient_SendPing_sessionId_get(swigCPtr, this);
    }
  
    public void setSentTTL(boolean value) {
      SLikeNetJNI.NatPunchthroughClient_SendPing_sentTTL_set(swigCPtr, this, value);
    }
  
    public boolean getSentTTL() {
      return SLikeNetJNI.NatPunchthroughClient_SendPing_sentTTL_get(swigCPtr, this);
    }
  
    public void setTestMode(NatPunchthroughClient.SendPing.TestMode value) {
      SLikeNetJNI.NatPunchthroughClient_SendPing_testMode_set(swigCPtr, this, value.swigValue());
    }
  
    public NatPunchthroughClient.SendPing.TestMode getTestMode() {
      return NatPunchthroughClient.SendPing.TestMode.swigToEnum(SLikeNetJNI.NatPunchthroughClient_SendPing_testMode_get(swigCPtr, this));
    }
  
    public SendPing() {
      this(SLikeNetJNI.new_NatPunchthroughClient_SendPing(), true);
    }
  
    public final static class TestMode {
      public final static NatPunchthroughClient.SendPing.TestMode TESTING_INTERNAL_IPS = new NatPunchthroughClient.SendPing.TestMode("TESTING_INTERNAL_IPS");
      public final static NatPunchthroughClient.SendPing.TestMode WAITING_FOR_INTERNAL_IPS_RESPONSE = new NatPunchthroughClient.SendPing.TestMode("WAITING_FOR_INTERNAL_IPS_RESPONSE");
      public final static NatPunchthroughClient.SendPing.TestMode TESTING_EXTERNAL_IPS_FACILITATOR_PORT_TO_FACILITATOR_PORT = new NatPunchthroughClient.SendPing.TestMode("TESTING_EXTERNAL_IPS_FACILITATOR_PORT_TO_FACILITATOR_PORT");
      public final static NatPunchthroughClient.SendPing.TestMode TESTING_EXTERNAL_IPS_1024_TO_FACILITATOR_PORT = new NatPunchthroughClient.SendPing.TestMode("TESTING_EXTERNAL_IPS_1024_TO_FACILITATOR_PORT");
      public final static NatPunchthroughClient.SendPing.TestMode TESTING_EXTERNAL_IPS_FACILITATOR_PORT_TO_1024 = new NatPunchthroughClient.SendPing.TestMode("TESTING_EXTERNAL_IPS_FACILITATOR_PORT_TO_1024");
      public final static NatPunchthroughClient.SendPing.TestMode TESTING_EXTERNAL_IPS_1024_TO_1024 = new NatPunchthroughClient.SendPing.TestMode("TESTING_EXTERNAL_IPS_1024_TO_1024");
      public final static NatPunchthroughClient.SendPing.TestMode WAITING_AFTER_ALL_ATTEMPTS = new NatPunchthroughClient.SendPing.TestMode("WAITING_AFTER_ALL_ATTEMPTS");
      public final static NatPunchthroughClient.SendPing.TestMode PUNCHING_FIXED_PORT = new NatPunchthroughClient.SendPing.TestMode("PUNCHING_FIXED_PORT");
  
      public final int swigValue() {
        return swigValue;
      }
  
      public String toString() {
        return swigName;
      }
  
      public static TestMode swigToEnum(int swigValue) {
        if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
          return swigValues[swigValue];
        for (int i = 0; i < swigValues.length; i++)
          if (swigValues[i].swigValue == swigValue)
            return swigValues[i];
        throw new IllegalArgumentException("No enum " + TestMode.class + " with value " + swigValue);
      }
  
      private TestMode(String swigName) {
        this.swigName = swigName;
        this.swigValue = swigNext++;
      }
  
      private TestMode(String swigName, int swigValue) {
        this.swigName = swigName;
        this.swigValue = swigValue;
        swigNext = swigValue+1;
      }
  
      private TestMode(String swigName, TestMode swigEnum) {
        this.swigName = swigName;
        this.swigValue = swigEnum.swigValue;
        swigNext = this.swigValue+1;
      }
  
      private static TestMode[] swigValues = { TESTING_INTERNAL_IPS, WAITING_FOR_INTERNAL_IPS_RESPONSE, TESTING_EXTERNAL_IPS_FACILITATOR_PORT_TO_FACILITATOR_PORT, TESTING_EXTERNAL_IPS_1024_TO_FACILITATOR_PORT, TESTING_EXTERNAL_IPS_FACILITATOR_PORT_TO_1024, TESTING_EXTERNAL_IPS_1024_TO_1024, WAITING_AFTER_ALL_ATTEMPTS, PUNCHING_FIXED_PORT };
      private static int swigNext = 0;
      private final int swigValue;
      private final String swigName;
    }
  
  }

  public void setSp(NatPunchthroughClient.SendPing value) {
    SLikeNetJNI.NatPunchthroughClient_sp_set(swigCPtr, this, NatPunchthroughClient.SendPing.getCPtr(value), value);
  }

  public NatPunchthroughClient.SendPing getSp() {
    long cPtr = SLikeNetJNI.NatPunchthroughClient_sp_get(swigCPtr, this);
    return (cPtr == 0) ? null : new NatPunchthroughClient.SendPing(cPtr, false);
  }

}
