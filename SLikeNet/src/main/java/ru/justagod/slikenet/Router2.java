/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package ru.justagod.slikenet;

public class Router2 extends PluginInterface2 {
  private transient long swigCPtr;

  protected Router2(long cPtr, boolean cMemoryOwn) {
    super(SLikeNetJNI.Router2_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Router2 obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        SLikeNetJNI.delete_Router2(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static Router2 GetInstance() {
    long cPtr = SLikeNetJNI.Router2_GetInstance();
    return (cPtr == 0) ? null : new Router2(cPtr, false);
  }

  public static void DestroyInstance(Router2 i) {
    SLikeNetJNI.Router2_DestroyInstance(Router2.getCPtr(i), i);
  }

  public Router2() {
    this(SLikeNetJNI.new_Router2(), true);
  }

  public void SetSocketFamily(int _socketFamily) {
    SLikeNetJNI.Router2_SetSocketFamily(swigCPtr, this, _socketFamily);
  }

  public void EstablishRouting(RakNetGUID endpointGuid) {
    SLikeNetJNI.Router2_EstablishRouting(swigCPtr, this, RakNetGUID.getCPtr(endpointGuid), endpointGuid);
  }

  public void SetMaximumForwardingRequests(int max) {
    SLikeNetJNI.Router2_SetMaximumForwardingRequests(swigCPtr, this, max);
  }

  public void SetDebugInterface(Router2DebugInterface _debugInterface) {
    SLikeNetJNI.Router2_SetDebugInterface(swigCPtr, this, Router2DebugInterface.getCPtr(_debugInterface), _debugInterface);
  }

  public Router2DebugInterface GetDebugInterface() {
    long cPtr = SLikeNetJNI.Router2_GetDebugInterface(swigCPtr, this);
    return (cPtr == 0) ? null : new Router2DebugInterface(cPtr, false);
  }

  static public class ConnectionRequestSystem {
    private transient long swigCPtr;
    protected transient boolean swigCMemOwn;
  
    protected ConnectionRequestSystem(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(ConnectionRequestSystem obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    @SuppressWarnings("deprecation")
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          SLikeNetJNI.delete_Router2_ConnectionRequestSystem(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public void setGuid(RakNetGUID value) {
      SLikeNetJNI.Router2_ConnectionRequestSystem_guid_set(swigCPtr, this, RakNetGUID.getCPtr(value), value);
    }
  
    public RakNetGUID getGuid() {
      long cPtr = SLikeNetJNI.Router2_ConnectionRequestSystem_guid_get(swigCPtr, this);
      return (cPtr == 0) ? null : new RakNetGUID(cPtr, false);
    }
  
    public void setPingToEndpoint(int value) {
      SLikeNetJNI.Router2_ConnectionRequestSystem_pingToEndpoint_set(swigCPtr, this, value);
    }
  
    public int getPingToEndpoint() {
      return SLikeNetJNI.Router2_ConnectionRequestSystem_pingToEndpoint_get(swigCPtr, this);
    }
  
    public void setUsedForwardingEntries(int value) {
      SLikeNetJNI.Router2_ConnectionRequestSystem_usedForwardingEntries_set(swigCPtr, this, value);
    }
  
    public int getUsedForwardingEntries() {
      return SLikeNetJNI.Router2_ConnectionRequestSystem_usedForwardingEntries_get(swigCPtr, this);
    }
  
    public ConnectionRequestSystem() {
      this(SLikeNetJNI.new_Router2_ConnectionRequestSystem(), true);
    }
  
  }

  static public class ConnnectRequest {
    private transient long swigCPtr;
    protected transient boolean swigCMemOwn;
  
    protected ConnnectRequest(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(ConnnectRequest obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    @SuppressWarnings("deprecation")
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          SLikeNetJNI.delete_Router2_ConnnectRequest(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public ConnnectRequest() {
      this(SLikeNetJNI.new_Router2_ConnnectRequest(), true);
    }
  
    public void setConnectionRequestSystems(SWIGTYPE_p_DataStructures__ListT_SLNet__Router2__ConnectionRequestSystem_t value) {
      SLikeNetJNI.Router2_ConnnectRequest_connectionRequestSystems_set(swigCPtr, this, SWIGTYPE_p_DataStructures__ListT_SLNet__Router2__ConnectionRequestSystem_t.getCPtr(value));
    }
  
    public SWIGTYPE_p_DataStructures__ListT_SLNet__Router2__ConnectionRequestSystem_t getConnectionRequestSystems() {
      long cPtr = SLikeNetJNI.Router2_ConnnectRequest_connectionRequestSystems_get(swigCPtr, this);
      return (cPtr == 0) ? null : new SWIGTYPE_p_DataStructures__ListT_SLNet__Router2__ConnectionRequestSystem_t(cPtr, false);
    }
  
    public void setConnectionRequestSystemsMutex(SimpleMutex value) {
      SLikeNetJNI.Router2_ConnnectRequest_connectionRequestSystemsMutex_set(swigCPtr, this, SimpleMutex.getCPtr(value), value);
    }
  
    public SimpleMutex getConnectionRequestSystemsMutex() {
      long cPtr = SLikeNetJNI.Router2_ConnnectRequest_connectionRequestSystemsMutex_get(swigCPtr, this);
      return (cPtr == 0) ? null : new SimpleMutex(cPtr, false);
    }
  
    public void setRequestState(Router2.Router2RequestStates value) {
      SLikeNetJNI.Router2_ConnnectRequest_requestState_set(swigCPtr, this, value.swigValue());
    }
  
    public Router2.Router2RequestStates getRequestState() {
      return Router2.Router2RequestStates.swigToEnum(SLikeNetJNI.Router2_ConnnectRequest_requestState_get(swigCPtr, this));
    }
  
    public void setPingTimeout(SWIGTYPE_p_unsigned___int32 value) {
      SLikeNetJNI.Router2_ConnnectRequest_pingTimeout_set(swigCPtr, this, SWIGTYPE_p_unsigned___int32.getCPtr(value));
    }
  
    public SWIGTYPE_p_unsigned___int32 getPingTimeout() {
      return new SWIGTYPE_p_unsigned___int32(SLikeNetJNI.Router2_ConnnectRequest_pingTimeout_get(swigCPtr, this), true);
    }
  
    public void setEndpointGuid(RakNetGUID value) {
      SLikeNetJNI.Router2_ConnnectRequest_endpointGuid_set(swigCPtr, this, RakNetGUID.getCPtr(value), value);
    }
  
    public RakNetGUID getEndpointGuid() {
      long cPtr = SLikeNetJNI.Router2_ConnnectRequest_endpointGuid_get(swigCPtr, this);
      return (cPtr == 0) ? null : new RakNetGUID(cPtr, false);
    }
  
    public void setLastRequestedForwardingSystem(RakNetGUID value) {
      SLikeNetJNI.Router2_ConnnectRequest_lastRequestedForwardingSystem_set(swigCPtr, this, RakNetGUID.getCPtr(value), value);
    }
  
    public RakNetGUID getLastRequestedForwardingSystem() {
      long cPtr = SLikeNetJNI.Router2_ConnnectRequest_lastRequestedForwardingSystem_get(swigCPtr, this);
      return (cPtr == 0) ? null : new RakNetGUID(cPtr, false);
    }
  
    public void setReturnConnectionLostOnFailure(boolean value) {
      SLikeNetJNI.Router2_ConnnectRequest_returnConnectionLostOnFailure_set(swigCPtr, this, value);
    }
  
    public boolean getReturnConnectionLostOnFailure() {
      return SLikeNetJNI.Router2_ConnnectRequest_returnConnectionLostOnFailure_get(swigCPtr, this);
    }
  
    public long GetGuidIndex(RakNetGUID guid) {
      return SLikeNetJNI.Router2_ConnnectRequest_GetGuidIndex(swigCPtr, this, RakNetGUID.getCPtr(guid), guid);
    }
  
  }

  public long GetConnectionRequestIndex(RakNetGUID endpointGuid) {
    return SLikeNetJNI.Router2_GetConnectionRequestIndex(swigCPtr, this, RakNetGUID.getCPtr(endpointGuid), endpointGuid);
  }

  static public class MiniPunchRequest {
    private transient long swigCPtr;
    protected transient boolean swigCMemOwn;
  
    protected MiniPunchRequest(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(MiniPunchRequest obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    @SuppressWarnings("deprecation")
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          SLikeNetJNI.delete_Router2_MiniPunchRequest(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public void setEndpointGuid(RakNetGUID value) {
      SLikeNetJNI.Router2_MiniPunchRequest_endpointGuid_set(swigCPtr, this, RakNetGUID.getCPtr(value), value);
    }
  
    public RakNetGUID getEndpointGuid() {
      long cPtr = SLikeNetJNI.Router2_MiniPunchRequest_endpointGuid_get(swigCPtr, this);
      return (cPtr == 0) ? null : new RakNetGUID(cPtr, false);
    }
  
    public void setEndpointAddress(SystemAddress value) {
      SLikeNetJNI.Router2_MiniPunchRequest_endpointAddress_set(swigCPtr, this, SystemAddress.getCPtr(value), value);
    }
  
    public SystemAddress getEndpointAddress() {
      long cPtr = SLikeNetJNI.Router2_MiniPunchRequest_endpointAddress_get(swigCPtr, this);
      return (cPtr == 0) ? null : new SystemAddress(cPtr, false);
    }
  
    public void setGotReplyFromEndpoint(boolean value) {
      SLikeNetJNI.Router2_MiniPunchRequest_gotReplyFromEndpoint_set(swigCPtr, this, value);
    }
  
    public boolean getGotReplyFromEndpoint() {
      return SLikeNetJNI.Router2_MiniPunchRequest_gotReplyFromEndpoint_get(swigCPtr, this);
    }
  
    public void setSourceGuid(RakNetGUID value) {
      SLikeNetJNI.Router2_MiniPunchRequest_sourceGuid_set(swigCPtr, this, RakNetGUID.getCPtr(value), value);
    }
  
    public RakNetGUID getSourceGuid() {
      long cPtr = SLikeNetJNI.Router2_MiniPunchRequest_sourceGuid_get(swigCPtr, this);
      return (cPtr == 0) ? null : new RakNetGUID(cPtr, false);
    }
  
    public void setSourceAddress(SystemAddress value) {
      SLikeNetJNI.Router2_MiniPunchRequest_sourceAddress_set(swigCPtr, this, SystemAddress.getCPtr(value), value);
    }
  
    public SystemAddress getSourceAddress() {
      long cPtr = SLikeNetJNI.Router2_MiniPunchRequest_sourceAddress_get(swigCPtr, this);
      return (cPtr == 0) ? null : new SystemAddress(cPtr, false);
    }
  
    public void setGotReplyFromSource(boolean value) {
      SLikeNetJNI.Router2_MiniPunchRequest_gotReplyFromSource_set(swigCPtr, this, value);
    }
  
    public boolean getGotReplyFromSource() {
      return SLikeNetJNI.Router2_MiniPunchRequest_gotReplyFromSource_get(swigCPtr, this);
    }
  
    public void setTimeout(SWIGTYPE_p_unsigned___int32 value) {
      SLikeNetJNI.Router2_MiniPunchRequest_timeout_set(swigCPtr, this, SWIGTYPE_p_unsigned___int32.getCPtr(value));
    }
  
    public SWIGTYPE_p_unsigned___int32 getTimeout() {
      return new SWIGTYPE_p_unsigned___int32(SLikeNetJNI.Router2_MiniPunchRequest_timeout_get(swigCPtr, this), true);
    }
  
    public void setNextAction(SWIGTYPE_p_unsigned___int32 value) {
      SLikeNetJNI.Router2_MiniPunchRequest_nextAction_set(swigCPtr, this, SWIGTYPE_p_unsigned___int32.getCPtr(value));
    }
  
    public SWIGTYPE_p_unsigned___int32 getNextAction() {
      return new SWIGTYPE_p_unsigned___int32(SLikeNetJNI.Router2_MiniPunchRequest_nextAction_get(swigCPtr, this), true);
    }
  
    public void setForwardingPort(int value) {
      SLikeNetJNI.Router2_MiniPunchRequest_forwardingPort_set(swigCPtr, this, value);
    }
  
    public int getForwardingPort() {
      return SLikeNetJNI.Router2_MiniPunchRequest_forwardingPort_get(swigCPtr, this);
    }
  
    public void setForwardingSocket(int value) {
      SLikeNetJNI.Router2_MiniPunchRequest_forwardingSocket_set(swigCPtr, this, value);
    }
  
    public int getForwardingSocket() {
      return SLikeNetJNI.Router2_MiniPunchRequest_forwardingSocket_get(swigCPtr, this);
    }
  
    public MiniPunchRequest() {
      this(SLikeNetJNI.new_Router2_MiniPunchRequest(), true);
    }
  
  }

  static public class ForwardedConnection {
    private transient long swigCPtr;
    protected transient boolean swigCMemOwn;
  
    protected ForwardedConnection(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(ForwardedConnection obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    @SuppressWarnings("deprecation")
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          SLikeNetJNI.delete_Router2_ForwardedConnection(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public void setEndpointGuid(RakNetGUID value) {
      SLikeNetJNI.Router2_ForwardedConnection_endpointGuid_set(swigCPtr, this, RakNetGUID.getCPtr(value), value);
    }
  
    public RakNetGUID getEndpointGuid() {
      long cPtr = SLikeNetJNI.Router2_ForwardedConnection_endpointGuid_get(swigCPtr, this);
      return (cPtr == 0) ? null : new RakNetGUID(cPtr, false);
    }
  
    public void setIntermediaryGuid(RakNetGUID value) {
      SLikeNetJNI.Router2_ForwardedConnection_intermediaryGuid_set(swigCPtr, this, RakNetGUID.getCPtr(value), value);
    }
  
    public RakNetGUID getIntermediaryGuid() {
      long cPtr = SLikeNetJNI.Router2_ForwardedConnection_intermediaryGuid_get(swigCPtr, this);
      return (cPtr == 0) ? null : new RakNetGUID(cPtr, false);
    }
  
    public void setIntermediaryAddress(SystemAddress value) {
      SLikeNetJNI.Router2_ForwardedConnection_intermediaryAddress_set(swigCPtr, this, SystemAddress.getCPtr(value), value);
    }
  
    public SystemAddress getIntermediaryAddress() {
      long cPtr = SLikeNetJNI.Router2_ForwardedConnection_intermediaryAddress_get(swigCPtr, this);
      return (cPtr == 0) ? null : new SystemAddress(cPtr, false);
    }
  
    public void setReturnConnectionLostOnFailure(boolean value) {
      SLikeNetJNI.Router2_ForwardedConnection_returnConnectionLostOnFailure_set(swigCPtr, this, value);
    }
  
    public boolean getReturnConnectionLostOnFailure() {
      return SLikeNetJNI.Router2_ForwardedConnection_returnConnectionLostOnFailure_get(swigCPtr, this);
    }
  
    public void setWeInitiatedForwarding(boolean value) {
      SLikeNetJNI.Router2_ForwardedConnection_weInitiatedForwarding_set(swigCPtr, this, value);
    }
  
    public boolean getWeInitiatedForwarding() {
      return SLikeNetJNI.Router2_ForwardedConnection_weInitiatedForwarding_get(swigCPtr, this);
    }
  
    public ForwardedConnection() {
      this(SLikeNetJNI.new_Router2_ForwardedConnection(), true);
    }
  
  }

  public final static class Router2RequestStates {
    public final static Router2.Router2RequestStates R2RS_REQUEST_STATE_QUERY_FORWARDING = new Router2.Router2RequestStates("R2RS_REQUEST_STATE_QUERY_FORWARDING");
    public final static Router2.Router2RequestStates REQUEST_STATE_REQUEST_FORWARDING = new Router2.Router2RequestStates("REQUEST_STATE_REQUEST_FORWARDING");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static Router2RequestStates swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + Router2RequestStates.class + " with value " + swigValue);
    }

    private Router2RequestStates(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private Router2RequestStates(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private Router2RequestStates(String swigName, Router2RequestStates swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static Router2RequestStates[] swigValues = { R2RS_REQUEST_STATE_QUERY_FORWARDING, REQUEST_STATE_REQUEST_FORWARDING };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
